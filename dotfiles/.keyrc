┌──────── [homoiconic] ────────┐ ┌───────── [keycode] ──────────┐
│ ⎋ F1F2F3F4F5F6F7F8F9FaFbFc ⌽ │ │ 357A78637660616264656D676F00 │
│ ` 1 2 3 4 5 6 7 8 9 0 - = ⌫  │ │ 321213141517161A1C191D1B1833 │
│  ⇥ q w e r t y u i o p [ ] \ │ │ 300C0D0E0F111020221F23211E2A │
│  ⇪ a s d f g h j k l ; '  ↩  │ │  6E000102030504262825292724  │
│  ⇧L z x c v b n m , . /  ⇧R  │ │  38 060708090B2D2E2B2F2C 3C  │
│ Fn^ ⌥L⌘L    ␣    ⌘R⌥R← ↑ ↓ → │ │ 3F3B3A37   31   363D7B7E7D7C │
└──────────────────────────────┘ └──────────────────────────────┘
┌──────────────────────────────┐ ┌────────────── ⇧ ─────────────┐
│ ` 1 2 3 4 5 6 7 8 9 0 - = _  │ │ ~ ! @ # $ % ^ & * ( ) __+ _  │
│  _ q w e r t y u i o p [ ] \ │ │  _ Q W E R T Y U I O P { } | │
│  _ a s d f g h j k l ; '  _  │ │  _ A S D F G H J K L : "  _  │
│  _  z x c v b n m , . /  _   │ │  _  Z X C V B N M < > ?  _   │
└──────────────────────────────┘ └──────────────────────────────┘
┌───────────── ; ──────────────┐ ┌───────────── ⇧; ─────────────┐
│ _ _ _ _ _ _ _ _ _ _ _ _ _ _  │ │ _ _ _ _ _ _ _ _ _ _ _ _ _ _  │
│  _ _ _ ε ρ τ υ θ ι ω π _ _ _ │ │  _ _ _ Ε Ρ Τ Υ Θ Ι Ω Π _ _ _ │
│  _ α σ δ φ γ η ξ κ λ _ _  _  │ │  _ Α Σ Δ Φ Γ Η Ξ Κ Λ _ _  _  │
│  _  ζ χ ψ _ β ν μ _ _ _  _   │ │  _  Ζ Χ Ψ _ Β Ν Μ _ _ _  _   │
└──────────────────────────────┘ └──────────────────────────────┘
┌───────────── [ ──────────────┐ ┌───────────── ⇧[ ─────────────┐
│ _ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ⁰ ⁻ ⁼ _  │ │ _ _ _ _ _ _ _ _ _ ⁽ ⁾ _ ⁺ _  │
│  _ _ ʷ ᵉ ʳ ᵗ ʸ ᵘ ⁱ ᵒ ᵖ _ _ _ │ │  _ _ ᵂ ᴱ ᴿ ᵀ _ ᵁ ᴵ ᴼ ᴾ _ _ _ │
│  _ ᵃ ˢ ᵈ ᶠ ᵍ ʰ ʲ ᵏ ˡ _ _  _  │ │  _ ᴬ ᴮ ᴰ _ ᴳ ᴴ ᴶ ᴷ ᴸ _ _  _  │
│  _  ᶻ ˣ ᶜ ᵛ ᵇ ⁿ ᵐ _ _ _  _   │ │  _  _ _ _ ⱽ _ ᴺ ᴹ _ _ _  _   │
└──────────────────────────────┘ └──────────────────────────────┘
┌───────────── ] ──────────────┐ ┌───────────── ⇧] ─────────────┐
│ _ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉ ₀ ₋ ₌ _  │ │ _ _ _ _ _ _ _ _ _ ₍ ₎ _ ₊ _  │
│  _ _ _ ₑ ᵣ ₜ _ ᵤ ᵢ ₒ ₚ _ _ _ │ │  _ _ _ _ _ _ _ _ _ _ _ _ _ _ │
│  _ ₐ ₛ _ _ _ ₕ ⱼ ₖ ₗ _ _  _  │ │  _ _ _ _ _ _ _ _ _ _ _ _  _  │
│  _  _ ₓ _ ᵥ _ ₙ ₘ _ _ _  _   │ │  _  _ _ _ _ _ _ _ _ _ _  _   │
└──────────────────────────────┘ └──────────────────────────────┘
┌───────────── ⌥ ──────────────┐ ┌───────────── ⇧⌥ ─────────────┐
│ ⎋ _ _ _ _ _ _  _ _ _ _ _ _ _ │ │ _ _ _ _ _ _ _  _ _ _ _ _ _ _ │
│ _ ↯ _ ∃ ⇧ ⌘ ⌥ _ × _ _ − ⌫ _  │ │ _ _ _ ∄ _ _ _ _ _ _ _ _ _ _  │
│  ⇥ ℚ _ ∈ ℝ _ ✓ ∪ ∞ ◍ ℙ ⟨ ⟩ ⌽ │ │  _ _ _ ∉ _ _ _ _ _ _ ∏ _ _ _ │
│  _ ∀ ∑ ° ⌊ ⌈ ℍ _ _ _  “ ” ↩  │ │  _ ¬∀_ _ ⌋ ⌉ _ _ _ _ ‘ ’  _  │
│  _  ℤ _ ℂ _ _ ℕ ∕ ⊂ ⊃ ¢  _   │ │  _  _ _ _ _ _ _ _ ⊆ ⊇ _  _   │
│ _ _ _ _     ␣    _ _ _ _ _ _ │ │ _ _ _ _     _    _ _ ← ↑ ↓ → │
└──────────────────────────────┘ └──────────────────────────────┘
⌥t  ✨
⌥x  ⋈

`=  ≈
`/  ≉
1/  ‽
=/  ≠
.;  …
=,  ≤
=.  ≥
=-  ±
-,  ←
-.  →
`1  ¬
-1  ₋₁
,.  ↔
;=  :=
sd  ι

FnF1  $ _bright down
FnF2  $ _bright up
          FnF3  ] ⌘^f
[chrome]  FnF3  ] ⌘⇧f
[sublime] FnF3  ] ⌘⇧^f
FnF4  ] DASHBOARD
^⇪    ] ^⇧L⇥
⌘⇧3   $ (( _sc     ~/Downloads/$(date_i).png )&)
⌘⇧4   $ (( _sc -io ~/Downloads/$(date_i).png )&)
⌘⇧^3  $ (( _sc     -cr )&)
⌘⇧^4  $ (( _sc -io -cr )&)
⌘⇧⌥3  $ (( _sc_imgur     )&)
⌘⇧⌥4  $ (( _sc_imgur -io )&)
⌥^i  $ ack; osascript -e 'id of app (path to frontmost application as text)' | sb
⌥^s  $ ack; t=$([[ $(NoSleepCtrl -g) = *0 ]] && echo 1 || echo 0); while :; do NoSleepCtrl -abs $t,$t; [[ $(NoSleepCtrl -g) = *$t ]] && break; done # ! should timeout in 1s and alert user of failure
⌥^l  $ ack; _chrome "genius $(osascript -e 'tell app "spotify" to {artist,name} of current track')"
⌥^c  $ (( ζ -e 'robot ← npm("robotjs@0.3.7"); robot.mouseClick.every(1/100)' )&)
⌥^v  $ for v in $(ps aux | grep node | grep robot | awk '{ print $2 }'); do kill "$v"; done
# ⌥^b  $ ζ -e 'φ`~/Downloads/x.txt`.ι = φ`~/Downloads/x.txt`.text + util.inspect(npm("robotjs@0.3.7").getMousePos())+"\n"'
☝☝    ] ⌘

[terminal] ⌘R      ] ^
[path_finder] ⌘⇧t  $ _in_new_terminal 'osascript -e '\''tell app "system events" to tell process "Path Finder" to click menu item 1 of menu 1 of menu item "recently closed tabs" of menu 1 of menu item "tabs" of menu 1 of menu bar item "file" of menu bar 1'\'''
[photo_booth] ⌘q   $ ] ⌘q; ζ -e 'φ`~/Pictures/Photo Booth Library/Pictures/*`.φs.map(λ(ι){ι+=""; t ← φ(ι).name.match(/on ([\d\-]+) at (\d\d)\.(\d\d)(?: #)?(\d+)?(.+)$/); fs.renameSync(ι,φ`~/Downloads/${Time(t[1]+"T"+t[2]+":"+t[3]).ymdhm+(t[4]?" "+t[4]:"")+t[5]}`+"")})'
[sublime] /↩       ] ^↩
# [chrome]  /↩       $ ack; _chrome "$(osascript -e 'tell app "google chrome" to execute window 1'\''s active tab javascript "window.getSelection().toString()"')"
# [spotify] /↩       $ ] ⌘c; ack; sleep 0.12; p="$(p)"; if ! [[ $p = http:* ]]; then _chrome "$p"; else t=$(osascript -e 'tell app "spotify" to spotify url of current track'); osascript -e 'tell app "spotify" to play track "'"$p"'"'; sleep 0.05; _chrome "lyrics $(osascript -e 'tell app "spotify" to {artist,name} of current track')"; osascript -e 'tell app "spotify" to play track "'"$t"'"'; fi
          /↩       $ ack; echo vbb4lx08429be29 | p; ] ⌘c; while [[ "$(p)" = vbb4lx08429be29 ]]; do sleep 0.01; done; _chrome "$(p)"
# [path_finder] ⌘c   $ ] ⌘c; ζ -e 't ← p(); if (t[0]==="/") p(t.split("\n").map(λ(ι){↩ ι.replace(re`^${process.env.HOME}(?=/|$)`,"~").replace(re`^~/ali/books/papers(?=/|$)`,"~/papers").replace(re`^~/ali/books(?=/|$)`,"~/books").replace(/ /g,"%20").replace(/^\/|(?=~)/,"file:/").replace()}).join("\n"))'
[chrome] ⌘⇧l       $ ] ⌘l; ack; ζ -e 'var [title,url] = osaᵥ`chrome: get {title,URL} of active tab of window 1`; t ← new String(title+" "+url); t.sourcemap = {title:[0,title.length], url:[(title+" ").length,(title+" "+url).length]}; p(nice_url(t))'
[terminal] ⌘r      $ ] ⌘t ] '⌘{' ] ⌘w
[terminal] ⌘⇧r     $ ] '. ~/.bashrc' ] ↩

         ⌘h        $ nack
[chrome] ⌘h        ] ⌘h
          ⌘^f      $ nack
[chrome]  ⌘⇧f      $ nack
[sublime] ⌘⇧^f     $ nack
⇪                  $ nack
# FnF5               $ nack
# FnF6               $ nack
[sublime] ^↩       $ nack
[sublime] ⌘⇧;      $ nack
[sublime] ⌘⇧p      $ nack
[path_finder] ⌘1   $ nack
[path_finder] ⌘2   $ nack
[path_finder] ⌘3   $ nack

# \x09    ⇥, ⇧⇥
# \x0a    ↩, ⇧↩, ^o
# \x20    ␣

# meh ≁ ≔≕ ∴ ∓ ′″‴ ∘ ≡≢ ⊕ ｢｣
# want ∪∩ ⊨⊢⊥⊤ ∧∨ ÷ ⊄⊅⊈⊉ ∋∌ ☝ ″ 卍
# ←↑→↓↔↕↖↗↘↙ ⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙ ∷ § ‖ †‡ ※⁜ ‼⁇⁈⁉ ⁞ ≒≓≔≝ ⨀⨁⨂⨸ ≪≫ ⋱ ⌂ ⌕ ◊⟠⧫ ♈♉♊♋♌♍♎♏♐♑♒♓ ‹›⟪⟫⸨⸩
# ‣⁑⁕⁖⁘⁙⁚⁝∵▶▷▸▹►▻◆◇○◌◍◎●◯★☆➤ ☥

# http://orderedbytes.com/controllermate/ , https://github.com/sdegutis/mjolnir , wacky ideas: gesture interface that uses differently-painted fingernails to activate different features
