------------------------------------ git ops -----------------------------------

next time we merge git repos, let us document the steps here

--- convert hg repo to git ---

http://hivelogic.com/articles/converting-from-mercurial-to-git/

--- .git folder is too big ---

git gc --prune=now --aggressive

----- split out subfolder ----

this ... breaks on unicode :(

D() { [ -d "$1" ] || mkdir -p "$1"; echo "$1"; }

big_repo=~/ali/github/scratch
subfolder=ζ₀
new_repo=~/ali/github/lang-zeta-zero

cd "$big_repo"
git subtree split -P "$subfolder" -b "$subfolder-only"

cd $(D "$new_repo")
git init
git pull "$big_repo" "$subfolder-only"

cd "$big_repo"
# git rm -rf "$subfolder-only"
git filter-branch --index-filter "git rm -q -r -f --cached --ignore-unmatch ABC" --prune-empty HEAD

rm -rf .git/refs/original/ &&
git reflog expire --all &&
git gc --aggressive --prune=now
git reflog expire --all --expire-unreachable=0
git repack -A -d
git prune

------------------------------------- magic ------------------------------------

# magic get-dir-of-file
t="${BASH_SOURCE[0]}"; while [ -h "$t" ]; do d="$(cd -P "$(dirname "$t")" && pwd)"; t="$(readlink "$t")"; [[ $t != /* ]] && t="$d/$t"; done; DIR="$(cd -P "$( dirname "$t")" && pwd)"

--------------------------- scrape miri publications ---------------------------

// go to https://intelligence.org/all-publications/
// copy this into the console
// results will be in the clipboard
$ = jQuery; copy($('#articles section > .row-fluid').toArray().map(function(v){
	var t = $(v).children().eq(0)
	return [
		t.find('a').attr('href').replace(/^(https:\/\/intelligence.org)?\/?files\//g,"file:///~/papers/"),
		t.hasClass('technical-report')? '#techre' : null,
		t.hasClass('conference-paper')? '#paper' : null,
		t.hasClass('journal-article')? '#article' : null,
		t.hasClass('book-chapter')? '#chapter' : null,
		$(v).find('.HRAD-click').length? '#HRAD' : null,
		$(v).find('.ETAD-click').length? '#ETAD' : null,
		$(v).find('.VL-click').length? '#VL' : null,
		$(v).find('.FC-click').length? '#FC' : null,
		t.text()
			.replace(/\s\s+/g, ' ')
			.replace(/(Berkeley, CA: )?Machine Intelligence Research Institute.{0,8}$/g, '')
			.replace(/ +$/g, '')
			.replace(/Technical [Rr]eport [\d-]+\..*$/g, ''),
		].filter(function(v){return v}).join(' ')
		}).join('\n'))

------------------------------ this is pretty cute -----------------------------

//! color names randomly in ansi 12359abc
namegen ← ζ2_gen2fn(λ*(){
	long ← 'bekas cahlo caris cekla dedna dekik emiak eseik gazok gihza girim gumlu halbo hanka henuh kadut kagzi kakki kamor kehul kisar kizak kofur kohig lopra mesat mesip mezid motka nahso nalic nirsu omiac radil ratis repgi resra rukan siral sorzo tarak tilke zalsi zehaz zekhu zeluz zephu zifin zirez zohip zokmi zonri zusci'.split(' ')
	short ← 'ake bek cah cek dek din emi esi faz gaz gih gir gum hal han kad kag kam keh ket kis kiz kob koh kot lop mez mot nal nir oki omi rad rar sar tar tus zal zar zeh zek zel zep zif zok zon zus'.split(' ')
	short = _.shuffle(short.ζ2_mapcat(λ(v){↩ _.range(10).map(λ(i){↩ v+' '+i})}))
	to ← round(long.length/2); yield* _.shuffle(long.concat(short.slice(0,to))); yield* short.slice(to)
	c ← {}; for(;;){t ← '#'+Math.random().toString(36).slice(2,6); if (c[t]) continue; yield (c[t]=1, t)} })

a bob is a soul and has
	spirit (hp)
	a soul, which chooses to attack (adjacent bobs) or move (to adjacent empty cells) or mine (current cell) according to certain rules (which are printed with the bob) - all of which increase tiredness
	a body, which controls which of the bob's choices will have what effects, and should control what the bob sees

the grid is made of cells. their upper part can contain souls, and their lower part is a mineable reservoir of spirit

we continually print the grid

we iterate physics, randomly generating bobs, letting souls make choices, handling death, and handling the effects of souls' choices
