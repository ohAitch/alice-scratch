############################ operations on git repos ###########################
################# merge ################
to_path=~/code/scratch
from='lang-alpha'
from_url='git@github.com:alice0meta/lang-alpha.git'

cd "$to_path"
git remote add "$from" "$from_url"
git fetch "$from"
git merge "$from/master"
git remote remove "$from"

################# split ################
split(){ repo=~/code/scratch ;subfolder='.archive' ;out=~/code/.archive ;tmp_branch=kc8vu2z3a
	# !!! this will destroy existing commit ids ;use carefully
	# may not work with unicode filenames
	# may not work at all

	cd "$repo"
	git subtree split -P "$subfolder" -b "$tmp_branch"

	mkdir -p "$out" ;cd "$out"
	git init
	git pull "$repo" "$tmp_branch"

	cd "$repo"
	git filter-branch --index-filter "git rm -q -r -f --cached --ignore-unmatch ABC" --prune-empty HEAD
	git branch -D "$tmp_branch"

	# cleanup?
	rm -rf .git/refs/original/
	git reflog expire --all
	git gc --aggressive --prune=now
	git reflog expire --all --expire-unreachable=0
	git repack -A -d
	git prune

	git push --force origin
	}

############################## this is pretty cute #############################
# ! color names randomly in ansi 12359abc
gen2fn ← f=>{ t ← f() ;↩ => t.next().value }
# gen2fn ← f=> [#Q seq(f()).next_ι #Q].bind
namegen ← gen2fn(λ*(){
	long ← 'bekas cahlo caris cekla dedna dekik emiak eseik gazok gihza girim gumlu halbo hanka henuh kadut kagzi kakki kamor kehul kisar kizak kofur kohig lopra mesat mesip mezid motka nahso nalic nirsu omiac radil ratis repgi resra rukan siral sorzo tarak tilke zalsi zehaz zekhu zeluz zephu zifin zirez zohip zokmi zonri zusci'.split(' ')
	short ← 'ake bek cah cek dek din emi esi faz gaz gih gir gum hal han kad kag kam keh ket kis kiz kob koh kot lop mez mot nal nir oki omi rad rar sar tar tus zal zar zeh zek zel zep zif zok zon zus'.split(' ')
	short = short.map…(ι=> 10..map(i=> ι+' '+i))._.shuffle()
	to ← round((long.‖)/2) ;yield* _.shuffle([…long, …short.slice(0,to)]) ;yield* short.slice(to)
	c ← {} ;for(;;){t ← '#'+4..map(ι=> random([…/[0-9a-z]/])).join('') ;if (c[t]) continue ;yield (c[t]=1, t)} })

###################################### ocr #####################################
# # used up: alice0meta@gmail.com
# # 46 requests remaining on sparkleshy@gmail.com @ KqsDmZ77kW
# # 100 requests remaining on comely.naiad@gmail.com @ rtjM58zxK2
# ocr() { curl -X POST http://api.ocrapiservice.com/1.0/rest/ocr -F 'apikey=rtjM58zxK2' -F 'language=en' -F "image=@$1" > "${1%.*}.txt" ;}
tesseract ← npm`node-tesseract@0.2.7`
φ`../ep/*`.map(λ(f){tesseract.process(sh`${f}`,λ(e,ι){fs(f+'.txt').$ = e? 'ERROR\n'+e : ι})})

################################ jquery ish misc ###############################
E.poll = λ(f,cb,time){ r←{} ;(λ Λ(){ nxt ← => nxt=0 ;t ← f(nxt) ;r.done = !!t ;t? cb.P(∅,t).defer() : nxt? Λ.in(time) : Λ.defer() })() ;↩ r }

keyinfo ← λ(key){
	t ← {'⇥':[9,'↓'],'↩':[13],'⎋':[27,'↑'],'←':[37,'↓'],'↑':[38,'↓'],'→':[39,'↓'],'↓':[40,'↓']}[key]||[]
	↩ {code: t[0] || ord(key), $onfn: t[1]? {'↑':'keyup','↓':'keydown'}[t[1]] : 'keypress'} }
$.prototype.on_key = λ(key,sel,cb0){ if( arguments.length===2 ){ [key,cb0,sel] = arguments }
	# [key,…ns] ← key.split(/(?=\.\w)/) ;ns = ns.join('')
	t ← keyinfo(key) ;@.on(t.$onfn/*+ns*/,sel,λ(e){if (e.which===t.code) ↩ cb0(e)}) }
$.prototype.find_self = λ(sel){↩ @.find(sel).add(@.filter(sel))}

################################ de-duplication ################################
φ`**`.φs.map(ι=> [ι+'',ι.get()])._.groupBy(1)|>(_.values).map(ι=> _(ι).map(0)).filter(.‖ > 1)

############################## python data science #############################
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

q = mpimg.imread('/Users/home/Downloads/a.png')
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
x = q[:,:,0].ravel()
y = q[:,:,1].ravel()
z = q[:,:,2].ravel()
ax.scatter(x, y, z)
ax.set_xlabel('R Label')
ax.set_ylabel('G Label')
ax.set_zlabel('B Label')
plt.show()

############################## sublime api things ##############################
T ← 10 ;i←0 ;(=>{sb_editᵥ(sb.tab.active)`view.insert(edit,view.sel()[0].begin(),"\n")`}).every(T)

##################################### life #####################################
sublime_set_buffer ← ι=> sb_editᵥ(sb.tab.active)`view.replace(edit,Region(0,view.size()),${ι})`

braille_table ← 0x100.map(ι=> chr(ord(' ')+ι))
braille_2d ← λ(ι){↩ (Buffer.isBuffer(ι.ι)? ι.ι.chunk(ι.X) : ι).chunk(4).map(λ(ι){t ← [] ;for(i←0;i<ι[0].‖;i+=2) t.push(braille_table[(ι[0][i]<<0)|(ι[1][i]<<1)|(ι[2][i]<<2)|(ι[0][i+1]<<3)|(ι[1][i+1]<<4)|(ι[2][i+1]<<5)|(ι[3][i]<<6)|(ι[3][i+1]<<7)]) ;↩ t.join('')}).join('\n')}
life ← λ(ι){
	if (!ι) {ι ← {X:115*2,Y:46*4} ;ι.ι = Buffer.from((ι.X*ι.Y).map(=> random()<0.5 ?1:0 )) ;↩ ι} # 115,46
	else {X ← +ι.X ;Y ← +ι.Y ;ι = ι.ι
		r ← Buffer.from(ι)
		get ← (x,y)=> 0<=x&&x<X && 0<=y&&y<Y? ι[y*X+x] : 0
		for(y←1;y<Y-1;y++) for(x←1;x<X-1;x++) {
			n ← ι[(y-1)*X+x-1] + ι[(y-1)*X+x] + ι[(y-1)*X+x+1] + ι[y*X+x-1] + ι[y*X+x+1] + ι[(y+1)*X+x-1] + ι[(y+1)*X+x] + ι[(y+1)*X+x+1]
			r[y*X+x] = (n===2? ι[y*X+x] : n===3? 1 : 0) }
		for(y←0;y<Y;y+=Y-1) for(x←0;x<X;x++) {
			n ← 0 ;for(xₒ←-1;xₒ<=1;xₒ++) for(yₒ←-1;yₒ<=1;yₒ++) n += get(x+xₒ,y+yₒ)
			r[y*X+x] = (n===2? get(x,y) : n===3? 1 : 0) }
		for(x←0;x<X;x+=X-1) for(y←1;y<Y-1;y++) {
			n ← 0 ;for(xₒ←-1;xₒ<=1;xₒ++) for(yₒ←-1;yₒ<=1;yₒ++) n += get(x+xₒ,y+yₒ)
			r[y*X+x] = (n===2? get(x,y) : n===3? 1 : 0) }
		# for(y←0;y<Y;y++) for(x←0;x<X;x++) {
		# 	n ← 0 ;for(yₒ←-1;yₒ<=1;yₒ++) for(xₒ←-1;xₒ<=1;xₒ++) n += get(x+xₒ,y+yₒ)
		# 	r[y*X+x] = (n===3? 1 : n===4 && get(x,y)===1? 1 : 0) }
		↩ {X,Y,ι:r} } }
ι← ;for(;;) sublime_set_buffer(braille_2d(ι = life(ι)))

########################## bits. floating point bits. ##########################
bit_reverse = λ(L,ι){r ← 0 ;for (i←0;i<L;i++){r = (r << 1) | (ι & 1) ;ι = ι >> 1} ;↩ r}
to_binary_LE ← ι=> […ι].map(ι=> ('00000000'+ι.toString(2)).slice(-8).split('').reverse().join('')).join('')
q ← ι=>{ t ← Buffer(8) ;t.writeDoubleLE(ι,0) ;t = to_binary_LE(t) ;↩ t.slice(0,52)+' '+t.slice(52,52+11)+' '+t[-1]+' = '+ι }

################################### entities ###################################
entities_encode ← .replace(/[&"'<>]/g,λ(ι){↩ {'&':'&amp;', '"':'&quot;', '\'':'&apos;', '<':'&lt;', '>':'&gt;'}[ι]})
entities_decode ← typeof(window)==='undefined'? npm`html-entities@1.2.0`.AllHtmlEntities.decode : λ(ι){t ← document.createElement('textarea') ;t.innerHTML = ι ;↩ t.value}

######################## fun with fraction approximation #######################
wu ← npm`wu@2.1.0`
Array.prototype.maplog = λ(f){↩ @.map((ι,i,l)=>( i%(l. length / 100 |0)===0 && cn.log(Time(),'mapping @',i,'/',l.‖), f(ι,i,l) )) }
gcd ← (a,b)=> b>0? gcd(b, a%b) : a
reduced ← (a,b)=>{ t ← gcd(a,b) ;↩ [a/t,b/t] }
bits ← ι=> log2(ι[0]*ι[1])
list_approx ← λ*(ι){ Rp ← (a,b)=> gcd(a,b)===1 ;a←1 ;b←1 ;for(;;){
	while (a/b > ι) b++ ;if (Rp(a,b-1)) yield [a,b-1] ;if (Rp(a,b)) yield [a,b]
	while (a/b < ι) a++ ;if (Rp(a-1,b)) yield [a-1,b] ;if (Rp(a,b)) yield [a,b]
	} }
error ← (ι,approx)=>{ t ← (approx[0]/approx[1]) / (ι[0]/ι[1]) ;↩ 1 - (t<1? t : 1/t) }
score ← (ι,approx)=> ((ι[0]*ι[1]) / (approx[0]*approx[1])) * (1/error(ι,approx))
best_approx ← x=>{ size_x ← x[0]*x[1] ;↩ […wu(list_approx(x[0]/x[1])).takeWhile(ι=> ι[0]*ι[1] < size_x)]._.max(ι=> score(x,ι)) }

to ← 1e5
bench(=> cn.log(
	(to/2).map(ι=> reduced(ι, to)).filter(ι=> log2(to)*2*0.6 <= bits(ι) && bits(ι) <= log2(to)*2).maplog(ι=> [ι, best_approx(ι)] ).filter(ι=> 1 < ι[1][0] && ι[1][1] > 9)._.sortBy(ι=> score(ι[0],ι[1])).slice(-40).map(ι=> (ι[0][0]/ι[0][1])+' ≈ '+ι[1][0]+'÷'+ι[1][1]).join('\n')
	) )

############################## real clipboard api ##############################
osaᵥ`set x to clipboard info ;the clipboard as (item 1 of item 2 of x)`
probably hammerspoon is better

############################### neat chrome apis ###############################
http://developer.chrome.com/extensions/accessibilityFeatures
http://developer.chrome.com/extensions/debugger
http://developer.chrome.com/extensions/devtools_inspectedWindow
http://developer.chrome.com/extensions/devtools_network
http://developer.chrome.com/extensions/downloads
http://developer.chrome.com/extensions/extension
http://developer.chrome.com/extensions/tabs
http://developer.chrome.com/extensions/windows

################################### databases ##################################
google_youtube ← npm`googleapis@18.0.0`.youtube('v3')
google_depaginate ← (f,opt)=> Π(yes=>{ r ← [] ;q ← ι=>{ r.push(…ι.items) ;if (r.‖ < ι.pageInfo.totalResults) (=> f({ pageToken:ι.nextPageToken } …← (opt)).then(q) ).in(0.1) ;else yes(r) } ;f(opt).then(q) })
yt_auth ← φ`~/.auth/_`.json['google.youtube']
youtube ← {
	video:{ from:({id,part='contentDetails,id,liveStreamingDetails,localizations,recordingDetails,snippet,statistics,status,topicDetails'})=>
		?Π?(google_youtube.videos.list)({ ,auth:yt_auth ,part ,id }).then(.items[0] )
		},
	playlist:{ from:({id,part='contentDetails,id,snippet,status'})=>
		google_depaginate( ?Π?(google_youtube.playlistItems.list),{ auth:yt_auth, part, playlistId:id, } )
		},
	}

# rwby_dl(){ /usr/local/bin/youtube-dl -o ~/file/consume/video/RWBY/"$2.%(ext)s" "$1" ;}
# rwby_dl W9wyWgvyp0s 's3e01 Round One'

rwby_episodes ← youtube.playlist.from({ id:'PLUBVPK8x-XMhCW2fW7ZYlD9MHjvmT8IGK' }).then( .map(ι=> youtube.video.from({ id:ι.snippet.resourceId.videoId }).then(ι=>{ if (!ι) ↩ ∅ ;t ← ι.snippet.title.match(/^RWBY (?:Volume (\d+), )?Chapter (\d+): (.+)$/) ;↩ { id:ι.id, name: !t? ι.snippet.title : 's'+(t[1]||'1')+'e'+('00'+t[2]).slice(-2)+' '+t[3] } }) ) |>(Promise.all) )

rHjUHnG7WOQ should be obviously type(youtube url)
youtube.video.from({ id:'rHjUHnG7WOQ' })

################################################################################
global key command: chrome bookmarks?
really why dont you have sublime's command autocomplete yet
[ …fi`/Applications/Sublime Text.app/Contents/MacOS/Packages/Default.sublime-package/Default.sublime-commands`.ι, …φ`~/Library/Application Support/Sublime Text 3/Packages/User/Default.sublime-commands`.json ]

def(E,'fi',=>{
	# do the right thing by hardcoding it for each input you want to give it :/ hm
	λ fi(ss,…ιs){
		is_template([ss,…ιs]) || ‽
		ι ← '/Applications/Sublime Text.app/Contents/MacOS/Packages/Default.sublime-package/Default.sublime-commands'
		≈( ss.raw, [ι] ) || ‽
		zip ← '/Applications/Sublime Text.app/Contents/MacOS/Packages/Default.sublime-package'
		sub ← 'Default.sublime-commands'
		get ← =>{
			shᵥ`rm -rf /tmp/mbq3p ;mkdir /tmp/mbq3p ;unzip ${zip} -d /tmp/mbq3p/Default`
			t ← φ`/tmp/mbq3p/Default/${sub}`.text
			# this json needs lenient parsing (sigh)
			t = t.replace(/,(?=\s*\])/g,'')
			↩ JSON.parse(t) }
		↩ [#Q {}.ι #Q].def({ get /*,set(ι){ ‽ }*/ }).o
		}
	↩ fi })

################################################################################
# duti -s com.google.Chrome chrome-extension

##################################### tests ####################################
/ 'charCodeAt|fromCharCode|codePointAt|fromCodePoint' # should be ord,chr

#################### IccXML install instructions : osx 10.12 ###################
brew install libtiff
brew install pkg-config
brew install libxml2
‡ delete most of extract_probe_data.cpp
./configure --with-tifflib=/usr/local/Cellar/libtiff/4.0.7_3
make
make install
cd IccXML-0.9.8
PKG_CONFIG_PATH=/usr/local/opt/libxml2/lib/pkgconfig
./configure
make
make install
# multiply vcgt by x^(γ/1.6) , use iccFromXml iccToXml

########################## i dont know what this does ##########################
;[process.stdout, process.stderr].forEach(s=> s && s.isTTY && s._handle && s._handle.setBlocking && s._handle.setBlocking(✓) ) # sad fix

######################## global-invariant type detection #######################
E.__global = (=>{
	anon_e4jlu ← ι=> catch_ι(=> ι.toString.constructor('return this')() )
	id ← Symbol.for`⣱⣛⠃⣘⣾⣸⢎⠪⡩⠙`
	↩ ι=>{t←;G← ;if( Tprim(ι) ) ↩ ;if(t= ι[id] ) ↩ t ;if(!(G= anon_e4jlu(ι) )) ↩ ;G.Object.prototype‘[id] .host= { ,value:G ,configurable:✗ } ;↩ ι[id] } })()
Tarr_1 ← ι=>{ t ← __global(ι) ;↩ t && ι instanceof t.Array }
ι=> __global(ι) && ι instanceof __global(ι)[T]     super mega slow
ι=> ι instanceof Array                             faster or on par with builtin
ι=> ι instanceof global.Array                      very slow??

##################################### cruft ####################################
'Function.prototype.at':lazy('at',=>{priorityqueuejs ← require('priorityqueuejs')
	# https://github.com/Automattic/kue
	# https://github.com/rschmukler/agenda
	# robust to setTimeout taking extra time
	# ! not robust to the process failing ! should use redis or something instead !
	# ! wth is up with the { hrtime() …←> time } comparison
	qu ← new priorityqueuejs((a,b)=> b.time-a.time)
	P← ;ensure ← =>{if (P) ↩ ;P = ✓ ;(λ Λ(){t←;
		qu.size() === 0? (P = ✗) : qu.peek().time < hrtime()? (t=qu.deq(), t.ι&&t.ι.in(), Λ()/*nxt*/) : Λ.in(0.1)/*poll*/
		})() }
	↩ λ(time){ t ← {time, ι:@} ;↩ time < hrtime()? (t.ι.in(), =>{}) : (qu.enq(t), ensure(), =>{t.ι = ∅}) } }),
E._imgur = ι=> shᵥ`curl -sH 'Authorization: Client-ID 3e7a4deb7ac67da' -F image=@${ι} 'https://api.imgur.com/3/upload' | jq -r .data.link`+''
E._sc_imgur = (…a)=>{ t ← φ`/tmp/sc_${random_id(9)}.png` ;_sc(…a,t) ;_alert('uploading to imgur','...',1.5) ;ι ← _imgur(t) ;go_to(ι) ;p(googl(ι)+'#imgur') ;shᵥ`rm ${t}` }
del(){ for v in "$@" ;do v="$(realpath "$v")" ;ζ 'osaᵥ`finder: delete POSIX file ${ι}`;' "$v" ;rm -f "$(dirname "$v")/.DS_STORE" ;done ;}
im_pdf_to_png__bad() { for v in "$@" ;do convert -verbose -density 150 -trim "$v" -quality 100 -sharpen 0x1.0 png:"${v%.*}.png" ;done ;}
convert -verbose -density 150 -trim 'from.pdf' -quality 100 -flatten -sharpen 0x1.0 x.jpg
ff_crop(){ ffmpeg -i file:"$1" -ss "$2" -t "$3" -async 1 file:"${1%.*} cut".mp4 ;}
E.googl = ι=> JSON.parse(shᵥ`curl -s ${'https://www.googleapis.com/urlshortener/v1/url?key='+φ`~/.auth/googl`.text.trim()} -H 'Content-Type: application/json' -d ${JSON.stringify({longUrl:ι})}`+'').id

######### remaining work for φ #########
formats include
	image               
	pixels              
	png                 .png
	jpg                 .jpg
	plist               /^<\?xml / && /<\/plist>\s*$/           read: npm::plist.parse(it)     show: npm::plist.build(it)
	xml                 .xml || /^<\?xml /
	base64              .64
	pixels (grey)       
	stdin               fd:0
	FIFO                fd:0...
	:executable         ,/^#!/ | try{fs.accessSync(ι,fs.X_OK) ;↩ ✓} catch(e){↩ ✗}
	directory relative
	directory absolute
formats are Really stream formats
the formats are complicated to interact with, because
* GET POST PUT have really tangly apis for all sorts of efficiency concerns
* DELETE especially, we want to make some distinctions to make sure we don’t fuck things up accidentally (although trash could help)

# paths can have extensions, which are often meaningful. (basename/filename, ext/suffix. path.basename,dirname,extname)

# we need to be careful with non-atomic transactions
# we need to think about how this interacts with concurrency
# we need to think about how this interacts with distributed machines (e.g. mixing file and http URLs)
# 	“like, it should be caching urls all the time.”

############################ which ports are in use ############################
sudo lsof -PiTCP -sTCP:LISTEN

############################ node:: analog to npm:: ############################
# node::call === Function.prototype.call.un_this
global_net ← memoize_persist(=> JSON.parse(shᵥ`node -e ${`(${(Tprim)=>{
	global.node = {}
	;['assert','async_hooks','buffer','child_process','cluster','console','constants','crypto','dgram','dns','domain','events','fs','http','https','inspector','module','net','os','path','process','punycode','querystring','readline','repl','stream','string_decoder','timers','tls','tty','url','util','v8','vm','zlib'].map(ι=> node[ι] = require(ι))

	deref ← .reduce((o,id)=>o[id],global)
	locs ← (=>{ ιs ← [] ;id ← Set() ;v_to_id ← new WeakMap() ;ENC ← JSON.stringify ;↩ { ,ιs(){↩ ιs} ,check(ι){
		v ← Object.getOwnPropertyDescriptor(deref(ι.slice(0,-1)),ι[ι.length-1]).value
		if(!( id.has(ENC(ι)) || Tprim(v) || v_to_id.has(v) )){ ;ιs.push(ι) ;id.add(ENC(ι)) ;v_to_id.set(v,ENC(ι)) }
		} } })()
	locs.check(['global'])

	search1 ← => locs.ιs().forEach(loc=> Object.getOwnPropertyNames(deref(loc)).forEach(id=> locs.check([…loc,id]) ) )
	do{ t ← locs.ιs().length ;search1() }while( t!==locs.ιs().length )
	console.log(JSON.stringify(locs.ιs()))
	}})(${Tprim})`}`+'') )()

t ← _( global_net._.groupBy(.-1) ).mapObject(.map(.join('.')))
[done,todo] ← _u(t).values().sort()._.partition(.‖===1)
done = done.map(..0)
todo = todo._.sortBy(.‖)
;[code,…done,…todo]

################### this is silly and i shd probably toss it ###################
enc_id ← (=>{
	safe ← memoize_proc(ι=> catch_ι(=> (0,eval)(`'use strict' ;var ${ι} = 0 ;1`)))
	ESC_ ← ι=> […Buffer.from(ι).toString('hex')].map(ι=> […'𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰'][parseInt(ι,16)]).join('')
	ESC ← ι=> (/^[♈-♓🔅🔆🔒‡⧫§]$/u.test(ι)? unicode_names : ESC_)(ι)
	↩ memoize_proc(ι=> […ι].map(ι=> safe(ι)? ι : ESC(ι) ).join('') ) })()

##################################### with #####################################
with_ ← (o,f)=> f.eval_in_lexical_env( `({${_.keys(o).join(',')}})`+(f+'').replace(/^\(\)/,'') )(o)
;(=>{ bar ← 5 ;↩ with_({ baz:3 },‘lexical_env=> baz+bar) })()

with_ ← (o,f)=>{
	𐅋𐅫←'{'+_.keys(o).join(',')+'}'
	𐅪𐅪←_.keys(o).map(i=>`𐅩𐅰.${i} = ${i}`).join(';')
	↩ f.eval_in_lexical_env(`(𐅩𐅰)=>{ var ${𐅋𐅫} = 𐅩𐅰 ;var 𐅦𐅪 = (${f})() ;${𐅪𐅪} ;return 𐅦𐅪 }`)(o) }
;(=>{ bar← 2 ; t← { stone:0 } ;↩ [with_(t,‘lexical_env=>{ stone = 7 ;↩ stone+bar }),t,bar] })()

########################### todo - this is an odd log ##########################
ι ← 'N3wyOHwxOTR8MHwwfDM4fDE5LjkxNjQ2NTgyNjE4OTQ3M3wwfDB8MnwwfDExMDl8MTQwfDB8M3wwfDF8OHwxfDB8MXwxfDF8MjI4fHRydWV8ZmFsc2V8dHJ1ZXwxNTEwOTcyMTc1NDkyfDB8MHx0cnVlfHRydWV8dHJ1ZXwxLDAsMCwwLDAsMCwwLDAsNSwxMCwxMCwyMCwyMCwxMSwxNiwyMCwxLDAsMCwwLDAsMSwwLDMsNiw1LDUsNSw1LDUsNSwxMHwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMQ==|YzI4NzJmYTg4MTZlY2IzNzhhNDU0MzI1ZmJjMjExMzc='
ι.split('|')[0] |>(ι=> Buffer.from(ι,'base64')+'')
r ← '7|28|10000|0|0|38|19.916465826189473|0|0|2|0|1109|140|0|3|0|1|8|1|0|1|1|1|228|true|false|true|1510972175492|0|0|true|true|true|1,0,0,0,0,0,0,0,5,10,10,20,20,11,16,20,1,0,0,0,0,1,0,3,6,5,5,5,5,5,5,10|-1,-1,-1,-1,-1,-1,-1,-1'
require('crypto').createHash('md5').update(r).digest().toString('hex')
b ← '4866525ce4fc2a3331806600943bb995'
;[r,b].map(ι=> Buffer.from(ι).toString('base64')).join('|')
