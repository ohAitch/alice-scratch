------------------------------------ git ops -----------------------------------
------------ merge -----------
to_path=~/github/scratch
from='lang-alpha'
from_url='git@github.com:alice0meta/lang-alpha.git'

cd "$to_path"
git remote add "$from" "$from_url"
git fetch "$from"
git merge "$from/master"
git remote remove "$from"

----- split out subfolder ----
:( this ... breaks on unicode :(

D() { [ -d "$1" ] || mkdir -p "$1"; echo "$1"; }

big_repo=~/github/scratch
subfolder=ζ₀
new_repo=~/github/lang-zeta-zero

cd "$big_repo"
git subtree split -P "$subfolder" -b "$subfolder-only"

cd $(D "$new_repo")
git init
git pull "$big_repo" "$subfolder-only"

cd "$big_repo"
# git rm -rf "$subfolder-only"
git filter-branch --index-filter "git rm -q -r -f --cached --ignore-unmatch ABC" --prune-empty HEAD

rm -rf .git/refs/original/ &&
git reflog expire --all &&
git gc --aggressive --prune=now
git reflog expire --all --expire-unreachable=0
git repack -A -d
git prune

------------------------------ this is pretty cute -----------------------------
//! color names randomly in ansi 12359abc
gen2fn ← f=>{ t ← f(); ↩ ()=> t.next().value }
namegen ← gen2fn(λ*(){
	long ← 'bekas cahlo caris cekla dedna dekik emiak eseik gazok gihza girim gumlu halbo hanka henuh kadut kagzi kakki kamor kehul kisar kizak kofur kohig lopra mesat mesip mezid motka nahso nalic nirsu omiac radil ratis repgi resra rukan siral sorzo tarak tilke zalsi zehaz zekhu zeluz zephu zifin zirez zohip zokmi zonri zusci'.split(' ')
	short ← 'ake bek cah cek dek din emi esi faz gaz gih gir gum hal han kad kag kam keh ket kis kiz kob koh kot lop mez mot nal nir oki omi rad rar sar tar tus zal zar zeh zek zel zep zif zok zon zus'.split(' ')
	short = short.mapcat(ι=> 10..map(i=> ι+' '+i))._.shuffle()
	to ← round(long.length/2); yield* _.shuffle([…long, …short.slice(0,to)]); yield* short.slice(to)
	c ← {}; for(;;){t ← '#'+4..map(ι=> rand(/[0-9a-z]/.genex_0())).join(''); if (c[t]) continue; yield (c[t]=1, t)} })

-------------------------------------- ocr -------------------------------------
# # used up: alice0meta@gmail.com
# # 46 requests remaining on sparkleshy@gmail.com @ KqsDmZ77kW
# # 100 requests remaining on comely.naiad@gmail.com @ rtjM58zxK2
# ocr() { curl -X POST http://api.ocrapiservice.com/1.0/rest/ocr -F 'apikey=rtjM58zxK2' -F 'language=en' -F "image=@$1" > "${1%.*}.txt"; }
tesseract ← npm('node-tesseract@0.2.7')
φ`../ep/*`.map(λ(f){tesseract.process(sh`${f}`,λ(e,ι){fs(f+'.txt').$ = e? 'ERROR\n'+e : ι})})

-------------------------------- jquery ish misc -------------------------------
$.on_view = function(f){document.addEventListener('visibilitychange',function(){if (!document.hidden) f()})}
E.poll = λ(f,cb,time){ r←{}; (λ Λ(){ nxt ← ()=> nxt=0; t ← f(nxt); r.done = !!t; t? cb.P(null,t).defer() : nxt? Λ.in(time) : Λ.defer() })(); ↩ r }

keyinfo ← λ(key){
	t ← {'⇥':[9,'↓'],'↩':[13],'⎋':[27,'↑'],'←':[37,'↓'],'↑':[38,'↓'],'→':[39,'↓'],'↓':[40,'↓']}[key]||[]
	↩ {code: t[0] || Tnum(key)? key : key.charCodeAt(), $onfn: t[1]? {'↑':'keyup','↓':'keydown'}[t[1]] : 'keypress'} }
$.prototype.on_key = λ(key,sel,cb0){ if( arguments.length===2 ){ [key,cb0,sel] = arguments }
	// var [key,…ns] = key.split(/(?=\.\w)/); ns = ns.join('')
	t ← keyinfo(key); @.on(t.$onfn/*+ns*/,sel,λ(e){if (e.which===t.code) ↩ cb0(e)}) }
$.prototype.find_self = λ(sel){↩ @.find(sel).add(@.filter(sel))}

-------------------------------- de-duplication --------------------------------
φ`**`.φs.map(ι=> [ι+'',ι.get()])._.groupBy(1)._.values().map(ι=> ι._.map(0)).filter(ι=> ι.length > 1)

------------------------------ python data science -----------------------------
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

q = mpimg.imread('/Users/home/Downloads/a.png')
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
x = q[:,:,0].ravel()
y = q[:,:,1].ravel()
z = q[:,:,2].ravel()
ax.scatter(x, y, z)
ax.set_xlabel('R Label')
ax.set_ylabel('G Label')
ax.set_zlabel('B Label')
plt.show()

------------------------------ sublime api things ------------------------------
sublᵥ`window.focus_view(window.views()[-1])`
T ← 10; i←0; (λ(){sublᵥ`view.insert(edit,view.sel()[0].begin(),"\n")`}).every(T)

------------------------------------- life -------------------------------------
sublime_set_buffer ← ι=> sublᵥ`view.replace(edit,Region(0,view.size()),${ι})`
braille_table ← 0x100.map(ι=> String.fromCharCode('⠀'.charCodeAt()+ι))
braille_2d ← λ(ι){↩ (Buffer.isBuffer(ι.ι)? ι.ι.chunk(ι.X) : ι).chunk(4).map(λ(ι){t ← []; for(i←0;i<ι[0].length;i+=2) t.push(braille_table[(ι[0][i]<<0)|(ι[1][i]<<1)|(ι[2][i]<<2)|(ι[0][i+1]<<3)|(ι[1][i+1]<<4)|(ι[2][i+1]<<5)|(ι[3][i]<<6)|(ι[3][i+1]<<7)]); ↩ t.join('')}).join('\n')}
life ← λ(ι){
	if (!ι) {ι ← {X:115*2,Y:46*4}; ι.ι = Buffer((ι.X*ι.Y).map(λ(){↩ rand()<0.5 ?1:0})); ↩ ι} // 115,46
	else {X ← +ι.X; Y ← +ι.Y; ι = ι.ι
		r ← Buffer(ι)
		get ← λ(x,y){↩ 0<=x&&x<X && 0<=y&&y<Y? ι[y*X+x] : 0}
		for(y←1;y<Y-1;y++) for(x←1;x<X-1;x++) {
			n ← ι[(y-1)*X+x-1] + ι[(y-1)*X+x] + ι[(y-1)*X+x+1] + ι[y*X+x-1] + ι[y*X+x+1] + ι[(y+1)*X+x-1] + ι[(y+1)*X+x] + ι[(y+1)*X+x+1]
			r[y*X+x] = (n===2? ι[y*X+x] : n===3? 1 : 0) }
		for(y←0;y<Y;y+=Y-1) for(x←0;x<X;x++) {
			n ← 0; for(xₒ←-1;xₒ<=1;xₒ++) for(yₒ←-1;yₒ<=1;yₒ++) n += get(x+xₒ,y+yₒ)
			r[y*X+x] = (n===2? get(x,y) : n===3? 1 : 0) }
		for(x←0;x<X;x+=X-1) for(y←1;y<Y-1;y++) {
			n ← 0; for(xₒ←-1;xₒ<=1;xₒ++) for(yₒ←-1;yₒ<=1;yₒ++) n += get(x+xₒ,y+yₒ)
			r[y*X+x] = (n===2? get(x,y) : n===3? 1 : 0) }
		// for(y←0;y<Y;y++) for(x←0;x<X;x++) {
		// 	n ← 0; for(yₒ←-1;yₒ<=1;yₒ++) for(xₒ←-1;xₒ<=1;xₒ++) n += get(x+xₒ,y+yₒ)
		// 	r[y*X+x] = (n===3? 1 : n===4 && get(x,y)===1? 1 : 0) }
		↩ {X,Y,ι:r} } }
ι←; for(;;) sublime_set_buffer(braille_2d(ι = life(ι)))

--------------------------------------------------------------------------------
bit_reverse = λ(length,ι){r ← 0; for (i←0;i<length;i++){r = (r << 1) | (ι & 1); ι = ι >> 1}; ↩ r}
to_binary_LE ← ι=> […ι].map(ι=> ('00000000'+ι.toString(2)).slice(-8).split('').reverse().join('')).join('')

----------------------------------- entities -----------------------------------
entities_encode ← ι=> ι.replace(/[&"'<>]/g,λ(ι){↩ {'&':'&amp;', '"':'&quot;', '\'':'&apos;', '<':'&lt;', '>':'&gt;'}[ι]})
entities_decode ← typeof(window)==='undefined'? npm('html-entities@1.2.0').AllHtmlEntities.decode : λ(ι){t ← document.createElement('textarea'); t.innerHTML = ι; ↩ t.value}

-------------------- only for if you want to know how to use -------------------
(new Proxy({}, {get:λ(ˣ,ι){↩ ι}})).foo === 'foo'

------------------------------------ stats? ------------------------------------
erf ← npm('math-erf@1.0.0')
normal_PDF ← λ(x){ μ ← 0; σ ← 1; v ← pow(σ,2); ↩ 1/sqrt(v*τ)*exp(-pow(x-μ,2)/(2*v)) }
normal_CDF ← λ(x){ μ ← 0; σ ← 1; ↩ (1 + erf( (x-μ) / (σ*sqrt(2)) ))/2 }
invert_specific ← f=> fx=>{ t ← 0; while (f(t) > fx) t+=0.01; ↩ t }

------------------------ fun with fraction approximation -----------------------
wu ← npm('wu@2.1.0')
Array.prototype.maplog = λ(f){↩ @.map((ι,i,l)=>( i%(l. length / 100 |0)===0 && cn.log(Time(),'mapping @',i,'/',l.length), f(ι,i,l) )) }
gcd ← (a,b)=> b>0? gcd(b, a%b) : a
reduced ← (a,b)=>{ t ← gcd(a,b); ↩ [a/t,b/t] }
bits ← ι=> log2(ι[0]*ι[1])
list_approx ← λ*(ι){ Rp ← (a,b)=> gcd(a,b)===1; a←1; b←1; for(;;){
	while (a/b > ι) b++; if (Rp(a,b-1)) yield [a,b-1]; if (Rp(a,b)) yield [a,b]
	while (a/b < ι) a++; if (Rp(a-1,b)) yield [a-1,b]; if (Rp(a,b)) yield [a,b]
	} }
error ← (ι,approx)=>{ t ← (approx[0]/approx[1]) / (ι[0]/ι[1]); ↩ 1 - (t<1? t : 1/t) }
score ← (ι,approx)=> ((ι[0]*ι[1]) / (approx[0]*approx[1])) * (1/error(ι,approx))
best_approx ← x=>{ size_x ← x[0]*x[1]; ↩ […wu(list_approx(x[0]/x[1])).takeWhile(ι=> ι[0]*ι[1] < size_x)]._.max(ι=> score(x,ι)) }

to ← 1e5
bench(()=> cn.log(
	(to/2).map(ι=> reduced(ι, to)).filter(ι=> log2(to)*2*0.6 <= bits(ι) && bits(ι) <= log2(to)*2).maplog(ι=> [ι, best_approx(ι)] ).filter(ι=> 1 < ι[1][0] && ι[1][1] > 9)._.sortBy(ι=> score(ι[0],ι[1])).slice(-40).map(ι=> (ι[0][0]/ι[0][1])+' ≈ '+ι[1][0]+'÷'+ι[1][1]).join('\n')
	) )
