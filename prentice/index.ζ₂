#!/usr/bin/env Œ∂‚ÇÇ
util ‚Üê require('util')
child_process ‚Üê require('child_process')

// ---------------------------------- util ---------------------------------- //

argv ‚Üê process.argv.slice(2)
stdout ‚Üê Œª(Œπ){process.stdout.write(Œπ)}
remove_ansi_colors ‚Üê Œª(Œπ){‚Ü© Œπ.replace(/\[.+?m/g,'')}
diy_stdin ‚Üê Œª(f){process.stdin.setRawMode(true); process.stdin.resume().setEncoding('utf8').on('data',f)}
IS_URL ‚Üê /^((https?|file):\/\/|mailto:)/.Œª
FIND_URL ‚Üê /\b((https?|file):[‚ü©\/][‚ü©\/](?:\\ |\S)+|mailto:[^\s\\@]+@[^\s\\@]+)/.Œª
postredirect_url ‚Üê Œª(Œπ){‚Ü© Œπ
	.replace(/^http:\/\/google.com\//,'http://www.google.com/')
	.replace(/^http:/,'https:') }
as_url ‚Üê Œª(Œπ){t‚Üê;
	‚Ü© IS_URL(Œπ)? encodeURI(Œπ) :
	(t=FIND_URL(Œπ))? encodeURI(t[1].replace(/‚ü©/g,'/').replace(/\\ /g,' ')) :
		"http://google.com/search?q="+encodeURIComponent(Œπ) }
height ‚Üê Œª(Œπ){‚Ü© remove_ansi_colors(Œπ).split('\n').map(Œª(Œπ){‚Ü© 1+floor(Œπ.length/80)}).reduce(Œª(a,b){‚Ü©a+b},0)}

osa‚Üê; osa_v‚Üê; (Œª(){
	osa_gen ‚Üê Œª(Œπ){‚Ü© "osascript -ss "+Œπ.split(/; */).map(Œª(Œπ){‚Ü© "-e "+bash_encode(Œπ)}).join(" ")}
	osa_parse_array ‚Üê Œª(Œπ){‚Ü© JSON.parse(Œπ.split(/("(?:\\.|.)*?")/g).map(Œª(Œπ){‚Ü© /^"/.Œª(Œπ)? Œπ : Œπ.replace(/\{/g,'[').replace(/\}/g,']')}).join(''))} // based on https://github.com/FWeinb/node-osascript/blob/master/lib/osa-parser.peg
	osa = Œª(Œπ){child_process.exec(osa_gen(Œπ))}
	osa_v = Œª(Œπ){‚Ü© osa_parse_array(child_process.execSync(osa_gen(Œπ))+'')}
	})()
bash ‚Üê   Œª(flag,Œπ){!Œπ && (Œπ = flag, flag = ''); child_process.exec("bash -c "+flag+" "+bash_encode(Œπ))}
bash_v ‚Üê Œª(flag,Œπ){!Œπ && (Œπ = flag, flag = ''); ‚Ü© (child_process.execSync("bash -c "+flag+" "+bash_encode(Œπ))+'').replace(/\n$/,'')}

bash_encode ‚Üê Œª(){‚Ü© Œ∂2_A(arguments).map(Œª(Œπ){‚Ü© Œπ.replace(/\W/g,"\\$&")}).join(" ")}
basename_encode ‚Üê Œª(Œπ){‚Ü© Œπ.replace(/\//g,'‚ü©')}
osa_encode ‚Üê Œª(Œπ){‚Ü© '"'+Œπ.replace(/["\\]/g,'\\$&')+'"'}

line ‚Üê ''; pos ‚Üê 0
preview_v ‚Üê null
print ‚Üê Œª(){a ‚Üê Œ∂2_A(arguments); stdout('[2K[0G'+sprint(a)+'\n'+PROMPT+line)}
preview ‚Üê Œª(v){
	height ‚Üê Œª(v){‚Ü© remove_ansi_colors(v).split('\n').map(Œª(v){‚Ü© 1+floor(v.length/80)}).reduce(Œª(a,b){‚Ü©a+b},0)}
	if (v === null);
	else if (height(v) > 20) {t ‚Üê v.split('\n'); r ‚Üê []; while (height(r.join('\n')) <= 20) r.push(t.pop()); r.pop(); v = PREVIEW_MORE_PROMPT+'\n'+r.reverse().join('\n')}
	else v = PREVIEW_PROMPT+'\n'+v
	if (preview_v === v) ‚Ü©;
	preview_v !== null && stdout('['+(height(preview_v)+height(PROMPT+line)-1)+'A[0G[J')
	v === null? stdout(PROMPT+line) : print(v)
	preview_v = v }

stdout('[0G'+PROMPT)
diy_stdin(Œª(key){
	switch (key) {default:
		if (key[0] === '') {print('got code \\x1b'+key.slice(1)); ‚Ü©}
		else {stdout(key); line = line.slice(0,pos)+key+line.slice(pos+1); pos++}
		break; case '\x03': stdout('[2K[0G'); preview(null); process.stdin.pause(); ‚Ü©;
		break; case '\r': {preview(null); t ‚Üê line; line = ''; pos = 0; stdout('\n'+PROMPT+line); on_line_change(t,true); ‚Ü©}
		break; case '\x7f': if (line !== '') {stdout('\x08 \x08'); line = line.slice(0,pos-1)+line.slice(pos); pos--} else ‚Ü©;
		break; case '[D': if (pos > 0) {pos--; stdout(key)}
		break; case '[C': if (pos < line.length) {pos++; stdout(key)}
		break; case '\t':
			//! potentially should preview
			// line.slice(0,pos).match(/\S*$/)[0] + line.slice(pos).match(/^\S*/)[0]
			v ‚Üê line.match(/\S*$/)[0]
			if (pos !== line.length || v === '') {print('got code \\t'); ‚Ü©}
			completions ‚Üê /* if is filename context */ fs('.').find('>').map(Œª(v){‚Ü© v.slice(2)})
			if (line === v) completions.push('ls','chrome','echo','dl')
			completions = completions.filter(Œª(t){‚Ü© t.slice(0,v.length) === v})
			if (completions.length > 1) {print('found',completions.length,'completions'); ‚Ü©}
			add ‚Üê completions[0].slice(v.length)
			line += add; pos += add.length; stdout(add)
PROMPT ‚Üê '[30;47m>[0m '
PREVIEW_PROMPT ‚Üê '[30;47m:[0m'
PREVIEW_MORE_PROMPT ‚Üê '[30;47m.[0m [30;47m.[0m [30;47m.[0m'
DATA_FILE ‚Üê '~/ali/github/scratch/prentice/~:.prentice'

	}
	on_line_change(line)
	})

on_line_change ‚Üê Œª(v,act){vs ‚Üê v.trim().split(' ')
	P ‚Üê Œª(v){P = null; preview(v)}
	if (v === '') {
		if (act) {stdout('[1A[2K[0G<reboot>\n\n'); process.exit(44)}
	} else if (vs[0] === 'dl') {
		t ‚Üê vs.slice(1).join(' ')
		if (t.match(/^http:\/\/youtu\.be\/[^?#]+$/)) {
			if (!act) {
				P('would download 1 mp3 from youtube')
			} else {
				t = 'cd ~/Downloads; youtube-dl --extract-audio --audio-format mp3 -o '+bash_encode(basename_encode('%(title)s '+t+' .%(ext)s'))+' '+bash_encode(t)
				osa('tell application "terminal"; do script '+osa_encode(t)+'; end tell'); osa('tell application "terminal" to activate')
			}
		}
	} else if (Œπs.length === 1 && (Œπs[0] === 'l' || Œπs[0] === 'ls')) {
		;(act? print : P)(bash_v("-i",'cd '+bash_encode(process.cwd())+'; echo "$green$(this)$reset"; CLICOLOR_FORCE=t l'))
	} else if (Œπs[0] === 'chrome') {
		t ‚Üê Œπs.length === 1? 'chrome:newtab' : as_url(Œπs.slice(1).join(' '))
		!act?
			P(t) :
			osa('tell application "chrome" to open location '+osa_encode(postredirect_url(t)))
	} else if (Œπs[0] === 'echo') {
		t ‚Üê Œπs.slice(1).join(' ')
		;(act? print : P)(t)
	}
	P&&P(null)
	}


// mv E\t Fate Stay:Night - Emiya#0.mp3
// crop F\t

// http://tampermonkey.net/faq.php
// chrome-extension://dhdgffkkebhmkfjojejmpbldmpobfkfo/options.html#open=1bbe177e-96ec-49c8-8086-f3bf7a2a9e58
// osa_v('tell application "chrome"; get {URL,title} of tabs of windows; end tell')

//! line wrapping doesn't work
// multiline input (literal \n if the last line seemed incomplete)
