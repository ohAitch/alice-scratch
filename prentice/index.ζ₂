#!/usr/bin/env Œ∂‚ÇÇ
util ‚Üê require('util')
child_process ‚Üê require('child_process')

// ---------------------------------- util ---------------------------------- //

argv ‚Üê process.argv.slice(2)
stdout ‚Üê Œª(Œπ){process.stdout.write(Œπ)}
remove_ansi_colors ‚Üê Œª(Œπ){‚Ü© Œπ.replace(/\[.+?m/g,'')}
diy_stdin ‚Üê Œª(f){process.stdin.setRawMode(true); process.stdin.resume().setEncoding('utf8').on('data',f)}
IS_URL ‚Üê /^((https?|file):\/\/|mailto:)/.Œª
FIND_URL ‚Üê /\b((https?|file):[‚ü©\/][‚ü©\/](?:\\ |\S)+|mailto:[^\s\\@]+@[^\s\\@]+)/.Œª
postredirect_url ‚Üê Œª(Œπ){‚Ü© Œπ
	.replace(/^http:\/\/google.com\//,'http://www.google.com/')
	.replace(/^http:/,'https:') }
as_url ‚Üê Œª(Œπ){t‚Üê;
	‚Ü© IS_URL(Œπ)? encodeURI(Œπ) :
	(t=FIND_URL(Œπ))? encodeURI(t[1].replace(/‚ü©/g,'/').replace(/\\ /g,' ')) :
		"http://google.com/search?q="+encodeURIComponent(Œπ) }
height ‚Üê Œª(Œπ){‚Ü© remove_ansi_colors(Œπ).split('\n').map(Œª(Œπ){‚Ü© 1+floor(Œπ.length/80)}).reduce(Œª(a,b){‚Ü©a+b},0)}

osa‚Üê; osa_v‚Üê; (Œª(){
	osa_gen ‚Üê Œª(Œπ){‚Ü© "osascript -ss "+Œπ.split(/; */).map(Œª(Œπ){‚Ü© "-e "+bash_encode(Œπ)}).join(" ")}
	osa_parse_array ‚Üê Œª(Œπ){‚Ü© JSON.parse(Œπ.split(/("(?:\\.|.)*?")/g).map(Œª(Œπ){‚Ü© /^"/.Œª(Œπ)? Œπ : Œπ.replace(/\{/g,'[').replace(/\}/g,']')}).join(''))} // based on https://github.com/FWeinb/node-osascript/blob/master/lib/osa-parser.peg
	osa = Œª(Œπ){child_process.exec(osa_gen(Œπ))}
	osa_v = Œª(Œπ){‚Ü© osa_parse_array(child_process.execSync(osa_gen(Œπ))+'')}
	})()
bash ‚Üê   Œª(flag,Œπ){!Œπ && (Œπ = flag, flag = ''); child_process.exec("bash -c "+flag+" "+bash_encode(Œπ))}
bash_v ‚Üê Œª(flag,Œπ){!Œπ && (Œπ = flag, flag = ''); ‚Ü© (child_process.execSync("bash -c "+flag+" "+bash_encode(Œπ))+'').replace(/\n$/,'')}

bash_encode ‚Üê Œª(){‚Ü© Œ∂2_A(arguments).map(Œª(Œπ){‚Ü© Œπ.replace(/\W/g,"\\$&")}).join(" ")}
basename_encode ‚Üê Œª(Œπ){‚Ü© Œπ.replace(/\//g,'‚ü©')}
osa_encode ‚Üê Œª(Œπ){‚Ü© '"'+Œπ.replace(/["\\]/g,'\\$&')+'"'}

// ----------------------------- rigid_interface ---------------------------- //

rigid_interface ‚Üê (Œª(){
	PROMPT ‚Üê '[30;47m>[0m '
	PREVIEW_PROMPT ‚Üê '[30;47m:[0m'
	PREVIEW_MORE_PROMPT ‚Üê '[30;47m.[0m [30;47m.[0m [30;47m.[0m'
	DATA_FILE ‚Üê '~/ali/github/scratch/prentice/~:.prentice'

	var Œî = { // data
		line:'', pos:0,
		preview:null,
		}

	print ‚Üê Œª(){a ‚Üê Œ∂2_A(arguments); stdout('[0G[2K'+(a.length <= 1 && a[0] == null? '' : sprint(a)+'\n')+PROMPT+Œî.line); pos_set()}
	preview ‚Üê Œª(Œπ){
		if (Œπ === null) t ‚Üê null
		else if (height(Œπ) > 20) {t ‚Üê Œπ.split('\n'); r ‚Üê []; while (height(r.join('\n')) <= 20) r.push(t.pop()); r.pop(); t ‚Üê PREVIEW_MORE_PROMPT+'\n'+r.reverse().join('\n')}
		else t ‚Üê PREVIEW_PROMPT+'\n'+Œπ
		Œî.preview === t || (hide(), Œî.preview = t, show())
		}
	pos_set ‚Üê Œª(Œπ){arguments.length === 1 && (Œî.pos = Œπ); stdout('['+(1+Œî.pos+remove_ansi_colors(PROMPT).length)+'G')}
	line_splice ‚Üê Œª(i,del,Œπ){Œî.pos === i || pos_set(i); no_set ‚Üê Œî.pos === Œî.line.length; Œî.line = Œî.line.slice(0,Œî.pos)+Œπ+Œî.line.slice(Œî.pos+del); stdout((del-Œπ.length>0?'[K':'')+Œî.line.slice(Œî.pos)); Œî.pos += Œπ.length; no_set || pos_set()}
	on_key ‚Üê Œª(key){line_a ‚Üê Œî.line; switch (key) {default:
		/^[ -~¬±-¬≥¬π ∞- ∏À°-À£Œë-Œ°Œ£-œâ·¥¨-·µõ·µ¢-·µ•·∂ú·∂†·∂ª‚Å∞‚Å±‚Å¥-‚Çé‚Çê-‚Çì‚Çï-‚Çú‚Ü©]+$/.Œª(key)? line_splice(Œî.pos,0,key) :
			on_unknown_key(key)
		break; case /* ^c */ '\x03': hide(); process.stdin.pause()
		break; case /* ‚å´  */ '\x7f': Œî.pos > 0 && line_splice(Œî.pos-1,1,'')
		break; case /* ‚åò‚å´ */ '\x15': line_splice(0,Œî.pos,'')
		break; case /* ‚Üê  */ '[D': Œî.pos > 0 && pos_set(Œî.pos-1)
		break; case /* ‚Üí  */ '[C': Œî.pos < Œî.line.length && pos_set(Œî.pos+1)
		break; case /* ‚åò‚Üê */ '\x01': pos_set(0)
		break; case /* ‚åò‚Üí */ '\x05': pos_set(Œî.line.length)
		break; case /* ‚á•  */ '\t': on_tab(Œî.line,Œî.pos,line_splice)
		break; case /* ‚Ü©  */ '\r':
			Œî.line === '' && (stdout('<reboot>\n\n'), process.exit(44)) // hack
			preview(null); Œî.line = ''; Œî.pos = 0; stdout('\n'+PROMPT); on_line_change(line_a,true); ‚Ü©
		}; line_a === Œî.line || on_line_change(Œî.line) }

	show ‚Üê Œª(){print(Œî.preview)}
	hide ‚Üê Œª(){stdout(Œî.preview === null? '[0G[2K' : '['+(height(Œî.preview)+height(PROMPT+Œî.line)-1)+'A[0G[J')}
	start: Œª(){
		t ‚Üê fs(DATA_FILE).$; t && _.extend(Œî, _(JSON.parse(t)).pick(_.keys(Œî)))
		process.on('exit',Œª(){fs(DATA_FILE).$ = JSON.stringify(Œî,null,'  ')})
		show()
		diy_stdin(on_key)
		}
	‚Ü© {start:start, print:print, preview:preview} })()

// -------------------------------------------------------------------------- //

on_unknown_key ‚Üê Œª(key){print('got '+util.inspect(key).replace(/\\u00/g,'\\x'))}

on_tab ‚Üê Œª(line,pos,line_splice){
	if (pos !== line.length) {print('tab completion is scary if not at the end of a line'); ‚Ü©}
	Œπ ‚Üê line.slice(0,pos).match(/\S*$/)[0]
	//! potentially should preview
	completions ‚Üê /* if is filename context */ fs('.').find('>').map(Œª(Œπ){‚Ü© Œπ.slice(2)})
	if (line === Œπ) completions.push('ls','chrome','echo','dl')
	completions = completions.filter(Œª(t){‚Ü© t.slice(0,Œπ.length) === Œπ})
	if (completions.length > 1) {print('found',completions.length,'completions'); ‚Ü©}
	if (completions.length === 0) {print('no completions found'); ‚Ü©}
	line_splice(pos - Œπ.length, Œπ.length, completions[0])
	}

on_line_change ‚Üê Œª(Œπ,act){Œπs ‚Üê Œπ.trim().split(' ')
	P ‚Üê Œª(Œπ){P = null; rigid_interface.preview(Œπ)}
	if (Œπs[0] === 'dl') {
		t ‚Üê Œπs.slice(1).join(' ')
		if (/^http:\/\/youtu\.be\/[^?#]+$/.Œª(t)) {
			if (!act) {
				P('would download 1 mp3 from youtube')
			} else {
				t = 'youtube-dl --extract-audio --audio-format mp3 -o ~/Downloads/'+bash_encode(basename_encode('%(title)s '+t+' .%(ext)s'))+' '+bash_encode(t)
				osa('tell application "terminal"; do script '+osa_encode(t)+'; activate; end tell')
			}
		}
	} else if (Œπs.length === 1 && (Œπs[0] === 'l' || Œπs[0] === 'ls')) {
		;(act? print : P)(bash_v("-i",'cd '+bash_encode(process.cwd())+'; echo "$green$(this)$reset"; CLICOLOR_FORCE=t l'))
	} else if (Œπs[0] === 'chrome') {
		t ‚Üê Œπs.length === 1? 'chrome:newtab' : as_url(Œπs.slice(1).join(' '))
		!act?
			P(t) :
			osa('tell application "chrome" to open location '+osa_encode(postredirect_url(t)))
	} else if (Œπs[0] === 'echo') {
		t ‚Üê Œπs.slice(1).join(' ')
		;(act? print : P)(t)
	}
	P&&P(null)
	}

// if (argv.length) {rigid_interface = null; on_line_change(argv.join(' '),true)}
// else {
	rigid_interface.start(); print ‚Üê rigid_interface.print
// }

// todo: hmmmm
// we could go through the process of fetching bookmarks and the process of fetching spotify tracks, with an eye for paul's model

// mv E\t Fate Stay:Night - Emiya#0.mp3
// crop F\t

// http://tampermonkey.net/faq.php
// chrome-extension://dhdgffkkebhmkfjojejmpbldmpobfkfo/options.html#open=1bbe177e-96ec-49c8-8086-f3bf7a2a9e58
// osa_v('tell application "chrome"; get {URL,title} of tabs of windows; end tell')
// file:///~/ali/github/scratch/#archive/minesweeperonline.com/index.js

//! line wrapping doesn't work
// multiline input (literal \n if the last line seemed incomplete)
