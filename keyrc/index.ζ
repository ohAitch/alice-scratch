#!/usr/bin/env ζ
APP ← '\x1b[34m[keyrc]\x1b[0m'
KB ← '/Applications/Karabiner.app/Contents/Library/bin/karabiner'

// -------------------------------------------------------------------------- //
char16hex ← ι=> ('000'+ord(ι).toString(16)).slice(-4)
take_while ← λ(l,f){ i←0; for(var ι of l) if (f(ι)) i++; else break; ↩ ι.slice(0,i) }
drop_while ← λ(l,f){ i←0; for(var ι of l) if (f(ι)) i++; else break; ↩ ι.slice(i) }
split_with ← λ(l,f){ i←0; for(var ι of l) if (f(ι)) i++; else break; ↩ [l.slice(0,i), l.slice(i)] }

_alert ← (a,b,c)=> osaₐ`system events: display alert ${a} …${b && osa`message ${b}`} …${c && osa`giving up after ${c}`}` //! design better, then rename to alert

// -------------------------------------------------------------------------- //
M ← λ(a,b,c){ r ← {trigger:a, output:b}; c && (r.if = c); ↩ r }
M2 ← λ(a,b,c){ r ← {name:a, identifier:a, autogen:b}; c && (r.only = c); ↩ r }
transpose_str ← ι=> _.zip(…ι.split('\n').map(ι=>[…ι])).map(ι=> ι.join('')).join('\n')

macros ← {}
parse_boards0 ← ι=>
	transpose_str(ι).split(/\n(?: +\n)+/u).map(transpose_str).map(λ(ι){ι = ι.split('\n'); ↩ {
		root: (ι[0].match(/^┌─+ (\S+) ─+┐$/u)||[∅,''])[1],
		keys: ι.slice(1,-1).map(ι=> /^│(.+)│$/u.λ(ι)[1]).map(ι=> /\S\S?/gu.λ(ι)),
		} })
builtin_keys ← parse_boards0(multiline`
	┌──────── [homoiconic] ────────┐
	│ ⎋ F1F2F3F4F5F6F7F8F9FaFbFc ⏻ │
	│ \` 1 2 3 4 5 6 7 8 9 0 - = ⌫  │
	│  ⇥ q w e r t y u i o p [ ] \\ │
	│  ⇪ a s d f g h j k l ; '  ↩  │
	│  ⇧L z x c v b n m , . /  ⇧R  │
	│ Fn^ ⌥L⌘L    ␣    ⌘R⌥R← ↑ ↓ → │
	└──────────────────────────────┘
	`)[0].keys._.flatten(✓)
parse_boards ← λ(ι){
	ι ← ι.map…(parse_boards0)
	ι.filter(ι=> ι.keys.‖ === 4).forEach(λ(ι){ι.keys = [['_'].repeat(14), …ι.keys, ['_'].repeat(11)]})
	ι.forEach(λ(ι){ ι.keys = ι.keys._.flatten(✓) })
	ι.forEach(λ(ι){ ι.keys = ι.keys.map(ι=> Object.hasOwnProperty(macros,ι)? macros[ι] : ι) })
	ι.forEach(λ(ι){ ι.keys = _.zip(builtin_keys,ι.keys).filter(ι=> ι[1] !== '_') })
	ι = ι.map…(λ(ι){ ι.keys.forEach(k=> k[0] = ι.root+k[0]); ↩ ι.keys })
	↩ ι.map(ι=> M(…ι)) }
keycodes ← _(parse_boards([multiline`
	┌──────────────────────────────┐
	│ 357A78637660616264656D676F00 │
	│ 321213141517161A1C191D1B1833 │
	│ 300C0D0E0F111020221F23211E2A │
	│  6E000102030504262825292724  │
	│  38 060708090B2D2E2B2F2C 3C  │
	│ 3F3B3A37   31   363D7B7E7D7C │
	└──────────────────────────────┘
	`]).map(ι=> [ι.trigger,ι.output])._.object())
	<- ({FnF1:'03°',FnF2:'02°',FnF3:'a0',FnF4:'83',FnF5:'16°',FnF6:'15°',FnF7:'14°',FnF8:'10°',FnF9:'13°',FnFa:'07°',FnFb:'01°',FnFc:'00°'})
system ← parse_boards([multiline`
	┌──────────────────────────────┐ ┌────────────── ⇧ ─────────────┐
	│ \` 1 2 3 4 5 6 7 8 9 0 - = _  │ │ ~ ! @ # $ % ^ & * ( ) __+ _  │
	│  _ q w e r t y u i o p [ ] \\ │ │  _ Q W E R T Y U I O P { } | │
	│  _ a s d f g h j k l ; '  _  │ │  _ A S D F G H J K L : "  _  │
	│  _  z x c v b n m , . /  _   │ │  _  Z X C V B N M < > ?  _   │
	└──────────────────────────────┘ └──────────────────────────────┘
	`])
text_keys ← […system.map(ι=>ι.trigger).filter(ι=> ι[0]!=='⇧'), ' ']
macros['X'] = '; sfx`nack`'

parse_key_line ← ι=>{ t ← ι.match(/^\s*(@\w+)?\s*(\S+)\s+([^]*\S)/); ↩ M(t[2],t[3],t[1]) }
parse_keyrc ← λ(src){
	tₐ ← []; tₑ ← parse_boards(
		(src+'\n').replace(/\n{2,}/g,'\n')
		.replace(/(?:^|\n)#.*/g,'')
		.replace(/(?:^|\n)(?![│┌└])(.+)/g,(ˣ,ι)=>{ tₐ.push(parse_key_line(ι)); ↩ ''})
		.match(/(┌.+┐)\n((?:│.+│\n)+)(└.+┘)\n/g).map(ι=> ι.replace(/\n$/,'') )
		)
	↩ […tₐ, …tₑ].-eq(system) }
show_private_xml ← λ(mappings){t←;
	Mod ← ι⇒ {'⇧':'VK_SHIFT', '^':'ModifierFlag::CONTROL_L', '⌥':'VK_OPTION', '⌘':'VK_COMMAND', '⇧L':'ModifierFlag::SHIFT_L', '⌥L':'ModifierFlag::OPTION_L', '⌘L':'ModifierFlag::COMMAND_L', '⇧R':'ModifierFlag::SHIFT_R', '⌥R':'ModifierFlag::OPTION_R', '⌘R':'ModifierFlag::COMMAND_R', 'Fn':'ModifierFlag::FN', ' ':'ModifierFlag::NONE'}[ι]
	shells ← {}; shell ← ι=> shells[ι] || (shells[ι] = 'KeyCode::VK_OPEN_URL_'+_(shells).size())
	appdef ← ι=> appdefs[ι] = ι |> (memoize_persist(ι=> catch_ι(=> osaᵥ`id of app ${ι}`) )); appdefs ← {}
	compile_mapping ← λ(ι){
		Key ← ι=> ('KeyCode::'+(/^\d$/.λ(ι)? 'KEY_'+ι : /^[a-z]$/.λ(ι)? ι.toUpperCase() : keycodes[ι]? 'RawValue::0x'+keycodes[ι] : ‽('invalid key: '+ι))).replace(/^(.+)°$/,'Consumer$1')
		compile_keystring ← ι=>{
			[md,ky] ← split_with(/FnF.|F.|.[LR]|./g.λ(ι), Mod)
			if (md.‖ === 1 && ky.‖ === 0){ ky = [md[0]]; md = [] }else{ md.push(' ') }
			if (!{1:1,2:1}[ky.‖]) ‽(APP+' invalid keystring: '+util.inspect(ι))
			↩ {cmd: {1:'__KeyToKey__', 2:'__SimultaneousKeyPresses__'}[ky.‖], ι: ky.map(Key).join(',')+','+md.map(Mod).join('|')+','} }
		compile_trigger ← ι=>{ t ← compile_keystring(ι); ↩ t.cmd+' '+t.ι }
		compile_output ← ι=>{t←; ↩0,
			(t=/^\] ([^]*)$/.λ(ι))? compile_keystring(t[1]).ι :
			// (t=/^; ([^]+)$/.λ(ι))? shell(sh`PATH="/usr/local/bin:$PATH"; (ζλ ${t[1]} &)`) :
			(t=/^; ([^]+)$/.λ(ι))? shell(sh`PATH="/usr/local/bin:$PATH"; (ζλ ${ζ_compile(t[1])} &)`) :
				_(ι).map(ι=> _(char16hex(ι)).map(ι=> compile_keystring('⌥L'+ι).ι))._.flatten().join('') }
		compile_appdef ← ι=>( ι = ι.toLowerCase().re`^@(.+)$`[1].replace(/_/g,' '), appdef(ι)? ι : (_alert('[keyrc] warning','app '+util.inspect(ι)+' not found'),∅) )
		if (ι.if){ if_ ← compile_appdef(ι.if); if (!if_) ↩ ∅ }
		↩ {ι:compile_trigger(ι.trigger) + compile_output(ι.output), if:if_} }
	[onces,mappings] ← mappings._.partition(ι=> /^notsave\.KEY_once_/.test(ι.if) )
	compile_key_line ← ι=> compile_mapping(parse_key_line(ι)).ι
	↩ {root: {
		item:[
			M2( 'notsave.2touch', [
				// …['iBooks|preview','Chrome','sublime tExt','path Finder','Github desktop','Terminal','Vlc'].map(ι=>`
				…['iBooks|preview','Chrome','sublime tExt','path Finder','Github desktop','Terminal','Vlc','Discord','Spotify'].map(ι=>`
				${ι.re`[A-Z]`[0].toLowerCase()} ; `+js`${ι.toLowerCase().split(/\|/g)}.map(ι=> go_to('app',ι))` ),
				…[1,2,3,4,5].map(ι=>`
				${ι} ] ^${ι} `),
				// ☝☝ should be like @notsave.2touch and then you can say ☝☝${ι}
				].map(compile_key_line) ),
			M2( t='notsave.power_key', builtin_keys.-(text_keys).map(ι=> `${/^F[^n]$/.λ(ι)? 'Fn'+ι : ι} ${/^[⌥⇧⌘][RL]$/.λ(ι)? ι[0] : ι}` ).map(compile_key_line).map(ι=> ι+','+shell(sh`${KB} disable ${t}`)) ),
			…onces.map(ι=>M2( ι.if, [compile_mapping(_(ι).omit('if')).ι+','+shell(sh`${KB} disable ${ι.if}`)] )),
			…(t=mappings.map(compile_mapping).filter(ι=>ι)._.groupBy('if'), […_(t).omit('undefined')|>(_.values), t.undefined]).map(ι=>M2( 'keyrc '+ι[0].if, ι.map(ι=>ι.ι).reverse(), ι[0].if )),
			],
		vkopenurldef: _(shells).map((name,ι)⇒ {name, url:{'@type':'shell', '#text':ι}}),
		appdef: _(appdefs).map((ι,k)⇒ {appname:k, equal:ι}),
		}} }

// -------------------------------------------------------------------------- //
regen ← (opt={})=>{
	ι ← show_private_xml([…parse_keyrc(φ`~/.keyrc`.text), …_(φ`~/.keyrc.json`.json||{}).values()])
	φ`~/Library/Application Support/Karabiner/private.xml`.ι = ι // file:/~/Library/Application%20Support/Karabiner/private.xml
	shᵥ`${KB} reloadxml`
	if( !opt.minimal ){
		ι.root.item.map(ι=> ι.name).filter(ι=> !ι.re`^notsave\.`).map(ι=> shᵥ`${KB} enable ${ι}`)
		// if( φ`/Applications/PowerKey.app`.BAD_exists() ){ φ`~/Documents/keyrc_power_key.sh`.text = '#!/bin/bash\n'+sh`(/usr/local/bin/ζλ ${'sfx`ack`'} &); ${KB} enable notsave.power_key`; fs.chmodSync(φ`~/Documents/keyrc_power_key.sh`+'',0o777) }		
		} }

// ---------------------------------- main ---------------------------------- //
// something is running this and should not be. shit.
// if_main_do((…a)=>{
// switch( a[0] ){
// 	default:
// 		npm`chokidar@1.7.0`.watch(φ`~/.keyrc`+'').on('all',(ev,ι)=>{
// 			try{ regen() }catch(e){ _alert('[keyrc] build error:',e.stack) }
// 			})
// 	break; case 'start':
// 		require('set-input-source')(__dirname+'/node_modules/unicode-hex-input-fix')
// 		restart_and_keep_alive(__filename)
// 	break; case 'test':
// 		cn.log(parse_keyrc(φ(a[1]).text))
// 	} })

// -------------------------------------------------------------------------- //
module.exports.KEY_once = λ(trigger,f,…a){
	code ← '('+f+')(…'+JSON.stringify(a)+')'
	fi ← 'notsave.KEY_once_'+random_id(9)
	db ← (φ`~/.keyrc.json`.json||{}); id ← random_id(9); db[id] = {trigger,output:'; t ← φ`~/.keyrc.json`.json; delete t["'+id+'"]; φ`~/.keyrc.json`.json = t;'+code,if:fi}; φ`~/.keyrc.json`.json = db
	regen({minimal:✓})
	shᵥ`${KB} enable ${fi}`
	}
module.exports.robot_key_tap = λ(ι){t←; c←;
	ι = ι.replace(/^[⌘^⇧⌥]*(?=.)/,ι=>(c=ι,''))
	;[…c].∪([]).‖===c.‖ || ‽
	if ((t=ι.re`^FnF([1-4])$`) && (t[1]==='1'||t[1]==='2'? c.‖ : ✓)){
		c = _(c).map(ι⇒ {'⌘':'command', '^':'control', '⇧':'shift', '⌥':'option'}[ι]+' down')
		osaᵥ`system events: key code ${[∅,0x6b,0x71,0xa0,0x83][t[1]]} using {…${c.join(',')}}`
		}
	else {
		c = _(c).map(ι⇒ {'⌘':'command', '^':'control', '⇧':'shift', '⌥':'alt'}[ι])
		ι = text_keys.includes(ι)? ι : { '^':'control', F1:'f1', F2:'f2', F3:'f3', F4:'f4', F5:'f5', F6:'f6', F7:'f7', F8:'f8', F9:'f9', Fa:'f10', Fb:'f11', Fc:'f12', FnF1:'lights_mon_down', FnF2:'lights_mon_up', FnF5:'lights_kbd_down', FnF6:'lights_kbd_up', FnF7:'audio_prev', FnF8:'audio_pause', FnF9:'audio_next', FnFa:'audio_mute', FnFb:'audio_vol_down', FnFc:'audio_vol_up', '←':'left', '↑':'up', '→':'right', '↓':'down', '↩':'enter', '⇥':'tab', '⇧':'shift', '⌥':'alt', '⌘':'command', '⌫':'backspace', '⎋':'escape', '␣':'space', }[ι] || ‽
		robot.keyTap(ι,c) } }

// mild todo:
// right command is maybe problematic
// if desired, more than just KeyToKey and SimultaneousKeyPresses: https://github.com/tekezo/Karabiner/tree/master/src/core/kext/RemapFunc
// 2d regexes would be wonderful for parsing .keyrc
// remap the keyboard brightness keys to sync up with the main brightness keys, and then you can reuse the keyboard brightness keys

// todo: append ',KeyCode::VK_NONE' to the end of an autogen entry to make it repeat even if it's a VK_OPEN_URL_*

// https://github.com/beardedspice/beardedspice/tree/master/BeardedSpice/Tabs
// https://github.com/beardedspice/beardedspice/tree/master/BeardedSpice/MediaStrategies
// ⌘ + F8	Set Focused Browser tab as Active Player (effectively directing your commands to that tab)
// ⌘ + F6	Focus Active Player (Shows the tab currently controlled by BeardedSpice)
// ⌘ + F11	Show Track information (shows a notification with info about the currently playing tab)

// faster applescript http://stackoverflow.com/a/3757178/322866 ? or with background python program, i dont care really

//! wtf is it needing to be build *twice* before changes happen?

// could be useful: Split the window however you like! Create new panes, delete panes, move and clone views from pane to pane. http://github.com/SublimeText/Origami
