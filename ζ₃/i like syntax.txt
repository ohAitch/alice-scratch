i like this syntax http://www.ocamlpro.com/files/ocaml-lang.pdf

i like this syntax:
foo ← (@,a,b)=>{ ... }
->
foo ← (self,a,b)=>(λ(){ ... }).call(self)

i like this syntax:
operator precedence defaults you can define how you want, but also define
known legible operator precedence
and auto insert parens into the code when the code is not known to be legible

wolfram language neat things
not sure if actually neat but, here they are
used them as inspiration for [ map… ]
	f[x]         f(x)
	f @ x        f(x)
	x // f       f(x)
	f @@ x       f(…x)
	f @@@ x      x.map(x=> f(…x))
	f /@ x       x.map(f)
	f //@ x      postwalk(x,f) # MapAll
	f @* g       x=> f(g(x))
	f /* g       x=> g(f(x))

	f @ x + 1    f( x + 1 )

	x >>> φ      append(φ,x)
	x >> φ       write(φ,x)
	<< φ         require(φ)
	_            .
	x..          x+
	x...         x*
