import org.lwjgl.BufferUtils
import java.nio.*

/*priv ThreadLocal<ReusableBuffers> buffers = new ThreadLocal<ReusableBuffers>() {shy ReusableBuffers initialValue() {return new ReusableBuffers()}};
priv class ReusableBuffers {
	ByteBuffer[] bb1 = new ByteBuffer[64]; //up to 64 bytes
	ByteBuffer[] bb2 = new ByteBuffer[32]; //up to 64 chars/shorts
	ByteBuffer[] bb4 = new ByteBuffer[32]; //up to 64 ints/floats
	ByteBuffer[] bb8 = new ByteBuffer[32]; //up to 64 longs/reals
}

ByteBuffer getByte(int len) {
	if (len <= 64 || (len>>1 == 0 && len <= 128) || (len>>2 == 0 && len <= 256) || (len>>3 == 0 && len <= 512)) {
		bufs := buffers.get();
		if len <=  64: return bufs.bb1[len-1      ] == null? (bufs.bb1[len-1      ] = BufferUtils.createByteBuffer(len)) : bufs.bb1[len-1      ];
		if len <= 128: return bufs.bb2[(len>>1)-33] == null? (bufs.bb2[(len>>1)-33] = BufferUtils.createByteBuffer(len)) : bufs.bb2[(len>>1)-33];
		if len <= 256: return bufs.bb4[(len>>2)-33] == null? (bufs.bb4[(len>>2)-33] = BufferUtils.createByteBuffer(len)) : bufs.bb4[(len>>2)-33];
		if len <= 512: return bufs.bb8[(len>>3)-33] == null? (bufs.bb8[(len>>3)-33] = BufferUtils.createByteBuffer(len)) : bufs.bb8[(len>>3)-33];
		return null; //won't get here
	} else {
		return BufferUtils.createByteBuffer(len);
	}
}
  CharBuffer   getChar(int len) {return getByte(len<<1).  asCharBuffer()}
 ShortBuffer  getShort(int len) {return getByte(len<<1). asShortBuffer()}
   IntBuffer    getInt(int len) {return getByte(len<<2).   asIntBuffer()}
 FloatBuffer  getFloat(int len) {return getByte(len<<2). asFloatBuffer()}
  LongBuffer   getLong(int len) {return getByte(len<<3).  asLongBuffer()}
DoubleBuffer getDouble(int len) {return getByte(len<<3).asDoubleBuffer()}

   IntBuffer fromArr(  int[] a) {return (#   IntBuffer)((#   IntBuffer)   getInt(a.length).clear()).put(a).flip()}
  ByteBuffer fromArr( byte[] a) {return (#  ByteBuffer)((#  ByteBuffer)  getByte(a.length).clear()).put(a).flip()}
  CharBuffer fromArr( char[] a) {return (#  CharBuffer)((#  CharBuffer)  getChar(a.length).clear()).put(a).flip()}
  LongBuffer fromArr( long[] a) {return (#  LongBuffer)((#  LongBuffer)  getLong(a.length).clear()).put(a).flip()}
 FloatBuffer fromArr(float[] a) {return (# FloatBuffer)((# FloatBuffer) getFloat(a.length).clear()).put(a).flip()}
 ShortBuffer fromArr(short[] a) {return (# ShortBuffer)((# ShortBuffer) getShort(a.length).clear()).put(a).flip()}
DoubleBuffer fromArr( real[] a) {return (#DoubleBuffer)((#DoubleBuffer)getDouble(a.length).clear()).put(a).flip()}*/

  ByteBuffer   makeByte(int len) {return BufferUtils.  createByteBuffer(len)}
  CharBuffer   makeChar(int len) {return BufferUtils.  createCharBuffer(len)}
 ShortBuffer  makeShort(int len) {return BufferUtils. createShortBuffer(len)}
   IntBuffer    makeInt(int len) {return BufferUtils.   createIntBuffer(len)}
 FloatBuffer  makeFloat(int len) {return BufferUtils. createFloatBuffer(len)}
  LongBuffer   makeLong(int len) {return BufferUtils.  createLongBuffer(len)}
DoubleBuffer makeDouble(int len) {return BufferUtils.createDoubleBuffer(len)}

   IntBuffer /*newF*/fromArr(  int[] a) {return (#   IntBuffer)BufferUtils.   createIntBuffer(a.length).put(a).flip()}
  ByteBuffer /*newF*/fromArr( byte[] a) {return (#  ByteBuffer)BufferUtils.  createByteBuffer(a.length).put(a).flip()}
  CharBuffer /*newF*/fromArr( char[] a) {return (#  CharBuffer)BufferUtils.  createCharBuffer(a.length).put(a).flip()}
  LongBuffer /*newF*/fromArr( long[] a) {return (#  LongBuffer)BufferUtils.  createLongBuffer(a.length).put(a).flip()}
 FloatBuffer /*newF*/fromArr(float[] a) {return (# FloatBuffer)BufferUtils. createFloatBuffer(a.length).put(a).flip()}
 ShortBuffer /*newF*/fromArr(short[] a) {return (# ShortBuffer)BufferUtils. createShortBuffer(a.length).put(a).flip()}
DoubleBuffer /*newF*/fromArr( real[] a) {return (#DoubleBuffer)BufferUtils.createDoubleBuffer(a.length).put(a).flip()}