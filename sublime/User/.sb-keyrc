###################### custom names for existing commands ######################
⌘t     cmd.new_file()
^t     cmd.clone_file()
⌘n     cmd.new_window()
^⇥     cmd.next_view()
^⇧⇥    cmd.prev_view()
⌘l     cmd.show_overlay({ "overlay":"goto", "show_files":true })
# @sublime_text  ⇪   ] ⌘⇧⌥^a
# ⌘⇧⌥^a  cmd.show_overlay({ "overlay":"command_palette" })
⌘p     cmd.show_overlay({ "overlay":"command_palette" })
⌘⌥↑    cmd.swap_line_up()
⌘⌥↓    cmd.swap_line_down()
⌘d     cmd.duplicate_line()
⌘⇧d    cmd.find_under_expand()
# ⌫=  ] ⌘⇧⌥^⌫
# ⌘⇧⌥^⌫
⌘⇧⌫    cmd.run_macro_file({ "file":"res://Packages/Default/Delete Line.sublime-macro" })
⌘⇧[    cmd.fold()
⌘⇧]    cmd.unfold()
⌘⌥←    cmd.bh_key({ "lines":true, "plugin":{ "type":["__all__"], "command":"bh_modules.bracketselect", "args":{"select":"left"} } })
⌘⌥→    cmd.bh_key({ "lines":true, "plugin":{ "type":["__all__"], "command":"bh_modules.bracketselect", "args":{"select":"right"} } })
^m     cmd.toggle_minimap()

##################################### find #####################################
⌘f     cmd.show_panel({ "panel":"replace", "reverse":false })
⌘↩     cmd.find_all({ "close_panel":true }) @ [ {"key":"panel", "operand":"find"}, {"key":"panel_has_focus"} ]
⌘↩     cmd.find_all({ "close_panel":true }) @ [ {"key":"panel", "operand":"replace"}, {"key":"panel_has_focus"} ]
⌘⇧↩    cmd.replace_all({ "close_panel":true }) @ [ {"key":"panel", "operand":"replace"}, {"key":"panel_has_focus"} ]
⌘↩     cmd.find_all_under() @ [ {"key":"panel", "operator":"not_equal", "operand":"replace"} ]
⌘m     cmd.find_under_expand()

################################ custom commands ###############################
# /↩  ] ⌘⇧⌥^↩
# ⌘⇧⌥^↩
⌘⌥↩    cmd.open_context({ "type":"link" })
⌘⇧-    cmd.make_divider({ "length":30 })
⌘⇧=    cmd.make_divider({ "length":80 })
# ;'  ] ⌘⇧⌥^;
# ⌘⇧⌥^;
⌘'     cmd.inline_eval_zeta()
⌘b     cmd.run_project()
⌘;     cmd.open_context({ "type":"terminal" })
⌘9     cmd.goto_last_tab()
⌘0     cmd.do_nothing()
⌘←     cmd.move_to({ "to":"hardbol" })
⌘→     cmd.move_to({ "to":"hardeol" })
# @sublime_text  ⌘/. ] ⌘⇧⌥^m
# ⌘⇧⌥^m  cmd.toggle_comment_2({ "style":"//X " })

######################### temporary .keyrc replacement #########################
# ⌘o   cmd.zeta2({ "x":" hsᵥ`hs.alert(${    sb.tab.active.ι.slice(0,10)    })` " })
^d   cmd.zeta({ "x":"go_to('app','discord')" })
^s   cmd.zeta({ "x":"go_to('app','spotify')" })
^g   cmd.zeta({ "x":"go_to('app','github desktop')" })
^i   cmd.zeta({ "x":"go_to('app','google chrome')" })
^9   cmd.zeta({ "x":" [windows,spaces] ← tsᵥ`[ TS.window_list, (1..TS.number_of_spaces).map{|ι| TS.name_for_space(ι)} ]`; tsᵥ`TS.move_to_space(${spaces.length-1 +1})` " })
⌘⇧v  cmd.zeta({ "x":" t ← hsᵥ`hs.pasteboard.typesAvailable()`; if (t.image && !t.string){ out ← φ`~/.image_cache/${random_id(6)}.png`.ensure_dir(); p('file:/'+(out+'').replace(re`^${process.env.HOME}(?=/|$)`,'~')); hsᵥ`hs.pasteboard.readImage():saveToFile(${out+''})` }; robot_key_tap('⌘⇧v') // ! really should be ⌘v " })
# ⌘⌥b  cmd.zeta({ "x":" go_to('app','terminal'); φ`/tmp/__·`.text = sb.tab.active.ι; sleep(0.01); […'⌘eval[\\'','⌥0','⌥0','⌥b','⌥7',…'\\']↩'].map(robot_key_tap.X) " })
# new Property(eval,'·').def({ enumerable:✓, get(){ ζ_eval(φ`/tmp/__·`.text.replace(/^#!.*/,'')) }, })
⌥^l  cmd.zeta({ "x":" sfx`ack`; go_to('genius lyrics: '+osaᵥ`spotify: {artist,name} of current track`.join(' - ')) " })
⇧⌥5  cmd.insert_snippet({ "contents":"∉" })
⇧⌥6  cmd.insert_snippet({ "contents":"∌" })
⇧⌥8  cmd.insert_snippet({ "contents":"⁘" })
⇧⌥]  cmd.insert_snippet({ "contents":"⇒" })
⇧⌥`  cmd.insert_snippet({ "contents":"≉" })
⇧^⌥l cmd.insert_snippet({ "contents":"🔒" })
⇧⌥a  cmd.insert_snippet({ "contents":"⟠" })
⇧⌥b  cmd.insert_snippet({ "contents":"₁₀" })
⇧⌥c  cmd.insert_snippet({ "contents":"ℂ" })
⇧⌥d  cmd.insert_snippet({ "contents":"Δ" })
⇧⌥i  cmd.insert_snippet({ "contents":"⁻¹" })
⇧⌥l  cmd.insert_snippet({ "contents":"🏷" })
⇧⌥m  cmd.insert_snippet({ "contents":"÷" })
⇧⌥n  cmd.insert_snippet({ "contents":"ℕ" })
⇧⌥o  cmd.insert_snippet({ "contents":"◍" })
⇧⌥p  cmd.insert_snippet({ "contents":"Π" })
⇧⌥q  cmd.insert_snippet({ "contents":"ℚ" })
⇧⌥r  cmd.insert_snippet({ "contents":"ℝ" })
⇧⌥s  cmd.insert_snippet({ "contents":"⚓" })
⇧⌥u  cmd.insert_snippet({ "contents":"∩" })
⇧⌥x  cmd.insert_snippet({ "contents":"∅" })
⇧⌥y  cmd.insert_snippet({ "contents":"✗" })
⇧⌥z  cmd.insert_snippet({ "contents":"ℤ" })
⌥a   cmd.insert_snippet({ "contents":"ι" })
⌥b   cmd.insert_snippet({ "contents":"⧫" })
⌥c   cmd.insert_snippet({ "contents":"✨" })
⌥d   cmd.insert_snippet({ "contents":"°" })
⌥f   cmd.insert_snippet({ "contents":"φ" })
⌥g   cmd.insert_snippet({ "contents":"γ" })
⌥i   cmd.insert_snippet({ "contents":"∞" })
⌥l   cmd.insert_snippet({ "contents":"λ" })
⌥m   cmd.insert_snippet({ "contents":"≥" })
⌥n   cmd.insert_snippet({ "contents":"≤" })
⌥o   cmd.insert_snippet({ "contents":"‡" })
⌥p   cmd.insert_snippet({ "contents":"π" })
⌥q   cmd.insert_snippet({ "contents":"‘" })
⌥r   cmd.insert_snippet({ "contents":"√" })
⌥s   cmd.insert_snippet({ "contents":"‖" })
⌥u   cmd.insert_snippet({ "contents":"∪" })
⌥v   cmd.insert_snippet({ "contents":"ᵥ" })
⌥x   cmd.insert_snippet({ "contents":"ˣ" })
⌥y   cmd.insert_snippet({ "contents":"✓" })
⌥z   cmd.insert_snippet({ "contents":"ζ" })
⌥,   cmd.insert_snippet({ "contents":"⊂" })
⌥.   cmd.insert_snippet({ "contents":"⊃" })
⌥/   cmd.insert_snippet({ "contents":"‽" })
⌥1   cmd.insert_snippet({ "contents":"¬" })
⌥2   cmd.insert_snippet({ "contents":"⌥" })
⌥3   cmd.insert_snippet({ "contents":"∃" })
⌥4   cmd.insert_snippet({ "contents":"⌘" })
⌥5   cmd.insert_snippet({ "contents":"∈" })
⌥6   cmd.insert_snippet({ "contents":"∋" })
⌥7   cmd.insert_snippet({ "contents":"⇧" })
⌥8   cmd.insert_snippet({ "contents":"×" })
⌥9   cmd.insert_snippet({ "contents":"§" })
⌥;   cmd.insert_snippet({ "contents":"…" })
⌥=   cmd.insert_snippet({ "contents":"≠" })
⌥[   cmd.insert_snippet({ "contents":"←" })
⌥]   cmd.insert_snippet({ "contents":"→" })
⌥`   cmd.insert_snippet({ "contents":"≈" })
⌥↩   cmd.insert_snippet({ "contents":"↩" })
⌥␣   cmd.insert_snippet({ "contents":"␣" })

# shavian key bindings:
# a 𐑩𐑳 au
# b 𐑧𐑱 eea
# c 𐑗𐑡 ch j
# d 𐑑𐑛 td
# e 𐑦𐑰 ii
# f 𐑓𐑝 fv
# h 𐑙𐑣 nh
# i 𐑨𐑲 aeai
# j 𐑖𐑠 ss
# k 𐑒𐑜 kg
# l 𐑤𐑮 lr
# m 𐑥𐑯 mn
# o 𐑪𐑴 oo [north america: 𐑪 = 𐑭]
# p 𐑐𐑚 pb
# q 𐑬𐑶 auoi
# s 𐑕𐑟 sz
# t 𐑔𐑞 th th
# u 𐑫𐑵 oooo
# w 𐑭𐑷 aaw [north america: 𐑪 = 𐑭]
# y 𐑘𐑢 yw
# remaining: gnrvxz
# i would really like to bind capslock to this
