#!/usr/bin/env ζ
// translate sane stuff into weird sublime formats and put it in the sublime places
// then, delete files in the sublime places that we didn't write to (except for specialized exceptions)

// action type: BUILD then RELEASE. should be: START service which watches for changes & {BUILD then RELEASE}s

plist ← npm`plist@1.2.0`

// ------------------------------- generic lib ------------------------------ //
match_json_head ← ι=> _.range(ι.‖).search(i=>{ i>1e3 && ‽('inefficient'); ↩ catch_ι(()=> [JSON.parse(ι.slice(0,i+1)),ι.slice(i+1)] )})

// ----------------------------------- lib ---------------------------------- //
compile_keys ← ι=> […ι].map(ι⇒ {'⌘':'super','⌥':'alt','^':'ctrl','⇧':'shift','↩':'enter','←':'left','→':'right','␣':'space','⌫':'backspace','↓':'down','↑':'up','⇥':'tab'}[ι] || ι).join('+')

// -------------------------------------------------------------------------- //
// main ← λ(){
// 	‽('φ todo')
// 	from ← φ(__dirname).φ`Packages`
// 	dest ← φ`~/Library/Application Support/Sublime Text 3/Packages`
// 	written ← []; R ← ι=> (written.push(ι+''), ι)
// // ------------------------------- broken part ------------------------------ //
// 	from.φ`**`.filter(ι=> !ι.dir()).map(λ(ι){ι+=''; t←; ι = ι.slice((from+'').‖).replace(/^\//,'') // .root(from) ?
// 		;(t=ι.match(/^(.*)\.json$/))?
// 			( R(dest.φ(t[1])).buf = plist.build(from.φ(ι).json) )
// 		: ( R(dest.φ(ι)).buf = from.φ(ι).buf )
// 		})
// 	roots ← from.φ`*`.φs.map(ι=> (ι+'').replace(from+'',dest+''))
// 	out ← dest.φ`**`.filter(ι=> roots.some(r=> (ι+'').re`^${r}`)).filter(ι=> !ι.dir()).map(ι=> ι+'')
// // -------------------------------------------------------------------------- //
// 	out.-(written)
// 		.filter(ι=> !ι.replace(dest+'','').re`Package Control\.` )
// 		.forEach(ι=> φ(ι).ι = null )
// 	}

colors_to_tmTheme ← λ(from,to){
	t ← φ(from).text.replace(/#[\s#].*/g,'').replace(/\n\n+/g,'\n')
	t = t.re`^([^{]*)([^]*)`
	defs ← t[1].match(/([\w# [\]]+) → ([\w,]+)/g).map(ι=> ι.match(/([\w# [\]]+) → ([\w,]+)/)).map…(ι=> ι[2].split(',').map(name=> [name,ι[1]]))
	t = t[2]
	defs.forEach(ι=> t = t.replace(re`\$…${ι[0]}(\w*)`.g, (ˣ,t)=> ι[1].replace(/(?= |$)/,t)))
	t = t.re`^\s*(\{[^]+?\})([^]*)`
	r ← {name:φ(from).name.replace(/\.colors$/,''), settings:[
		{settings:JSON.parse(t[1])},
		…t[2].trim().split('\n').map(λ(ι){ t ← ι.re`^(#\S+)? *(?:bg (#\S+))? *(?:\[([\w ]+)\])? *(.+)$`; ↩ {settings:[['foreground',t[1]],['background',t[2]],['fontStyle',t[3]]].filter(ι=>ι[1])._.object(), scope: […re`…${t[4].replace(/\./g,'\\.')}`].join(',')} }),
		] }
	φ(to).buf = plist.build(r)
	}

sb_keyrc_to_sublime_keymap ← λ(from,to){
	t ← φ(from).text.replace(/#[\s#].*/g,'').replace(/\n\n+/g,'\n')
	r ← t.match(/^(\S+) +cmd.(\w+)\((.*)/gm).map(ι=> ι.match(/^(\S+) +cmd.(\w+)\((.*)/)).map(λ(ι){
		k ← compile_keys(ι[1])
		cm ← ι[2]
		t ← ι[3]; [a,t] ← t.re`^\)`? [undefined,t] : match_json_head(t); a||(a={}); t = t.replace(/^\) */,'')
		[cx,t] ← t.re`^@`? match_json_head(t.slice(1)) : [undefined,t]
		t.trim()==='' || ‽
		↩ {keys:[k], command:cm, args:a, context:cx}
		})
	φ(to).json = r }

if_main_do((…a)=>{
	switch( a[0]||'' ){default: ‽
		// break; case '': main()
		break; case '':
			shᵥ`ln -sfhF ~/code/scratch/sublime/{JavaScript,Text,User} ~/Library/'Application Support/Sublime Text 3'/Packages; :`
			P ← __dirname+'/User/'
			colors_to_tmTheme(P+'ὄνειρον.colors', P+'.bin/ὄνειρον.tmTheme')
			sb_keyrc_to_sublime_keymap(P+'.sb-keyrc', P+'.bin/Default.sublime-keymap')
		// break; case 'to': to(a[1], a[2]||a[1])
		} })
