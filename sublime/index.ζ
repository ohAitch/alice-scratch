#!/usr/bin/env ζ
// translate sane stuff into weird sublime formats and put it in the sublime places
// then, delete files in the sublime places that we didn't write to (except for specialized exceptions)

plist ← npm('plist@1.2.0')
arg ← {
	cmd: process.argv[2] || 'to',
	in: φ(process.argv[3] || 'Packages').root('/')+'',
	out: φ`~/Library/Application Support/Sublime Text 3/Packages`+'',
	}
APP ← '\x1b[34m[sublime transform]\x1b[0m'

main ← λ(){
	written ← []; R ← ι => (written.push(ι+''), ι)
// ------------------------------- broken part ------------------------------ //
	φ(arg.in).φ`**`.filter(ι => !ι.dir()).map(λ(ι){ι+=''; t←; ι = ι.slice(arg.in.length).replace(/^\//,'')
		;(t=ι.match(/^(.*)\.json$/))?
			( R(φ(arg.out).φ(t[1])).buf = plist.build(φ(arg.in).φ(ι).json) )
		: ( R(φ(arg.out).φ(ι)).buf = φ(arg.in).φ(ι).buf )
		})
	roots ← φ(arg.in).φ`*`.φs.map(λ(ι){ι+=''; ↩ ι.replace(arg.in,arg.out)})
	out ← φ(arg.out).φ`**`.filter(λ(ι){ι+=''; ↩ roots.some(λ(r){↩ ι.indexOf(r) === 0})}).filter(ι => !ι.dir()).map(ι => ι+'')
// -------------------------------------------------------------------------- //
	_.difference(out,written)
		.filter(λ(ι){ ↩ !/Package Control\./.λ(ι.replace(arg.out,'')) })
		.map(λ(ι){ φ(ι).ι = null })
	}

switch (arg.cmd) {
	default: cn.log(APP,'invalid command')
	break; case 'to': main()
	// break; case 'from': φ`…${arg.in}.json`.ι = plist.parse(φ(arg.in).text)
	}
