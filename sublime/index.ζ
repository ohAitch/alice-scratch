#!/usr/bin/env ζ
// translate sane stuff into weird sublime formats and put it in the sublime places
// then, delete files in the sublime places that we didn't write to (except for specialized exceptions)

plist ← npm('plist@1.2.0')
arg ← {
	cmd: process.argv[2] || 'to',
	in: 'Packages',//path.resolve(process.argv[3] || 'Packages'),
	out: φ`~/Library/Application Support/Sublime Text 3/Packages`+'',//path.resolve(fs('~/Library/Application Support/Sublime Text 3/Packages').path),
	}

transform_json ← λ(str){↩ plist.build(JSON.parse(str))}

main ← λ(){
	written ← []; R ← λ(ι){written.push(ι); ↩ ι}
// ------------------------------- broken part ------------------------------ //
	φ(arg.in).φ`**`.filter(ι => !ι.dir()).map(λ(ι){ι+=''; t←; ι = ι.slice(arg.in.length).replace(/^\//,'')
		;(t=ι.match(/^(.*)\.json$/))?
			(fs(R(arg.out+'/'+t[1])).$ = transform_json(fs(arg.in+'/'+ι).$))
		: (fs(R(arg.out+'/'+ι)).$ = fs(arg.in+'/'+ι).$)
		})
	roots ← φ(arg.in).φ`*`.map(λ(ι){ι+=''; ↩ ι.replace(arg.in,arg.out)})
	out ← φ(arg.out).φ`**`.filter(λ(ι){ι+=''; ↩ roots.some(λ(r){↩ ι.indexOf(r) === 0})}).filter(ι => !ι.dir()).map(ι => ι+'')
// -------------------------------------------------------------------------- //
	_.difference(out,written)
		.filter(λ(ι){ ↩ !/Package Control\./.λ(ι.replace(arg.out,'')) })
		.map(λ(ι){ φ(ι).ι = null })
	}

switch (arg.cmd) {
	default: print('[sublime-transform] invalid command')
	break; case 'to': main()
	// break; case 'from': φ(arg.in+'.json').ι = plist.parse(fs(arg.in).$)
	}
