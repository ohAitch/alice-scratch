%YAML 1.2
---
# Derived from JavaScript Next: https://github.com/Benvie/JavaScriptNext.tmLanguage
name: JavaScript
file_extensions: [js,htc,ζ]
first_line_match: ^#!/.*\b(node|js)$\n?
scope: source.js
variables:
  identifier: '[_‡$‖♓§∅[:alpha:]][_‡$‖♓§∅[:alnum:]]*'
  constant_identifier: '[[:upper:]][_$[:digit:][:upper:]]*\b'
  dollar_only_identifier: '\$(?![_$[:alnum:]])'
  dollar_identifier: '(\$)[_$[:alnum:]]+'
  func_lookahead: '\s*\b(async\s+)?(?:function|λ)\s*(?:\*\s*)?(?:{{identifier}}\s*)?\('
  arrow_func_lookahead: '\s*(\basync\s*)?({{identifier}}|\([^\(]*?\))?\s*(=>|⇒)'

contexts:
  main:
    - match: '((?<=[\s\[]|^)#)([^\d\s\]#][^\s\]]*|(?=\d))'
      captures:
        1: markup.hashtag.hash
        2: markup.hashtag
    - include: comments-top-level
    - include: keywords-top-level
    - include: statements

  keywords-top-level:
    - match: \bimport\b
      scope: meta.import.js keyword.control.import.js
      push: import-extended
    - match: \b(export|default|from|as)\b
      scope: keyword.control.import.js

  import-escape:
    - match: '(?=;|function|λ|var|class)'
      pop: true
    - match: "(?='|\"|\\bfrom\\b)"
      set: import-final

  import-extended:
    - meta_content_scope: meta.import.js
    - include: import-escape
    - include: comments
    - match: '\{'
      scope: meta.block.js punctuation.definition.block.js
      set: import-brace
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js
      set: import-extended-as
    - match: '\*'
      scope: constant.other.js
      set: import-extended-as
    - match: '(?=\S)'
      pop: true

  import-extended-as:
    - meta_content_scope: meta.import.js
    - include: import-escape
    - match: '\b(as)(?:\s+({{identifier}}))?'
      captures:
        1: keyword.control.import.js
        2: variable.other.readwrite.js
    - match: '(?=\S)'
      set: import-extended-continue

  import-extended-continue:
    - meta_scope: meta.import.js
    - include: import-escape
    - include: comments
    - match: ','
      scope: meta.delimiter.comma.js
      set: import-extended
    - match: '(?=\S)'
      pop: true

  import-brace:
    - meta_content_scope: meta.import.js meta.block.js
    - include: import-escape
    - include: comments
    - match: '\}'
      scope: punctuation.definition.block.js
      set: import-extended-as
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js
      set: import-brace-as
    - match: '\*'
      scope: constant.other.js
      set: import-brace-as
    - match: '(?=\S)'
      pop: true

  import-brace-as:
    - meta_content_scope: meta.import.js meta.block.js
    - include: import-escape
    - match: '\b(as)\b(\s+(?:{{identifier}}))?'
      captures:
        1: keyword.control.import.js
        2: variable.other.readwrite.js
    - match: '(?=\S)'
      set: import-brace-continue

  import-brace-continue:
    - meta_scope: meta.import.js meta.block.js
    - include: import-escape
    - include: comments
    - match: '(?=\})'
      set: import-brace
    - match: ','
      scope: meta.delimiter.comma.js
      set: import-brace
    - match: '(?=\S)'
      pop: true

  import-final:
    - meta_scope: meta.import.js
    - include: comments
    - match: '\bfrom\b'
      scope: keyword.control.import.js
    - include: literal-string
    - match: '(?=\S)'
      pop: true

  comments-top-level:
    - match: (<!--|-->)
      scope: comment.block.html.js punctuation.definition.comment.js
    - match: ^(#!/).*$\n?
      scope: comment.line.shebang.js
      captures:
        1: punctuation.definition.comment.js

  statements:
    - include: conditional
    - match: '\{(?!\{)'
      scope: punctuation.definition.block.js
      push:
        - meta_scope: meta.block.js
        - match: '\}'
          scope: punctuation.definition.block.js
          pop: true
        - include: statements
    - include: label
    - include: expressions

  conditional:
    - match: \bswitch\b
      scope: keyword.control.switch.js
      push:
        - meta_scope: meta.switch.js
        - include: round-brackets
        - match: '\}'
          scope: meta.block.js punctuation.definition.block.js
          pop: true
        - match: '\{'
          scope: punctuation.definition.block.js
          push:
            - meta_scope: meta.block.js
            - match: '(?=\})'
              pop: true
            - match: ':'
              push:
                - match: '(?=(\bcase\b|\bdefault\b|\}))'
                  pop: true
                - include: statements
            - match: \b(case|default)\b
              scope: keyword.control.switch.js
            - include: expressions

    - match: \bdo\b
      scope: keyword.control.loop.js
      push:
        - meta_scope: meta.do-while.js
        - include: comments
        - match: '\{'
          scope: punctuation.definition.block.js
          push:
            - meta_scope: meta.block.js
            - match: '\}'
              scope: punctuation.definition.block.js
              pop: true
            - include: statements
        - match: \bwhile\b
          scope: keyword.control.loop.js
        - match: '\('
          scope: punctuation.definition.group.js
          push:
            - meta_scope: meta.group.js
            - match: '(?=\))'
              pop: true
            - include: expressions
        - match: '\)'
          scope: meta.group.js punctuation.definition.group.js
          pop: true

    - match: \bfor\b
      scope: keyword.control.loop.js
      push:
        - meta_scope: meta.for.js
        - include: parens-block-scope

    - match: \bwhile\b
      scope: keyword.control.loop.js
      push:
        - meta_scope: meta.while.js
        - include: parens-block-scope

    - match: \bwith\b
      scope: keyword.control.with.js
      push:
        - meta_scope: meta.with.js
        - include: parens-block-scope

    - match: \b(else\s+if|if)\b
      scope: keyword.control.conditional.js
      push:
        - meta_scope: meta.conditional.js
        - include: parens-block-scope

    - match: \belse\b
      scope: keyword.control.conditional.js
      push:
        - meta_scope: meta.conditional.js
        - include: block-scope

    - match: \btry\b
      scope: keyword.control.trycatch.js
      push:
        - meta_scope: meta.try.js
        - include: block-scope

    - match: \bfinally\b
      scope: keyword.control.trycatch.js
      push:
        - meta_scope: meta.finally.js
        - include: block-scope

    - match: \bcatch\b
      scope: keyword.control.trycatch.js
      push:
        - meta_scope: meta.catch.js
        - include: parens-block-scope

  parens-block-scope:
    - match: '\('
      scope: punctuation.definition.group.js
      push:
        - meta_scope: meta.group.js
        - match: '\)'
          scope: punctuation.definition.group.js
          pop: true
        - include: expressions
    - include: block-scope

  block-scope:
    - include: comments
    - match: '\}'
      scope: meta.block.js punctuation.definition.block.js
      pop: true
    - match: '\{'
      scope: punctuation.definition.block.js
      push:
        - meta_scope: meta.block.js
        - match: '(?=\})'
          pop: true
        - include: statements
    - match: '(?=\S)'
      pop: true

  expressions:
    - include: comments
    - include: regexp-complete
    - include: literal-string
    - include: literal-string-template
    - include: constructor
    - include: unary-operators
    - include: binary-operators
    - include: class
    - include: keywords
    - include: constants
    - include: literal-prototype
    - include: named-function
    - include: anonymous-function
    - include: mustache
    - include: object-literal
    - include: brackets
    - include: literal-number
    - include: literal-call
    - include: literal-variable
    - include: literal-punctuation

  after-operator:
    # Prevent matching "{" as a block, but instead always treat as an object
    # literal. This is needed since in the "statements" context, a "{" starts
    # an anonymous block, not an object literal.
    - match: '(?=\{)'
      push:
        - include: object-literal
        - match: '(?=.|\n)'
          pop: true
    # When following an operator, a single / is the beginning of a regexp,
    # not a division operator
    - match: '/(?=[^/*])'
      scope: punctuation.definition.string.begin.js
      push: regexp
    - match: '(?=[\S])'
      pop: true

  after-identifier:
    # When following an identifier or closing )/], a single / is a division
    # operator, not the beginning of a regexp
    - match: '/(?=[^/*])'
      scope: keyword.operator.arithmetic.js
      set: after-operator
    - match: '(?=[\S\n])'
      pop: true

  comments:
    - include: special-comments-conditional-compilation
    - match: /\*\*(?!/)
      scope: punctuation.definition.comment.js
      push:
        - meta_scope: comment.block.documentation.js
        - match: \*/
          scope: punctuation.definition.comment.js
          pop: true
    - match: /\*
      scope: punctuation.definition.comment.js
      push:
        - meta_scope: comment.block.js
        - match: \*/
          scope: punctuation.definition.comment.js
          pop: true
    - match: '//|#([ \t#]|$)'
      scope: punctuation.definition.comment.js
      push:
        - meta_scope: comment.line.double-slash.js
        - match: \n
          pop: true
    # - { scope: punctuation.text.me, match: '‡' }

  special-comments-conditional-compilation:
    - match: /\*(?=@)
      scope: punctuation.definition.comment.js
      push:
        - meta_scope: comment.block.conditional.js
        - match: \*/
          scope: punctuation.definition.comment.js
          pop: true
        - match: /\*
          scope: punctuation.definition.comment.js
        - include: main
    - match: (@)(if|elif|else|end|ifdef|endif|cc_on|set)\b
      scope: keyword.control.conditional.js
      captures:
        1: punctuation.definition.keyword.js
    - match: '(@)(_win32|_win16|_mac|_alpha|_x86|_mc680x0|_PowerPC|_jscript|_jscript_build|_jscript_version|_debug|_fast|[a-zA-Z]\w+)'
      scope: variable.other.conditional.js
      captures:
        1: punctuation.definition.variable.js

  literal-string:
    - match: "'"
      scope: punctuation.definition.string.begin.js
      push:
        - meta_scope: string.quoted.single.js
        - match: (')|(\n)
          captures:
            1: punctuation.definition.string.end.js
            2: invalid.illegal.newline.js
          pop: true
        - include: string-content
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.js
      push:
        - meta_scope: string.quoted.double.js
        - match: (")|(\n)
          captures:
            1: punctuation.definition.string.end.js
            2: invalid.illegal.newline.js
          pop: true
        - include: string-content

  literal-string-template:
    - match: '({{identifier}})?(`)'
      captures:
        1: variable.function.tagged-template.js
        2: punctuation.definition.string.template.begin.js
      push:
        - meta_scope: string.template.js
        - match: "`"
          scope: punctuation.definition.string.template.end.js
          pop: true
        - match: '\$\{'
          captures:
            0: punctuation.definition.template-expression.begin.js
          push:
            - meta_scope: meta.template.expression.js
            - meta_content_scope: source.js.embedded.expression
            - match: '\}'
              scope: punctuation.definition.template-expression.end.js
              pop: true
            - include: expressions
        - include: string-content

  string-content:
    - match: \\\s*\n
      scope: constant.character.escape.newline.js
    - match: '\\(x[\da-fA-F][\da-fA-F]|u[\da-fA-F][\da-fA-F][\da-fA-F][\da-fA-F]|.)'
      scope: constant.character.escape.js

  regexp-complete:
    - match: '/(?=(?:[^/\\\[]|\\.|\[([^\]\\]|\\.)+\])+/(?![/*])[gimyu]*(?!\s*[a-zA-Z0-9_$]))'
      scope: punctuation.definition.string.begin.js
      push: regexp
    - match: 're`'
      scope: punctuation.definition.string.begin.js
      push: regexp_re

  regexp:
      - meta_scope: string.regexp.js
      - match: "(/)([gimyu]*)"
        captures:
          1: punctuation.definition.string.end.js
          2: keyword.other.js
        pop: true
      - match: '(?=.|\n)'
        push:
          - match: '(?=/)'
            pop: true
          - include: scope:source.regexp.js
  regexp_re:
      - meta_scope: string.regexp.js
      - match: "(`)"
        captures:
          1: punctuation.definition.string.end.js
        pop: true
      - match: '(?=.|\n)'
        push:
          - match: '(?=`)'
            pop: true
          - include: scope:source.regexp.js

  constructor:
    - match: '\b(new)\b\s+(?=({{identifier}}|\())'
      scope: meta.instance.constructor.js
      captures:
        1: keyword.operator.new.js
      push: constructor-name

  constructor-name:
    - match: '(?={{identifier}})'
      set:
        - meta_scope: meta.instance.constructor.js meta.function-call.constructor.js
        - include: well-known-identifiers
        - include: language-identifiers
        - match: '{{dollar_only_identifier}}'
          scope: variable.type.dollar.only.js punctuation.dollar.js
        - match: '{{dollar_identifier}}'
          scope: variable.type.dollar.js
          captures:
            1: punctuation.dollar.js
        - match: '{{identifier}}'
          scope: variable.type.js
        - match: '\.'
          scope: punctuation.accessor.js
        - include: square-brackets
        - match: '(?=\()'
          set: constructor-params
        - match: '(?=\S)'
          pop: true
    - match: '\('
      scope: punctuation.definition.group.js
      set:
        - meta_scope: meta.instance.constructor.js meta.function-call.constructor.js meta.group.js
        - match: '\)'
          scope: punctuation.definition.group.js
          set: constructor-params
        - include: expressions
    - match: '(?=\S)'
      pop: true

  constructor-params:
    - meta_content_scope: meta.instance.constructor.js
    - match: '(?=\()'
      push:
        - meta_scope: meta.function-call.constructor.js
        - include: function-call-params
    - match: '(?=\S)'
      pop: true

  unary-operators:
    - match: '~'
      scope: keyword.operator.bitwise.js
    - match: '!(?!=)'
      scope: keyword.operator.logical.js
    - match: '--'
      scope: keyword.operator.arithmetic.js
    - match: '\+\+'
      scope: keyword.operator.arithmetic.js
    - match: \.\.\.|…
      scope: keyword.operator.spread.js

  binary-operators:
    - match: \bnew\b
      scope: keyword.operator.new.js
    - match: \b(delete|instanceof)\b
      scope: keyword.operator.js
    - match: \b(in|of|typeof|void)\b
      scope: keyword.operator.js
      push: after-operator
    - match: '\.?(&|&&|\||\|\||[‖]|\b(and|or)\b)'
      scope: keyword.operator.logical.js
      push: after-operator
    - match: '=(?![=>])|←'
      scope: keyword.operator.assignment.js
      push: after-operator
    - match: |-
        (?x)
        %=   | # assignment      right-to-left   both
        &=   | # assignment      right-to-left   both
        \*=  | # assignment      right-to-left   both
        \+=  | # assignment      right-to-left   both
        -=   | # assignment      right-to-left   both
        /=   | # assignment      right-to-left   both
        \^=  | # assignment      right-to-left   both
        \|=  | # assignment      right-to-left   both
        <<=  | # assignment      right-to-left   both
        >>=  | # assignment      right-to-left   both
        >>>=   # assignment      right-to-left   both
      scope: keyword.operator.assignment.augmented.js
      push: after-operator
    - match: |-
        (?x)
        <<   | # bitwise-shift   left-to-right   both
        >>>  | # bitwise-shift   left-to-right   both
        >>   | # bitwise-shift   left-to-right   both
        &    | # bitwise-and     left-to-right   both
        \^   | # bitwise-xor     left-to-right   both
        \|     # bitwise-or      left-to-right   both
      scope: keyword.operator.bitwise.js
      push: after-operator
    - match: |-
        (?x)
        <=   | # relational      left-to-right   both
        >=   | # relational      left-to-right   both
        <    | # relational      left-to-right   both
        >      # relational      left-to-right   both
      scope: keyword.operator.relational.js
      push: after-operator
    - match: |-
        (?x)
        ===  | # equality        left-to-right   both
        !==  | # equality        left-to-right   both
        ==   | # equality        left-to-right   both
        !=     # equality        left-to-right   both
      scope: keyword.operator.comparison.js
      push: after-operator
    - match: |-
        (?x)
        /    | # division        left-to-right   both
        %    | # modulus         left-to-right   both
        \*   | # multiplication  left-to-right   both
        \+   | # addition        left-to-right   both
        -    | # subtraction     left-to-right   both
        ∪|∩|∃|∄|∈|∉|∀|≈|[⧗∋∌⌈⌊‖⍟⋯‼·⌕⚓¶≉×÷√≠≤≥⊂⊃⊄⊅]
      scope: keyword.operator.arithmetic.js
      push: after-operator
    - match: '\?|:'
      scope: keyword.operator.ternary.js
      push: after-operator

  class:
    - match: \bclass\b
      scope: storage.type.class.js
      push:
        - meta_scope: meta.class.js
        - match: '\{'
          scope: punctuation.definition.block.js
          set: class-body
        - match: '\b(extends)\b\s+(?={{identifier}})'
          captures:
            1: storage.modifier.extends.js
          push:
            - match: '{{identifier}}'
              scope: entity.other.inherited-class.js
            - match: '\.'
              scope: punctuation.accessor.js
            - match: '(?=\S)'
              pop: true
        - match: '{{identifier}}'
          scope: entity.name.type.class.js
        - include: comments

  class-body:
    - meta_scope: meta.class.js meta.block.js
    - include: comments
    - match: '\}'
      scope: punctuation.definition.block.js
      pop: true
    - include: method-declaration

  keywords:
    - match: \bthrow\b|‽
      scope: keyword.control.trycatch.js
      push: after-operator
    - match: \b(break|continue|goto)\b
      scope: keyword.control.loop.js
    - match: \b(yield)\b(?:\s*(\*))?
      captures:
        1: keyword.control.flow.js
        2: keyword.generator.asterisk.js
      push: after-operator
    - match: \b(await|return)\b|↩
      scope: keyword.control.flow.js
      push: after-operator
    - match: \b(const|let|var)\b
      scope: storage.type.js
    - match: '(?!@@)@(?<!@@)'
      scope: variable.language.this.js
    - match: '@@(?:{{identifier}})*'
      scope: variable.language.Symbol.js
    - { scope: punctuation.text.me ,match: '‡' }
    - { scope: punctuation.text.them ,match: '◍' }
    
  constants:
    - match: \b(true|false)\b|✓|✗
      scope: constant.language.boolean.js
    - match: \bnull\b
      scope: constant.language.null.js
    - match: \bundefined\b|\B∅\B
      scope: constant.language.undefined.js
    - match: \bNaN\b
      scope: constant.language.nan.js

  literal-prototype:
    - match: '({{identifier}})\s*(\.)\s*(prototype)(?=\s*(?:=|←)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))'
      scope: meta.prototype.declaration.js
      captures:
        1: support.class.js
        2: punctuation.accessor.js
        3: support.constant.prototype.js
      push:
        - meta_scope: meta.function.declaration.js
        - match: '\s*(=|←)\s*'
          captures:
            1: keyword.operator.assignment.js
        - match: '(?={{func_lookahead}})'
          set: function-declaration
        - match: '(?={{arrow_func_lookahead}})'
          set: arrow-function-declaration
        - match: '(?=.|\n)'
          pop: true
    - match: '({{identifier}})\s*(\.)\s*(prototype)\s*(\.)\s*(?={{identifier}}\s*(?:=|←)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))'
      captures:
        1: support.class.js
        2: punctuation.accessor.js
        3: support.constant.prototype.js
        4: punctuation.accessor.js
      push:
        - meta_scope: meta.function.declaration.js
        - match: '(?={{func_lookahead}})'
          set: function-declaration
        - match: '(?={{arrow_func_lookahead}})'
          set: arrow-function-declaration
        - include: function-declaration-final-identifier
    - match: '({{identifier}})(\.)(prototype)\b'
      scope: meta.prototype.access.js
      captures:
        1: support.class.js
        2: punctuation.accessor.js
        3: support.constant.prototype.js

  named-function:
    - match: '(?=(({{identifier}})\s*(\.)\s*)+({{identifier}})\s*(=|←)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))'
      push:
        - meta_scope: meta.function.declaration.js
        - match: '(?={{func_lookahead}})'
          set: function-declaration
        - match: '(?={{arrow_func_lookahead}})'
          set: arrow-function-declaration
        - include: function-declaration-identifiers
    - match: '(?=({{identifier}})\s*(=|←)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))'
      push:
        - meta_scope: meta.function.declaration.js
        - match: '(?={{func_lookahead}})'
          set: function-declaration
        - match: '(?={{arrow_func_lookahead}})'
          set: arrow-function-declaration
        - include: function-declaration-single-identifier
    - match: '(?={{func_lookahead}}(\s*\*)?\s+{{identifier}})'
      push: function-declaration

  anonymous-function:
    - match: '(?={{func_lookahead}})'
      push:
        - meta_content_scope: meta.function.anonymous.js
        - include: function-declaration
    - match: '(?={{arrow_func_lookahead}})'
      push:
        - meta_content_scope: meta.function.anonymous.js
        - include: arrow-function-declaration

  function-declaration-identifiers:
    - match: '(?={{identifier}}\s*\.)'
      push:
        - match: '\bprototype\b'
          scope: support.constant.prototype.js
        - include: language-identifiers
        - match: '{{dollar_only_identifier}}'
          scope: support.class.dollar.only.js punctuation.dollar.js
        - match: '{{dollar_identifier}}'
          scope: support.class.dollar.js
          captures:
            1: punctuation.dollar.js
        - match: '{{identifier}}'
          scope: support.class.js
        - match: '\.'
          scope: punctuation.accessor.js
          pop: true
    - include: function-declaration-final-identifier

  function-declaration-final-identifier:
    - match: '(?={{identifier}}\s*(=|←)\s*)'
      push:
        - match: '{{dollar_only_identifier}}'
          scope: meta.property.object.dollar.only.js punctuation.dollar.js entity.name.function.js
        - match: '{{dollar_identifier}}'
          scope: meta.property.object.dollar.js entity.name.function.js
          captures:
            1: punctuation.dollar.js
        - match: '{{identifier}}'
          scope: meta.property.object.js entity.name.function.js
        - match: '\s*(=|←)\s*'
          captures:
            1: keyword.operator.assignment.js
          pop: true

  function-declaration-single-identifier:
    - match: '\s*(=|←)\s*'
      captures:
        1: keyword.operator.assignment.js
    - match: '(?={{identifier}})'
      push:
        # These matches have to be duplicated to get entity.name.function
        # on the end of the scope stack since most color schemes require it
        - match: '{{dollar_only_identifier}}'
          scope: variable.other.dollar.only.js punctuation.dollar.js entity.name.function.js
        - match: '{{dollar_identifier}}'
          scope: variable.other.dollar.js entity.name.function.js
          captures:
            1: punctuation.dollar.js
        - match: '{{constant_identifier}}'
          scope: variable.other.constant.js entity.name.function.js
        - match: '{{identifier}}'
          scope: variable.other.readwrite.js entity.name.function.js
        - match: (?=.)
          pop: true

  either-function-declaration:
    - match: '(?={{func_lookahead}})'
      push: function-declaration
    - match: '(?={{arrow_func_lookahead}})'
      push: arrow-function-declaration

  function-declaration:
    - include: comments
    - match: '\b(async)\b\s*'
      scope: meta.function.declaration.js
      captures:
        1: storage.type.js
    - match: \b(function|λ)\b(\*)?\s*
      scope: meta.function.declaration.js
      captures:
        1: storage.type.function.js
        2: keyword.generator.asterisk.js
    - match: '{{identifier}}'
      scope: meta.function.declaration.js entity.name.function.js
    - include: function-declaration-parameters
    - match: '(?=\s*\{)'
      set: function-block

  arrow-function-declaration:
    - match: '\s*(=>|⇒)(?=\s*\{)'
      scope: meta.function.declaration.js
      captures:
        1: storage.type.function.arrow.js
      set: function-block
    - match: '(\s*(=>|⇒))\s*'
      captures:
        1: meta.function.declaration.js
        2: storage.type.function.arrow.js
      set: arrow-function-concise-body
    - match: '\b(async)\b\s*'
      scope: meta.function.declaration.js
      captures:
        1: storage.type.js
    - match: '{{identifier}}'
      scope: meta.function.declaration.js variable.parameter.function.js
    - include: function-declaration-parameters

  arrow-function-concise-body:
    - meta_content_scope: meta.block.js
    - match: '(?=[);}\],])'
      pop: true
    - match: '\n'
      set: arrow-function-concise-continuation
    # This custom comment match is required so that we move to the
    # arrow-function-concise-continuation context to try and continue the
    # body. Previously we didn't match the \n in the comments context, but that
    # caused completions to appear at the end of a single-line comment.
    - match: '//|#[\s#]'
      scope: punctuation.definition.comment.js
      set:
        - meta_scope: comment.line.double-slash.js
        - match: \n
          set: arrow-function-concise-continuation
    - include: expressions

  arrow-function-concise-continuation:
    # Allow newlines in a concise body if the next line is a continuation
    # of the previous via method chaining
    - match: '(?=^\s*(\.|/[/*]))'
      set: arrow-function-concise-body
    - match: '(?=.|\n)'
      pop: true

  function-block:
    - meta_scope: meta.block.js
    - match: '\}'
      scope: punctuation.definition.block.js
      pop: true
    - match: '\{'
      scope: punctuation.definition.block.js
      push:
        - match: '(?=\})'
          pop: true
        - include: statements

  function-declaration-parameters:
    - match: \(
      scope: punctuation.definition.parameters.begin.js
      push:
        - meta_scope: meta.function.declaration.js
        - match: \)
          scope: punctuation.definition.parameters.end.js
          pop: true
        - match: \.\.\.|…
          scope: keyword.operator.spread.js
        - match: '{{identifier}}'
          scope: variable.parameter.function.js
        - match: ','
          scope: punctuation.separator.parameter.function.js
        - match: '=|←'
          scope: keyword.operator.assignment.js
          push:
            - meta_scope: meta.parameter.optional.js
            - match: "(?=[,)])"
              pop: true
            - include: expressions
        - include: comments

  label:
    - match: '^\s*((?!default){{identifier}})\s*(:)'
      captures:
        1: entity.name.label.js
        2: punctuation.separator.js

  mustache:
    - match: '\{\{'
      push:
        - meta_scope: meta.tag.mustache.js
        - match: '\}\}'
          pop: true

  object-literal:
    - match: '\{'
      scope: punctuation.definition.block.js
      push:
        - meta_scope: meta.object-literal.js
        - match: '\}'
          scope: punctuation.definition.block.js
          pop: true
        - include: comments
        - match: '({{identifier}})\s*(\})'
          captures:
            1: variable.other.readwrite.js
            2: punctuation.definition.block.js
          pop: true
        - match: '({{identifier}})\s*(,)'
          captures:
            1: variable.other.readwrite.js
            2: meta.delimiter.comma.js
        - match: '({{identifier}})[ \t]*\n'
          captures:
            1: variable.other.readwrite.js
        - match: '((\$)[$\w]*)\s*(:)\s*(?=({{func_lookahead}}|{{arrow_func_lookahead}}))'
          scope: meta.function.declaration.js
          captures:
            1: meta.object-literal.key.dollar.js entity.name.function.js
            2: punctuation.dollar.js
            3: punctuation.separator.key-value.js
          push:
            - match: ':'
              scope: meta.function.declaration.js punctuation.separator.key-value.js
            - include: either-function-declaration
            - match: '(?=\S)'
              pop: true
        - match: "(?=('.*'|\".*\"|{{identifier}})\\s*:({{func_lookahead}}|{{arrow_func_lookahead}}))"
          push:
            - meta_content_scope: meta.object-literal.key.js meta.function.declaration.js
            - match: "'"
              scope: punctuation.definition.string.begin.js
              push:
                - meta_scope: string.quoted.single.js
                - meta_content_scope: entity.name.function.js
                - match: (')|(\n)
                  captures:
                    1: punctuation.definition.string.end.js
                    2: invalid.illegal.newline.js
                  pop: true
                - include: string-content
            - match: '"'
              scope: punctuation.definition.string.begin.js
              push:
                - meta_scope: string.quoted.double.js
                - meta_content_scope: entity.name.function.js
                - match: (")|(\n)
                  captures:
                    1: punctuation.definition.string.end.js
                    2: invalid.illegal.newline.js
                  pop: true
                - include: string-content
            - match: '{{identifier}}'
              scope: entity.name.function.js
            - match: '(?=:)'
              set:
                - match: '(:)\s*'
                  scope: meta.function.declaration.js
                  captures:
                    1: punctuation.separator.key-value.js
                - include: either-function-declaration
                - match: '(?=\S)'
                  pop: true
        - match: "(?=\"|')"
          push:
            - meta_scope: meta.object-literal.key.js
            - include: literal-string
            - match: '(?=.|\n)'
              pop: true
        - match: '(\$)[$\w]*(?=\s*:)'
          scope: meta.object-literal.key.dollar.js
          captures:
            1: punctuation.dollar.js
        - match: '{{identifier}}(?=\s*:)'
          scope: meta.object-literal.key.js
        - match: ':'
          scope: punctuation.separator.key-value.js
          push:
            - match: "(?=\\}|,|('[^']*'|\"[^\"]*\"|{{identifier}})\\s*:)"
              pop: true
            - include: expressions
        - include: method-declaration
        - include: comments
        - match: ','
          scope: meta.delimiter.comma.js

  method-declaration:
    - match: \b(get|set)(?!\()\b\s*
      scope: meta.function.declaration.js
      captures:
        1: storage.type.accessor.js
    - match: (\*)\s*
      scope: meta.function.declaration.js
      captures:
        1: keyword.generator.asterisk.js
    - match: \b(static)\b\s*
      scope: meta.function.declaration.js
      captures:
        1: storage.type.js
    - match: '({{identifier}})\s*'
      scope: meta.function.declaration.js
      captures:
        1: entity.name.function.js
      push:
        - include: function-declaration-parameters
        - match: '\{'
          scope: punctuation.definition.block.js
          push:
            - meta_scope: meta.block.js
            - match: '\}'
              scope: punctuation.definition.block.js
              pop: true
            - include: statements
        - include: comments
        - match: '(?=\S)'
          pop: true

  brackets:
    - include: round-brackets
    - include: square-brackets

  round-brackets:
    - match: \(
      scope: punctuation.definition.group.js
      push:
        - meta_scope: meta.group.js
        - match: \)
          scope: punctuation.definition.group.js
          set: after-identifier
        - include: expressions
    - match: \)
      scope: invalid.illegal.stray-bracket-end.js

  square-brackets:
    - match: '\['
      scope: punctuation.definition.brackets.js
      push:
        - meta_scope: meta.brackets.js
        - match: '\]'
          scope: punctuation.definition.brackets.js
          set: after-identifier
        - include: expressions

  literal-number:
    - match: '(?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)'
      scope: invalid.illegal.numeric.hex.js
    - match: '(?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)'
      scope: invalid.illegal.numeric.octal.js
    - match: |-
        (?xi)
        (?:\B[-+])?
        (?:
          \b0b[0-1]*|                 # binary
          \b0o[0-7]*|                 # octal
          \b0x[0-9a-f]*|              # hex
          (
            \B\.[0-9]+|               # e.g. .999
            \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
          )(e[-+]?[0-9]+)?            # e.g. e+123, E-123
        )
      scope: constant.numeric.js
      push: after-identifier
    - match: '(?:\B[-+]|\b)(Infinity)\b|∞'
      scope: constant.language.infinity.js
      push: after-identifier

  literal-call:
    - match: (\$)(?=\s*\()
      scope: variable.function.js variable.other.dollar.only.js punctuation.dollar.js
      push:
        - meta_scope: meta.function-call.js
        - include: function-call-params
    - match: \b(clearTimeout|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|setTimeout|super|unescape)\b(?=\()
      scope: support.function.js
      push:
        - meta_scope: meta.function-call.js
        - include: function-call-params

    - { scope: '_0' ,match: '𐅂𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_01' ,match: '𐅂𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_02' ,match: '𐅂𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_03' ,match: '𐅂𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_04' ,match: '𐅂𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_05' ,match: '𐅂𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_06' ,match: '𐅂𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_07' ,match: '𐅂𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_08' ,match: '𐅂𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_09' ,match: '𐅂𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_0a' ,match: '𐅂𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_0b' ,match: '𐅂𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_0c' ,match: '𐅂𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_0d' ,match: '𐅂𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_0e' ,match: '𐅂𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_0f' ,match: '𐅂𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0' ,match: '𐅂' }
    - { scope: '_0_1' ,match: '𐅃𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_11' ,match: '𐅃𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_12' ,match: '𐅃𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_13' ,match: '𐅃𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_14' ,match: '𐅃𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_15' ,match: '𐅃𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_16' ,match: '𐅃𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_17' ,match: '𐅃𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_18' ,match: '𐅃𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_19' ,match: '𐅃𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_1a' ,match: '𐅃𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_1b' ,match: '𐅃𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_1c' ,match: '𐅃𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_1d' ,match: '𐅃𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_1e' ,match: '𐅃𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_1f' ,match: '𐅃𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_1' ,match: '𐅃' }
    - { scope: '_0_2' ,match: '𐅋𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_21' ,match: '𐅋𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_22' ,match: '𐅋𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_23' ,match: '𐅋𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_24' ,match: '𐅋𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_25' ,match: '𐅋𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_26' ,match: '𐅋𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_27' ,match: '𐅋𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_28' ,match: '𐅋𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_29' ,match: '𐅋𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_2a' ,match: '𐅋𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_2b' ,match: '𐅋𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_2c' ,match: '𐅋𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_2d' ,match: '𐅋𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_2e' ,match: '𐅋𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_2f' ,match: '𐅋𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_2' ,match: '𐅋' }
    - { scope: '_0_3' ,match: '𐅜𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_31' ,match: '𐅜𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_32' ,match: '𐅜𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_33' ,match: '𐅜𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_34' ,match: '𐅜𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_35' ,match: '𐅜𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_36' ,match: '𐅜𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_37' ,match: '𐅜𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_38' ,match: '𐅜𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_39' ,match: '𐅜𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_3a' ,match: '𐅜𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_3b' ,match: '𐅜𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_3c' ,match: '𐅜𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_3d' ,match: '𐅜𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_3e' ,match: '𐅜𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_3f' ,match: '𐅜𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_3' ,match: '𐅜' }
    - { scope: '_0_4' ,match: '𐅝𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_41' ,match: '𐅝𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_42' ,match: '𐅝𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_43' ,match: '𐅝𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_44' ,match: '𐅝𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_45' ,match: '𐅝𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_46' ,match: '𐅝𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_47' ,match: '𐅝𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_48' ,match: '𐅝𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_49' ,match: '𐅝𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_4a' ,match: '𐅝𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_4b' ,match: '𐅝𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_4c' ,match: '𐅝𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_4d' ,match: '𐅝𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_4e' ,match: '𐅝𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_4f' ,match: '𐅝𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_4' ,match: '𐅝' }
    - { scope: '_0_5' ,match: '𐅞𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_51' ,match: '𐅞𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_52' ,match: '𐅞𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_53' ,match: '𐅞𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_54' ,match: '𐅞𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_55' ,match: '𐅞𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_56' ,match: '𐅞𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_57' ,match: '𐅞𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_58' ,match: '𐅞𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_59' ,match: '𐅞𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_5a' ,match: '𐅞𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_5b' ,match: '𐅞𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_5c' ,match: '𐅞𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_5d' ,match: '𐅞𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_5e' ,match: '𐅞𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_5f' ,match: '𐅞𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_5' ,match: '𐅞' }
    - { scope: '_0_6' ,match: '𐅦𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_61' ,match: '𐅦𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_62' ,match: '𐅦𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_63' ,match: '𐅦𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_64' ,match: '𐅦𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_65' ,match: '𐅦𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_66' ,match: '𐅦𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_67' ,match: '𐅦𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_68' ,match: '𐅦𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_69' ,match: '𐅦𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_6a' ,match: '𐅦𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_6b' ,match: '𐅦𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_6c' ,match: '𐅦𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_6d' ,match: '𐅦𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_6e' ,match: '𐅦𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_6f' ,match: '𐅦𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_6' ,match: '𐅦' }
    - { scope: '_0_7' ,match: '𐅨𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_71' ,match: '𐅨𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_72' ,match: '𐅨𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_73' ,match: '𐅨𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_74' ,match: '𐅨𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_75' ,match: '𐅨𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_76' ,match: '𐅨𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_77' ,match: '𐅨𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_78' ,match: '𐅨𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_79' ,match: '𐅨𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_7a' ,match: '𐅨𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_7b' ,match: '𐅨𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_7c' ,match: '𐅨𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_7d' ,match: '𐅨𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_7e' ,match: '𐅨𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_7f' ,match: '𐅨𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_7' ,match: '𐅨' }
    - { scope: '_0_8' ,match: '𐅩𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_81' ,match: '𐅩𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_82' ,match: '𐅩𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_83' ,match: '𐅩𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_84' ,match: '𐅩𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_85' ,match: '𐅩𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_86' ,match: '𐅩𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_87' ,match: '𐅩𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_88' ,match: '𐅩𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_89' ,match: '𐅩𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_8a' ,match: '𐅩𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_8b' ,match: '𐅩𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_8c' ,match: '𐅩𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_8d' ,match: '𐅩𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_8e' ,match: '𐅩𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_8f' ,match: '𐅩𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_8' ,match: '𐅩' }
    - { scope: '_0_9' ,match: '𐅪𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_91' ,match: '𐅪𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_92' ,match: '𐅪𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_93' ,match: '𐅪𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_94' ,match: '𐅪𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_95' ,match: '𐅪𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_96' ,match: '𐅪𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_97' ,match: '𐅪𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_98' ,match: '𐅪𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_99' ,match: '𐅪𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_9a' ,match: '𐅪𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_9b' ,match: '𐅪𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_9c' ,match: '𐅪𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_9d' ,match: '𐅪𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_9e' ,match: '𐅪𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_9f' ,match: '𐅪𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_9' ,match: '𐅪' }
    - { scope: '_0_a' ,match: '𐅫𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_a1' ,match: '𐅫𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_a2' ,match: '𐅫𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_a3' ,match: '𐅫𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_a4' ,match: '𐅫𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_a5' ,match: '𐅫𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_a6' ,match: '𐅫𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_a7' ,match: '𐅫𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_a8' ,match: '𐅫𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_a9' ,match: '𐅫𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_aa' ,match: '𐅫𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ab' ,match: '𐅫𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ac' ,match: '𐅫𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ad' ,match: '𐅫𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ae' ,match: '𐅫𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_af' ,match: '𐅫𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_a' ,match: '𐅫' }
    - { scope: '_0_b' ,match: '𐅬𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_b1' ,match: '𐅬𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_b2' ,match: '𐅬𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_b3' ,match: '𐅬𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_b4' ,match: '𐅬𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_b5' ,match: '𐅬𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_b6' ,match: '𐅬𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_b7' ,match: '𐅬𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_b8' ,match: '𐅬𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_b9' ,match: '𐅬𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ba' ,match: '𐅬𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_bb' ,match: '𐅬𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_bc' ,match: '𐅬𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_bd' ,match: '𐅬𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_be' ,match: '𐅬𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_bf' ,match: '𐅬𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_b' ,match: '𐅬' }
    - { scope: '_0_c' ,match: '𐅭𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_c1' ,match: '𐅭𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_c2' ,match: '𐅭𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_c3' ,match: '𐅭𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_c4' ,match: '𐅭𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_c5' ,match: '𐅭𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_c6' ,match: '𐅭𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_c7' ,match: '𐅭𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_c8' ,match: '𐅭𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_c9' ,match: '𐅭𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ca' ,match: '𐅭𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_cb' ,match: '𐅭𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_cc' ,match: '𐅭𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_cd' ,match: '𐅭𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ce' ,match: '𐅭𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_cf' ,match: '𐅭𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_c' ,match: '𐅭' }
    - { scope: '_0_d' ,match: '𐅮𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_d1' ,match: '𐅮𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_d2' ,match: '𐅮𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_d3' ,match: '𐅮𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_d4' ,match: '𐅮𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_d5' ,match: '𐅮𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_d6' ,match: '𐅮𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_d7' ,match: '𐅮𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_d8' ,match: '𐅮𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_d9' ,match: '𐅮𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_da' ,match: '𐅮𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_db' ,match: '𐅮𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_dc' ,match: '𐅮𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_dd' ,match: '𐅮𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_de' ,match: '𐅮𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_df' ,match: '𐅮𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_d' ,match: '𐅮' }
    - { scope: '_0_e' ,match: '𐅯𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_e1' ,match: '𐅯𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_e2' ,match: '𐅯𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_e3' ,match: '𐅯𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_e4' ,match: '𐅯𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_e5' ,match: '𐅯𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_e6' ,match: '𐅯𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_e7' ,match: '𐅯𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_e8' ,match: '𐅯𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_e9' ,match: '𐅯𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ea' ,match: '𐅯𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_eb' ,match: '𐅯𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ec' ,match: '𐅯𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ed' ,match: '𐅯𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ee' ,match: '𐅯𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ef' ,match: '𐅯𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_e' ,match: '𐅯' }
    - { scope: '_0_f' ,match: '𐅰𐅂[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_f1' ,match: '𐅰𐅃[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_f2' ,match: '𐅰𐅋[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_f3' ,match: '𐅰𐅜[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_f4' ,match: '𐅰𐅝[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_f5' ,match: '𐅰𐅞[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_f6' ,match: '𐅰𐅦[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_f7' ,match: '𐅰𐅨[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_f8' ,match: '𐅰𐅩[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_f9' ,match: '𐅰𐅪[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_fa' ,match: '𐅰𐅫[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_fb' ,match: '𐅰𐅬[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_fc' ,match: '𐅰𐅭[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_fd' ,match: '𐅰𐅮[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_fe' ,match: '𐅰𐅯[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_ff' ,match: '𐅰𐅰[𐅂𐅃𐅋𐅜𐅝𐅞𐅦𐅨𐅩𐅪𐅫𐅬𐅭𐅮𐅯𐅰]*' }
    - { scope: '_0_f' ,match: '𐅰' }

    - match: '(cb|yes|no|[abeirtxLι])(?=\s*\()'
      scope: variable.language.x.js
      push:
        - meta_scope: meta.function-call.js
        - include: function-call-params
    - match: '({{identifier}})(?=\s*\()'
      scope: variable.function.js
      push:
        - meta_scope: meta.function-call.js
        - include: function-call-params
    - match: '(?={{identifier}}\s*\.\s*{{identifier}}\s*\()'
      push:
        - match: \b(console)(?:(\.)(warn|info|log|error|time|timeEnd|assert|count|dir|group|groupCollapsed|groupEnd|profile|profileEnd|table|trace|timeStamp))?\b
          captures:
            1: support.type.object.console.js
            2: punctuation.accessor.js
            3: support.function.console.js
          set:
            - meta_scope: meta.function-call.method.js
            - include: function-call-params
        - match: \b(process)(?:(\.)(abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime))?\b
          captures:
            1: support.type.object.process.js
            2: punctuation.accessor.js
            3: support.function.process.js
          set:
            - meta_scope: meta.function-call.method.js
            - include: function-call-params

        - match: '(?={{identifier}}\s*\.)'
          push:
            - include: well-known-identifiers
            - include: language-identifiers
            - match: '{{dollar_only_identifier}}'
              scope: variable.other.object.dollar.only.js punctuation.dollar.js
            - match: '{{dollar_identifier}}'
              scope: variable.other.object.dollar.js
              captures:
                1: punctuation.dollar.js
            - match: '{{identifier}}'
              scope: variable.other.object.js
            - match: \.
              scope: punctuation.accessor.js
              pop: true
        - match: \.
          scope: punctuation.accessor.js
        - include: method-call
        - match: '(?=[^ ])'
          pop: true

  method-call:
    - match: \b(shift|sort|splice|unshift|pop|push|reverse|copyWithin|fill)\b(?=\()
      scope: support.function.mutator.js
      push:
        - meta_scope: meta.function-call.method.js
        - include: function-call-params
    - match: \b(s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur)\b(?=\()
      scope: support.function.dom.js
      push:
        - meta_scope: meta.function-call.method.js
        - include: function-call-params
    - match: '({{identifier}})\s*(?=\()'
      scope: variable.function.js
      push:
        - meta_scope: meta.function-call.method.js
        - include: function-call-params

  function-call-params:
    - match: '\)'
      scope: meta.group.js punctuation.definition.group.js
      set: after-identifier
    - match: '\('
      scope: punctuation.definition.group.js
      push:
        - meta_scope: meta.group.js
        - match: '(?=\))'
          set: after-identifier
        # Consume comma plus any whitespace to prevent whitespace from
        # getting meta scopes when they don't really apply
        - match: '(,)\s+'
          captures:
            1: meta.delimiter.comma.js
        - include: expressions

  literal-variable:
    - match: '(?={{identifier}})'
      push:
        # Once we've consumed an identifier, switch to the special context that
        # property handles ambiguous tokens including "/"
        - match: '(?!{{identifier}})'
          set: after-identifier
        - include: well-known-identifiers
        - include: language-identifiers
        - include: dollar-identifiers
        - include: support
        - match: '\b[[:upper:]][_$[:alnum:]]*(?=\s*[\[.])'
          scope: support.class.js
        - match: '{{identifier}}(?=\s*[\[.])'
          scope: variable.other.object.js
        - include: simple-identifiers

  well-known-identifiers:
    - match: \b(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest)\b
      scope: support.class.builtin.js
    - match: \b((Eval|Range|Reference|Syntax|Type|URI)?Error)\b
      scope: support.class.error.js
    - match: \b(document|window)\b
      scope: support.type.object.dom.js
    - match: \b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b
      scope: support.class.node.js
    - match: \b(_)(?=[.(])
      scope: support.class

  language-identifiers:
    - match: \b(arguments)\b
      scope: variable.language.arguments.js
    - match: \b(super)\b
      scope: variable.language.super.js
    - match: \b(this)\b
      scope: variable.language.this.js
    - match: \b(self)\b
      scope: variable.language.self.js
    - match: \b(cb|[abeirtxyLι])\b
      scope: variable.language.x.js

  dollar-identifiers:
    - match: '{{dollar_only_identifier}}'
      scope: variable.other.dollar.only.js punctuation.dollar.js
    - match: '{{dollar_identifier}}'
      scope: variable.other.dollar.js
      captures:
        1: punctuation.dollar.js

  simple-identifiers:
    - match: '{{constant_identifier}}'
      scope: variable.other.constant.js
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js

  support:
    - match: \bdebugger\b
      scope: keyword.other.js
    - match: |-
        (?x)
        \b(
          ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|
          DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|
          WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR
        )\b
      scope: support.constant.dom.js
    - match: \b(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)\b
      scope: support.module.node.js
    - match: \b(process)(?:(\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?\b
      captures:
        1: support.type.object.process.js
        2: punctuation.accessor.js
        3: support.type.object.process.js
    - match: \b(exports|module(?:(\.)(exports|id|filename|loaded|parent|children)))?\b
      captures:
        1: support.type.object.module.js
        2: punctuation.accessor.js
        3: support.type.object.module.js
    - match: \b(global|GLOBAL|γ|root|__dirname|__filename)\b
      scope: support.type.object.node.js

  object-property:
    - match: \b__proto__\b
      scope: variable.language.proto.js
    - match: \bconstructor\b
      scope: variable.language.constructor.js
    - match: \bprototype\b
      scope: variable.language.prototype.js
    - match: '{{dollar_only_identifier}}'
      scope: meta.property.object.dollar.only.js punctuation.dollar.js
    - match: '{{dollar_identifier}}'
      scope: meta.property.object.dollar.js
      captures:
        1: punctuation.dollar.js
    - match: '{{identifier}}'
      scope: meta.property.object.js
    - match: \b(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))\b
      scope: support.constant.dom.js
    - match: '(?=.|\n)'
      pop: true

  literal-punctuation:
    - match: \.
      scope: punctuation.accessor.js
      push:
      # All of these matches use set (or effectively a set via the final
      # include/match/pop construct) instead of push so that we escape this
      # accessor state once a match has been made. Otherwise identifiers
      # following method definitions or method calls will be scoped as
      # properties.
        - match: '(?=re`)'
          set:
            - meta_scope: punctuation.definition.string.begin.js
            - match: '(?=.|\n)'
              pop: true
              push: regexp_re
        - match: '(?=({{identifier}})\s*(=|←)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))'
          set:
            - meta_scope: meta.function.declaration.js
            - match: '(?={{func_lookahead}})'
              set: function-declaration
            - match: '(?={{arrow_func_lookahead}})'
              set: arrow-function-declaration
            - include: function-declaration-final-identifier
        - match: '(?={{identifier}}\s*\()'
          set:
            - include: method-call
            - match: '(?=.|\n)'
              pop: true
        - include: object-property
    - match: \;
      scope: punctuation.terminator.statement.js
    - match: ","
      scope: meta.delimiter.comma.js
