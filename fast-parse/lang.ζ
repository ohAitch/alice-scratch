#!/usr/bin/env ζ
# conceptual: word s refer to the procedure-local database of words we know about

############## app prelude #############
# Ps ← require(φ`~/code/scratch/fast-parse/parser`+'')
Ps ← require_new(φ`~/code/scratch/fast-parse/parser`)
𐅬Tag ← (…ι)⇒{ ,tag:ι[0] ,inspect:=>Tag(…ι) }

################# entry ################
# ⧫. parse_lang ==> ι=> [words,tree.*,𐅪𐅨s_s].fold((ι,f,i)=>{ f===𐅪𐅨s_s &&( γ.𐅬𐅜𐅝𐅃𐅋 = ✓ ) ;r← ;log('bench',i,bench(=> r = ι && f.parse(ι) )) ;↩ r },ι)
⧫. parse_lang ==> ι=>
	[words,tree.*,𐅪𐅨s_s]
	.fold((ι,f)=> ι && f.parse(ι) ,ι)
	|>(ι=> Tag('()',[∅,…ι]))

################# word #################
P ← Ps.string
P.err_if_partial = (a,b)⇒
	: b? P([ P.if(P(a)) ,P(b).? ]) ≫(([ˣ,ι])=> ι===∅? ‽(𐅮𐅦𐅨𐅝𐅃) : ι)
	: a===𐅮𐅦𐅨𐅝𐅃 || ‽(a)
	𐅮𐅦𐅨𐅝𐅃 ← Error()

words ← P(Set(
	,sharp= P(Set(
		,P.err_if_partial( /['"]/,P(/(['"])(((?!\1)[^\\]|\\.)*?)\1/) ≫(..2) ).Tag`string`
		,P(Set(
			,P(/[ \t\n,]+/) ≫(ι=> ι.includes(',')? 3 : ι.includes('\n')? 2 : 1 )
			,P(/#[\s#].*/) ≫(=>2) )
			).+ ≫(.fold((a,b)=> max(a,b))).Tag`space`
		,re(alt_ws`( ) [ ] { } . ‘ + - × / ^ * ∪ ∩ …← = ≠ <= >= < > ∈ ∋ & | !> |> ? : ← ←! ↩ ⇒ =>`)
		))
	,re(alt_ws`! …`)
	,P([ P.not(sharp),P.unicode_category(/[LNPMS]./) ]) ≫(..1) .+ ≫(.join(''))
	)).*.catch(P.err_if_partial) ;sharp←;

################# tree #################
P ← Ps.list
tree ← P(Set(
	,… ['()','[]','{}'].map(ι=> P([ ,ι[0],=>tree.*,ι[1] ]) ≫(..1).Tag(ι) )
	,P.filter(ι=> ! […'()[]{}'].includes(ι) )
	))

############## ops: tools ##############
is0_ ← .p[0]===𐅭
𐅭 ← P(=>‽('𐅭')) …←(𐅬Tag('𐅭'))
[ᛟ1,ᛟ2,ᛟ3] ← [1,2,3].map(ordid=> P.filter(ι=> ι.tag==='space' && ι.ι<=ordid).? …←(𐅬Tag('ᛟ'+ordid)) )
𐅮𐅦𐅭𐅜𐅬 ← =>{
	γ.𐅃𐅃𐅃𐅋𐅜 = 𐅜𐅩𐅬𐅮𐅩.map(ι=> T.Set(ι)? ι : Set(ι) )
	γ.ops = Set(…𐅃𐅃𐅃𐅋𐅜.…)
	ops.map( .inspect= λ(){↩ Tag('op',@.id) } )
	γ.as_op = ι=> Tstr(ι)? 𐅫𐅫𐅂𐅰𐅩(ι) : ι ;𐅫𐅫𐅂𐅰𐅩 ← ops.group_uniq(.id) ‘.get .f
	}

############## ops: define #############
Ptree ← memoize_proc(tag=> P.filter(.tag===tag) …←(𐅬Tag('filter',tag)) )
# op: {,id,p,map}
𐅂𐅬 ← f=> λ(ι){↩ Tag( @.id ,f(ι) ) }
𐅯R ← (id,…p)⇒{ ,id ,p ,map:𐅂𐅬(ι=>{ [a,t] ← ι.‖===1? [∅,ι[0]] : ι ;t = Tarr(t)? t[-1] : t ;↩[ a,…𐅪𐅨s_s.parse(t.ι) ] }) }
𐅯n ← (id,p)=>{ t ← is0_({p})? ..0 : ..1 ;↩{ ,id ,p ,map:𐅂𐅬(.chunk(2).map(t)) } }
𐅯2 ← (id,…ι)=> 𐅯n(id,[𐅭,…ι,𐅭])
R_ ← ι=> alt_ws(ι).map_(ι⇒{ ,id:ι ,p:[ι,ᛟ1,𐅭] ,map:𐅂𐅬(.-1) })
_2 ← ι=> alt_ws(ι).map_(ι=> 𐅯2(ι,ᛟ2,ι,ᛟ2) )

𐅜𐅩𐅬𐅮𐅩 ← [
,'.'|>(ι=> 𐅯2(ι,ᛟ2,ι,ᛟ1))
,𐅯2('‘.',ᛟ2,'‘','.',ᛟ1)
,𐅯R('()',𐅭,ᛟ1,Ptree('()'))
,𐅯R('[]',𐅭,ᛟ1,Ptree('[]'))
,𐅯R('{}',Ptree('{}'))
,𐅯R('‘[]',𐅭,ᛟ1,'‘',Ptree('[]'))
,_2`^`
,R_`!`
,_2`× /`
,Set( ,…_2`+` ,'-'|>(ι=> 𐅯2(ι,ᛟ1,ι,ᛟ2)) )
,_2`∪ ∩`
,_2`…←`
,_2`= ≠ <= >= < > ∈ ∋`
,_2`& |`
,_2`!> |>`
,𐅯n('if?',[𐅭,'?',𐅭,':',𐅭].join_(ᛟ2))
,𐅯n('if_',['if',𐅭,P(':').?,𐅭,P(/:|else/u).?,𐅭].join_(ᛟ2))
,alt_ws`⇒ =>`.map_(ι=> 𐅯2(ι,ᛟ1,ι,ᛟ2))
,_2`←`
,R_`↩ …`
,_2`:`
,{ ,id:'𐅬word' ,p:[P.not(=> ops.filter(.id!=='𐅬word').map_(𐅪Pz.X)).then(P.filter(.tag!=='space'))] ,map:..0..0 }
]
𐅮𐅦𐅭𐅜𐅬()

𐅃op< ← (it,itᵢ)=> ops.filter(sub=> 0
	|| 𐅨.get…(it,sub)
	|| !is0_(sub)
	|| ( it===sub? alt_ws`^ ← ⇒ => if?`.has(it.id)
		: 𐅰(it) > 𐅰(sub) ) )
	𐅰 ← ι=> 𐅃𐅃𐅃𐅋𐅜.findIndex(.has(ι))
	𐅨 ← new Map()
	b ← '←' ;𐅃op<(b).filter(.id!=='.') .map(a=> 𐅨.set…(a,as_op(b),✓) )
	a ← '-' ;c ← '!' ;𐅃op<(a).-(𐅃op<(c)) .map(b=> 𐅨.set…(as_op(a),b,✗) )

############## ops: parse ##############
𐅭2 ← 𐅃op< ≫ (ops=> P(=> 𐅨𐅃_(ops)(∅).? ) …←(𐅬Tag('𐅭')) )
𐅪P ← memoize_proc(op=> op.p.edge_comple(ι=>ι===𐅭) .map((ι,i)=> ι.‖===1&&ι[0]===𐅭? 𐅭2(op,i) : ι) )
𐅪Pz ← op=> 𐅪P(op) |>(ι=> is0_(op)? ι.slice(1) : ι)
𐅪Pa ← (op,a)=> 𐅪Pz(op) |>(P) ≫(ι=> op.map(!is0_(op)? ι : [a,…ι]) )
𐅮𐅜𐅯𐅜𐅫 ← memoize_proc(.filter(is0_))
𐅨𐅃_ ← memoize_proc( ops=>a=> P(ops.map_(op=> 𐅪Pa(op,a) )).chain(a=>Set( ,𐅨𐅃_(𐅮𐅜𐅯𐅜𐅫(ops))(a) ,P.of(a) )) )
𐅪𐅨s_s ← 𐅨𐅃_(ops)(∅).join2?(ᛟ3)

# next:
# ‡ making parse_lang a lot more efficient
# ⁘ you want to find the shortest substring that parses? you do this by iterating thru the file running 𐅪𐅨_ on unparsed chars & getting back parsed spans on success .i think this is a cheat but a good one

##################################### to_js ####################################
⧫. enc_id ==>{
	safe ← ι=> catch_ι(=> (0,eval)(`'use strict' ;var ${ι} = 0 ;1`))
	↩ memoize_proc(ι=> […ι].map(ι=> safe(ι)? ι : unicode_names(ι) ).join('') ) }

𐅩 ← ι=> Tag('js',ι)
ops_2 ← alt_ws`. ‘. ^ × / + - ∪ ∩ …← = ≠ <= >= < > ∈ ∋ & | !> |> ⇒ => ← :`
ops_o ← alt_ws`() [] {} ‘[] if? if_ ! ↩ …`
simple ← new Map([ ,'. .','^ **','× *','/ /','+ +','- -','= ===','≠ !==','<= <=','>= >=','< <','> >','& &&','| ||' ].map(.split(' ')))
to_js ← ι⇒
	: ι===∅? ι
	: Tstr(ι)? 𐅩( ι.re`^[1-9][0-9]*$`? ι : enc_id(ι) )
	: ι.tag==='string'? 𐅩(JSON.stringify(ι.ι))
	: ι.tag==='()' || ι.tag==='[]' || ι.tag==='{}'? ι.ι.map(to_js) |>(t=>{
		↩ t[0]===∅ && t.slice(1).every(.tag==='js')? t.slice(1).map(.ι).join(',')
			|>(t=> [ι.tag[0],t,ι.tag[1]]).join(' ') |>(𐅩)
		: Tag(ι.tag,t) })
	: simple.has(ι.tag)? ι.ι.map(to_js) |>(t=>{
		↩ t.every(.tag==='js')? 𐅩(t.map(.ι).join(' '+simple.get(ι.tag)+' '))
		: Tag(ι.tag,t) })
	: ι

################################################################################
module.exports = { ,parse:parse_lang ,𐅪𐅨s_s ,to_js }

module.if_main_do(=>{

log( parse_lang(`a b c d e f g h`) )

log( parse_lang(`
0? a← 5 : 0
a↩b … ! ↩
bar ← cmp_is ← (a,b,ι)=> => cmp.set…(as_op(a),as_op(b),ι)
if( 'handle' ) 5 else 6? 7 : 8? 9 : 0
! x + 8.{7} × b← c++,
{{ 'saddlepoint' [] () {} }} ;↩ {P([5])}
`) )

})
