############# flamegrapher #############
mkdir -p .bin
Œ∂ ' œÜ`.bin/it.js`.text = Œ∂_compile(œÜ`parse_lang.Œ∂`.text) ;' &&
browserify .bin/it.js -o bundle.js &&
rm -r .bin

0x it.js

require('/usr/local/bin/Œ∂')

##### observe parser element freqs #####
node --stack-size=10000 /usr/local/bin/Œ∂ parse_lang.Œ∂ > foo.txt

a ‚Üê œÜ`~/code/scratch/fast-parse/foo.txt`.text.split('\n').count()
sb.tab.push( a.‚Åª¬π )
sb.tab.push( [‚Ä¶[‚Ä¶a.values()].count()].map(([a,b])=>[a,a*b])._.sortBy(..0).reduce((r,a)=>( r.push([a,r[-1][1]+a[1]]) ,r ),[[null,0]]) )

# put in parser.Œ∂

P0 ‚Üê (tag,Œπ)=> new_(P) ‚Ä¶‚Üê ({tag},Œπ) |>(record)

Œ≥.êÖ≠êÖ™êÖ∞êÖÆêÖ¨ = Set()
log(êÖ≠êÖ™êÖ∞êÖÆêÖ¨.map(Œπ=> simple_hash(Œπ)+' '+Œ∂_inspect(Œπ).replace(/\n/g,' ') ).join('\n'))
_record ‚Üê (Œπ,in_,i)=> êÖ≠êÖ™êÖ∞êÖÆêÖ¨.add(in_)

_record ‚Üê (Œπ,in_,i)=> Œ≥.êÖ¨êÖúêÖùêÖÉêÖã && log([ simple_hash(êÖãêÖ©êÖ©êÖùêÖù(Œπ)),simple_hash(in_),i,Œπ.tag ].join(' ')) ;êÖãêÖ©êÖ©êÖùêÖù‚Üê npm`circular-json@0.4.0`.stringify
record ‚Üê Œπ=>{ t ‚Üê Œπ._ ;Œπ._ = Œª(‚Ä¶a){ _record(@,‚Ä¶a) ;‚Ü© t.call(@,‚Ä¶a) } ;‚Ü© Œπ }
