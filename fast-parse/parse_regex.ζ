#!/usr/bin/env ζ
P ← require('./parser')

R ← (tag,ι)=>{ r ← Tag() ;r.tag = tag ;ι!==∅ &&( r.ι = ι ) ;↩ r }
P.prototype.R = λ(tag){ tag+='' ;↩ @.map(ι=> R(tag,ι) ) }

⋯inspect ← { ,inspect(ˣ,opt,tag){↩ util.inspect(@.ι[0],opt)+opt.stylize(@.tag,'regexp')+util.inspect(@.ι[1],opt) } }

walk_regex ← (ι,f)=> ι |> (λ me(ι){ if( ι&&ι.tag ){
	clone ← _.once(=>{ ι = Tag() …← (ι) })
	# ifΔ is weird. why?
	ifΔ! ← (a,f=Object.is)=>{ for(k← in a) f(ι[k],a[k]) ||( clone() ,ι[k] = a[k] ) ;↩ ι }
	if( ι.ι ) ι = ifΔ!({ ι: Tarr(ι.ι)? ι.ι.map(me) : me(ι.ι) })
	ι = f(ι,{ifΔ!})
	} ;↩ ι })

Regex ← (=>{
	Regex ← =>Regex
	hex ← /[0-9a-fA-F]/u
	Escape ← P([ ,'\\' ,P.|([
		,P.|([ re`x(${hex}{2})` ,re`u\{(${hex}+)\}` ,re`u(${hex}{4})` ]).map(ι=> chr(parseInt(ι[1],16)))
		,P(/c([A-Z])/).map(ι=> chr( ord(ι[1]) - ord('A') + 1 ))
		,P(/[trnvf0]/).map(ι⇒ {t:'\t',r:'\r',n:'\n',v:'\v',f:'\f',0:'\0'}[ι])
		,P(/[dDwWsSbB]/).map(ι=> $({
			,d:/[0-9]/
			# this will send unintended modes
			,w:/[A-Za-z0-9_]/
			,s:/[ \f\n\r\t\v\xa0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]/
			,b:String.raw`(?<=\w)(?!\w)|(?<!\w)(?=\w)`
			,D:/[^\d]/ ,W:/[^\w]/ ,S:/[^\s]/ ,B:/(?!\b)/
			}[ι]))
		,P(/[1-9][0-9]*/).map(ι=> R(`backref`,ι|0) )
		,/[^]/
		]) ]).map(..1)
	Set_Escape ← P.|([ P('\\b').map(=>'\b') ,Escape ])
	Unit ← P.|([
		,Escape
		,P('.').map(=> $(/[^\n\r\u2028\u2029]/))
		,P(['(?:',Regex,')']).map(..1)
		# ! evidently these four are atomic, which i didn't know
		# atomic ← ι=> re`(?=(…${ι}))\1`
		,P(['(?=',Regex,')']).map(..1).R`not`.R`not`
		,P(['(?!',Regex,')']).map(..1).R`not`
		,P(['(?<=',Regex,')']).map(..1).R`behind`
		,P(['(?<!',Regex,')']).map(..1).R`behind`.R`not`
		,P(['(',Regex,')']).map(..1).R`capture`
		,P(['[' ,/\^?/ ,(=>{ t ← P.|([ Set_Escape,/[^\]]/ ]) ;↩ P.|([ P([t,'-',t]).map(ι=>[ι[0],ι[2]]) ,t ]).* })() ,']'])
			.map(([ˣ,not,ι,ʸ])=>{ r ← R(`¦`,ι.map(ι=> Tarr(ι)? R(`⋯`,ι) …← (⋯inspect) : ι )) ;if( not ) r = !ι.‖? R(`any`,∅) : R(`seq`,[ R(`not`,r) ,R(`any`,∅) ]) ;↩ r })
		,P(/[$^]/).R`^$`
		,/[^)]/
		])
	Postfix ← P([ Unit ,P([ P.|([ '*','+','?',/\{([0-9]+)(?:(,)([0-9]*))?\}/ ]) ,P('?').? ,]).? ]).map(([ι,rep])=>{
		if(! rep ) ↩ ι
		for_ ← ι=> ι==='*'? [0,∞] : ι==='+'? [1,∞] : ι==='?'? [0,1] : (=>{ [ˣ,a,two,b] ← ι ;↩ [a|0,b? b|0 : two? ∞ : a|0] })()
		↩ R(`×` ,∅)…← ({ ,ι ,for:for_(rep[0]) ,greedy:!rep[1] }) })
	Infix ← Postfix.*?.R`seq`.sep_by('|').?.map(ι=> ι.‖===1? ι[0] : R(`¦`,ι) )
	Regex ← Infix
	↩ Regex })()

regexpu ← npm`regexpu-core@4.1.3`
parse_regex ← ι=>{ [flags,ι] ← Tstr(ι)? ['',ι] : [ι.flags,ι.source]
	if( flags.re`y` ) ‽('/y is a caller thing')
	if( flags.re`g` ) ‽('/g is a caller thing')
	# g should be part of the call, not the regex (split no care, search no care, replace,match care simple, exec care weird) ,test idk
	# y: match,exec care simple ;split,search,replace,test idk

	if( flags.re`i` ) ‽('no /i support yet')
	flags.re`u` &&( ι = regexpu(ι,flags) )


	ι = Regex.parse(ι)
	walk_regex(ι,ι=> ι.≈`^$` && flags.re`m` &&( ι.ι += 'm' ) )
	↩ ι }

normalize_to_axioms_regex ← ι=> walk_regex(ι,(ι,{ifΔ!})=>{
	# these seem redundant. why?
	is_null ← ι=> Tstr(ι)? ✗ : ( (ι.≈`¦` || ι.≈`seq`) && ι.ι.every(is_null) ) || ( ι.≈`not` && is_bottom(ι.ι) )
	is_bottom ← ι=> Tstr(ι)? ✗ : ( ι.≈`¦` && ι.ι.every(is_bottom) ) || ( ι.≈`seq` && ι.ι.some(is_bottom) ) || ( ι.≈`not` && is_null(ι.ι) )

	is_1not ← ι=> Tstr(ι)? ✗ : ι.≈`seq` && ι.ι.‖===2 && ι.ι[0].≈ && ι.ι[0].≈`not` && ι.ι[1].≈ && ι.ι[1].≈`any`
	ι_1not ← .ι[0].ι

	if( is_1not(ι) && is_1not(ι_1not(ι)) ){
		ι = ι_1not(ι_1not(ι))
		# if( length(ι)===1 ) ↩ ι ;else
		↩ R(`seq`,[ R(`not`,R(`not`,ι)) ,R(`any`,∅) ])
		}

	if( ι.≈`seq` ) ι = ifΔ!( { ι: ι.ι.map…(ι=> ι.tag && ι.≈`seq`? ι.ι : [ι] ) } ,_.isEqual )

	if( (ι.≈`¦`||ι.≈`seq`) && ι.ι.‖===1 ) ↩ ι.ι[0]

	if( is_null(ι) ) ↩ R(`seq`,[])
	# if( is_bottom(ι) ) ↩ R(`not`,R(`seq`,[]))

	if( ι.≈`^$` ) ↩ $({ ,'^':'(?<![^])' ,'$':'(?![^])' ,'^m':'(?<![^\n\r])' ,'$m':'(?![^\n\r])' }[ι.ι])
	↩ ι })

$0 ← ι=> normalize_to_axioms_regex(parse_regex(ι))
𐅋𐅝𐅃𐅃𐅮 ← memoize_proc($0)
$ ← ι=>{ ι= ι |>(𐅋𐅝𐅃𐅃𐅮) ;↩ _l.cloneDeep(ι) …← ({tag:ι.tag}) } # aka parse_normalize_regex_memoized

# exports←; exports || ( exports = global )
# t ← { Regex,parse_regex,normalize_to_axioms_regex }
# exports …← (t)

𐅋𐅩𐅫𐅫𐅪 ← .map(.filter(ι=>ι!==∅).join(''))
P_ify ← ι=> walk_regex(ι,ι⇒
	: ι.≈`¦`? P.|(ι.ι)
	: ι.≈`⋯`? P.⋯(…ι.ι)
	: ι.≈`any`? P.any1
	: ι.≈`not`? ι.ι.not
	: ι.≈`×`? P(ι.ι).×(ι.for,ι.greedy) |>(𐅋𐅩𐅫𐅫𐅪)
	: ι.≈`seq`? P(ι.ι) |>(𐅋𐅩𐅫𐅫𐅪)
	# backref: P(result of a previous capture)
	# behind: reverse this parser and proceed in reverse
		# ‡ needs parser.ζ support
		# nested behind seems to be implemented as noop
	# capture: index the captures found in the regex during the regex parsing. return an array with the match results. implicit capture around the entire regex.
	: ‽(ι.tag) )

################################################################################
module.if_main_do(=>{

# _log ← =>∅
_log ← cn.log

;[
	,/(?:)(?!)(?:(|))(|)/u
	,/foo[a-x][^imu]/u
	,/^(foo)?(?:b(b.)){2,7}\baz[^]??[^\n](?:\\b.ar|\b[\ba-c-e()}][^\s]|b*?|baz(gremlin\u2424$)?(?!groblem)|)*\3(#!.*\n)?$/u
	,/\{([0-9]+)(?:(,)([0-9]*))?\}/u
	,/(['"])((\\.|(?!\1|\\)[^])*?\1)/u
	,/(?:\\[^]|(?!`|\$\{)[^])+/u
	,/(?=a|b)[^a]/u
	,/[^]\B[\d][^\D]/u
].forEach(ι=>_log( ι,/*'\n=',parse_regex(ι),*/'\n=',$0(ι),'\n' ))

;[
	,[ /[^]*?(?:#!.*)$/m ,'lambda bar lorem ipsum\nsalem peacemaker #!/usr/bin/env ζ\n{Rᵢ:R} ← it\n# 5\n\n' ]
	# ,[ /[^]*?#!.*\n/u ,'lambda bar lorem ipsum\nsalem peacemaker #!/usr/bin/env ζ\n{Rᵢ:R} ← it\n# 5\n\n' ]
	# ,[ /[^]*?#!/u ,' #!' ]
].forEach(([ι,test])=>{
	_log(ι)
	ast ← $0(ι)
	_log('=',ast)
	p ← P_ify(ast)
	_log('=',p)
	_log('using:',[test])
	_log('=',[p.exec0(test)])
	})

t ← P.|([
	,P.err_if_partial([ /'/,P(/([^]*?)'/).map(([ˣ,s])=> s) ])
	,/[^]+/
	]).catch(P.err_if_partial)
cn.log('and',t.parse("'foobar'"))
cn.log('and',t.parse("'foobar"))

})

################################### /u notes ###################################
# Without the u flag, . matches any BMP symbol except line terminators. When the ES6 u flag is set, . matches astral symbols too.
# with the u flag set, things like \a (where a is not an escape character) won’t be equivalent to a anymore.
# with u, the string is parsed as code points, without, parsed as string indices
# with u, negated char classes are for the full unicode range
# without u, theyre just for ⋯0x10000
# affects i for sure
