# conceptual: word s refer to the procedure-local database of words we know about

# modules: ✓ ✗ null ∅ ‖

# parenless function calls? mb figure those out after you get this working. this is haard.

# you want to find the shortest substring that parses? you do this by iterating thru the file running 𐅪𐅨_ on unparsed chars & getting back parsed spans on success
# i think this is a cheat but a good one

################################## app prelude #################################
Ps ← require_new(φ`~/code/scratch/fast-parse/parser`)
𐅬Tag ← (…ι)⇒{ ,tag:ι[0] ,inspect:=>Tag(…ι) }

#################################### parser ####################################
################# entry ################
⧫. parse_lang ==> ι=> [words,tree.*,𐅪𐅨s_s].fold((ι,p)=> ι && p.parse(ι) ,ι)

################# word #################
P ← Ps.string
P.err_if_partial = (a,b)⇒
	: b? P([ P.if(P(a)) ,P(b).? ]).map(([ˣ,ι])=> ι===∅? ‽(𐅮𐅦𐅨𐅝𐅃) : ι)
	: a===𐅮𐅦𐅨𐅝𐅃 || ‽(a)
	𐅮𐅦𐅨𐅝𐅃 ← Error()

words ← P(Set(
	,sharp= P(Set(
		,P.err_if_partial( /['"]/,P(/(['"])(((?!\1)[^\\]|\\.)*?)\1/).map(..2) ).Tag`string`
		,P(Set(
			,P(/[ \t\n,]+/).map(ι=> ι.includes(',')? 3 : ι.includes('\n')? 2 : 1 )
			,P(/#[\s#].*/).map(=>2) )
			).+.map(.fold((a,b)=> max(a,b))).Tag`space`
		,re(alt_ws`( ) [ ] { } . ‘ + - × / ^ * ∪ ∩ …← = ≠ <= >= < > ∈ ∋ & | !> |> ? : ← ←! ↩ ⇒ =>`)
		))
	,re(alt_ws`! …`)
	,P([ P.not(sharp),P.unicode_category(/[LNPMS]./) ]).map(..1).+ .map(.join(''))
	)).*.catch(P.err_if_partial) ;sharp←;

################# tree #################
P ← Ps.list
tree ← P(=>tree) ;tree ← P(Set(
	,… ['()','[]','{}'].map(ι=> P([ ,ι[0],tree.*,ι[1] ]).map(..1).Tag(ι) )
	,P.filter(ι=> ! […'()[]{}'].includes(ι) )
	))

############# ops: tools 1 #############
is0_ ← .p[0]===𐅭
𐅭 ← P(=>‽('_')) …←(𐅬Tag('_'))
[ᛟ1,ᛟ2,ᛟ3] ← [1,2,3].map(ordid=> P.filter(ι=> ι.tag==='space' && ι.ι<=ordid).? …←(𐅬Tag('ᛟ'+ordid)) )
Ptree ← memoize_proc(tag=> P.filter(.tag===tag) …←(𐅬Tag('filter',tag)) )
# op: {,id,p,map}
𐅯tree ← (id,p,pᵢ)⇒{ ,id ,p ,map:ι=>{ [a,t] ← ι.‖===1? [∅,ι[0]] : ι ;t = Tarr(t)? t[-1] : t ;↩[ a,…𐅪𐅨s_s.parse(t.ι) ] } }
𐅯R ← (id,…ι)=> 𐅯tree(id,ι,-1)
𐅯n ← (id,p)=>{ t ← is0_({p})? ..0 : ..1 ;↩{ ,id ,p ,map:.chunk(2).map(t) } }
𐅯2 ← (id,…ι)=> 𐅯n(id,[𐅭,…ι,𐅭])
R_ ← ι=> alt_ws(ι).map_(ι⇒{ ,id:ι ,p:[ι,ᛟ1,𐅭] ,map:ι=>ι[-1] })
_2 ← ι=> alt_ws(ι).map_(ι=> 𐅯2(ι,ᛟ2,ι,ᛟ2) )

############# ops: tools 2 #############
op_ord ← 𐅜𐅩𐅬𐅮𐅩().map(ι=> T.Set(ι)? ι : Set(ι) )
𐅪 ← ι=> op_ord.findIndex(.some(.id===ι.id))
ops ← Set(…op_ord.…)
ops.map( .inspect= λ(){↩ Tag('op',@.id) } )
as_op ← ι=> Tstr(ι)? 𐅫𐅫𐅂𐅰𐅩(ι) : ι ;𐅫𐅫𐅂𐅰𐅩 ← ops.index(.id) ‘.get .f
cmp ← new Map()
cmp_is ← (a,b,ι)=> cmp.set…(as_op(a),as_op(b),ι)
ops.map(a=> ops.map(b=> cmp_is(a,b, 𐅪(b) - 𐅪(a) ) ))
𐅃op< ← a=> ops.filter(b=> cmp.get…(as_op(a),as_op(b))<0 )

############## ops: define #############
λ 𐅜𐅩𐅬𐅮𐅩(){↩[
,'.'|>(ι=> 𐅯2(ι,ᛟ2,ι,ᛟ1))
,𐅯2('‘.',ᛟ2,'‘','.',ᛟ1)
,𐅯R('()',𐅭,ᛟ1,Ptree('()'))
,𐅯R('[]',𐅭,ᛟ1,Ptree('[]'))
,𐅯R('{}',Ptree('{}'))
,𐅯R('‘[]',𐅭,ᛟ1,'‘',Ptree('[]'))
,_2`^`
,R_`!`
,_2`× /`
,Set( ,…_2`+` ,'-'|>(ι=> 𐅯2(ι,ᛟ1,ι,ᛟ2)) )
,_2`∪ ∩`
,_2`…←`
,_2`= ≠ <= >= < > ∈ ∋`
,_2`& |`
,_2`!> |>`
,𐅯n('if?',[𐅭,'?',𐅭,':',𐅭].join2(ᛟ2))
,𐅯n('if_',['if',𐅭,P(':').?,𐅭,P(/:|else/u).?,𐅭].join2(ᛟ2))
,alt_ws`⇒ =>`.map_(ι=> 𐅯2(ι,ᛟ1,ι,ᛟ2))
,_2`←`
,R_`↩ …`
,_2`:`
]}

ops.map(ι=> cmp_is(ι,ι,1) )
alt_ws`^ ← ⇒ => if?`.map(ι=> cmp_is(ι,ι,-1) )
b ← '←' ;𐅃op<(b).filter(.id!=='.') .map(a=> cmp_is(a,b,-1) )
a ← '-' ;c ← '!' ;𐅃op<(a).-(𐅃op<(c)) .map(b=> cmp_is(a,b,1) )

𐅃𐅭op_b_ops ← memoize_proc(op=> ops.filter(is0_.!).∪( 𐅃op<(op) ) )

############## ops: parse ##############
𐅭2 ← memoize_proc(op=> P(=> 𐅪𐅨_(𐅃𐅭op_b_ops(op)).? ) …←(𐅬Tag('_')) )
𐅪P ← memoize_proc(op=>
	op.p.edge_comple(ι=>ι===𐅭)
	.map(ι=>ι.‖===1?ι[0]:ι)
	.map(ι=> ι===𐅭? 𐅭2(op) : ι)
	|>(ι=> is0_(op)? ι.slice(1) : ι)
	|>(P) )

𐅨𐅃op ← ops=>a=> P(ops.map_(op=> 𐅪P(op).map(ι=> Tag( op.id ,op.map(a===∅? ι : [a,…ι]) )))) .chain(𐅝𐅃(ops))
𐅝𐅃 ← ops=>a=>Set( ,𐅨𐅃op(ops.filter(is0_))(a) ,P.of(a) )
𐅬atom ← P.filter(.tag!=='space')
𐅪𐅨_ ← ops=> P(Set( ,𐅨𐅃op(ops)(∅) ,𐅬atom.chain(𐅝𐅃(ops)) ))
𐅪𐅨s_s ← 𐅪𐅨_(ops).join2?(ᛟ3)

########################################
;`
a↩b … ! ↩
bar ← cmp_is ← (a,b,ι)=> => cmp.set…(as_op(a),as_op(b),ι)
if( 'handle' ) 5 else 6? 7 : 8? 9 : 0
! x + 8.{7} × b← c + d
P([5])
{{ 'saddlepoint' [] () {} }}; ↩ {}

P.err_if_partial = (a,b)⇒
	: b? P([ P.if(P(a)) ,P(b).? ]).map(([ˣ,ι])=> ι===∅? ‽(𐅮𐅦𐅨𐅝𐅃) : ι)
	: a===𐅮𐅦𐅨𐅝𐅃 || ‽(a)
	𐅮𐅦𐅨𐅝𐅃 ← Error()

`|>(parse_lang)

# parse_lang(φ`~/code/scratch/fast-parse/parse_lang.ζ`.text)
