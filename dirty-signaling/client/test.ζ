#!/usr/bin/env ζ

io ← require('socket.io-client')

server ← io('http://localhost:65330/')

me←;
friend←;

server
	.on('your_name',name=>{ me = { name, addrs:[] }; cn.log('my name',name) })
	.on('they_are',ι=>{ friend = ι; cn.log('they_are',ι) })

server.emit('talk_to','7ctvbp999d')

// socket.emit('chat message', 'now im here')

// $('form').submit(λ(){
//   socket.emit('chat message', $('#m').val())
//   $('#m').val('')
//   ↩ ✗
// })
// socket.on('chat message', λ(msg){
//   $('#messages').append($('<li>').text(msg))
// })



/*
‡ im anon.
◍ hi anon, your name is random_id(10)

‡ im anon. here's some of my address.
◍ got it, i'll remember it while you're connected.

‡ im anon. here's some of my address. and that's all.
◍ got it, i'll remember it for a while. good to know.

‡ im anon. can i talk to <name>?
◍ yeah ill introduce you. here's the info i've got so far
◍ here's more info
◍ that's all

◍ hey, <name> wants to talk to you. here's the info i have on them so far.
◍ here's more info
◍ that's all
*/



















// signalingChannel ← new SignalingChannel()
// pc←;

// // call start() to initiate

// λ start() {
//   pc = new RTCPeerConnection({ iceServers:[{url:'stun:stun.l.google.com:19302'}] })

//   // send any ice candidates to the other peer
//   pc.onicecandidate = λ (evt) {
//     if (evt.candidate)
//       signalingChannel.send(JSON.stringify({
//         'candidate': evt.candidate
//       }))
//   }

//   // let the 'negotiationneeded' event trigger offer generation
//   pc.onnegotiationneeded = λ () {
//     pc.createOffer(localDescCreated, logError)
//   }

//   // once remote stream arrives, show it in the remote video element
//   pc.onaddstream = λ (evt) {
//     remoteView.src = URL.createObjectURL(evt.stream)
//   }

//   // get a local stream, show it in a self-view and add it to be sent
//   navigator.getUserMedia({
//     'audio': ✓,
//     'video': ✓
//   }, λ (stream) {
//     selfView.src = URL.createObjectURL(stream)
//     pc.addStream(stream)
//   }, logError)
// }

// λ localDescCreated(desc) {
//   pc.setLocalDescription(desc, λ () {
//     signalingChannel.send(JSON.stringify({
//       'sdp': pc.localDescription
//     }))
//   }, logError)
// }

// signalingChannel.onmessage = λ (evt) {
//   if (!pc)
//     start()

//   message ← JSON.parse(evt.data)
//   if (message.sdp)
//     pc.setRemoteDescription(new RTCSessionDescription(message.sdp), λ () {
//       // if we received an offer, we need to answer
//       if (pc.remoteDescription.type == 'offer')
//         pc.createAnswer(localDescCreated, logError)
//     }, logError)
//   else
//     pc.addIceCandidate(new RTCIceCandidate(message.candidate))
// }

// λ logError(error) {
//   log(error.name + ': ' + error.message)
// }
