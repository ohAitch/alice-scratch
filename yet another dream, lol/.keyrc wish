┌──────────────────────────────┐ ┌────────────── ⇧ ─────────────┐
│ ` 1 2 3 4 5 6 7 8 9 0 - = _  │ │ ~ ! @ # $ % ^ & * ( ) __+ _  │
│  _ q w e r t y u i o p [ ] \ │ │  _ Q W E R T Y U I O P { } | │
│  _ a s d f g h j k l ; '  _  │ │  _ A S D F G H J K L : "  _  │
│  _  z x c v b n m , . /  _   │ │  _  Z X C V B N M < > ?  _   │
└──────────────────────────────┘ └──────────────────────────────┘
┌───────────── ; ──────────────┐ ┌───────────── ⇧; ─────────────┐
│ _ _ _ _ _ _ _ _ _ _ _ _ _ _  │ │ _ _ _ _ _ _ _ _ _ _ _ _ _ _  │
│  _ X X ε ρ τ υ θ ι ω π _ _ _ │ │  _ X X Ε Ρ Τ Υ Θ Ι Ω Π _ _ _ │
│  _ α σ δ φ γ η ξ κ λ _ _  _  │ │  _ Α Σ Δ Φ Γ Η Ξ Κ Λ _ _  _  │
│  _  ζ χ ψ X β ν μ _ _ _  _   │ │  _  Ζ Χ Ψ X Β Ν Μ _ _ _  _   │
└──────────────────────────────┘ └──────────────────────────────┘
┌───────────── [ ──────────────┐ ┌───────────── ⇧[ ─────────────┐
│ _ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ⁰ ⁻ ⁼ _  │ │ _ _ _ _ _ _ _ _ _ ⁽ ⁾ _ ⁺ _  │
│  _ X ʷ ᵉ ʳ ᵗ ʸ ᵘ ⁱ ᵒ ᵖ _ _ _ │ │  _ X ᵂ ᴱ ᴿ ᵀ X ᵁ ᴵ ᴼ ᴾ _ _ _ │
│  _ ᵃ ˢ ᵈ ᶠ ᵍ ʰ ʲ ᵏ ˡ _ _  _  │ │  _ ᴬ ᴮ ᴰ X ᴳ ᴴ ᴶ ᴷ ᴸ _ _  _  │
│  _  ᶻ ˣ ᶜ ᵛ ᵇ ⁿ ᵐ _ _ _  _   │ │  _  X X X ⱽ X ᴺ ᴹ _ _ _  _   │
└──────────────────────────────┘ └──────────────────────────────┘
┌───────────── ] ──────────────┐ ┌───────────── ⇧] ─────────────┐
│ _ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉ ₀ ₋ ₌ _  │ │ _ _ _ _ _ _ _ _ _ ₍ ₎ _ ₊ _  │
│  _ X X ₑ ᵣ ₜ X ᵤ ᵢ ₒ ₚ _ _ _ │ │  _ _ _ _ _ _ _ _ _ _ _ _ _ _ │
│  _ ₐ ₛ X X X ₕ ⱼ ₖ ₗ _ _  _  │ │  _ _ _ _ _ _ _ _ _ _ _ _  _  │
│  _  X ₓ X ᵥ X ₙ ₘ _ _ _  _   │ │  _  _ _ _ _ _ _ _ _ _ _  _   │
└──────────────────────────────┘ └──────────────────────────────┘
┌───────────── ⌥ ──────────────┐ ┌───────────── ⇧⌥ ─────────────┐
│ _ _ _ _ _ _ _  _ _ _ _ _ _ _ │ │ _ _ _ _ _ _ _  _ _ _ _ _ _ _ │
│ _ _ _ ∃ _ _ § _ × _ _ _ _ _  │ │ _ _ _ ∄ _ _ _ _ ⁘ _ _ _ _ _  │
│  _ _ _ ∈ √ _ ✓ ∪ ∞ ◍ _ _ _ _ │ │  _ ℚ _ ∉ ℝ _ _ ∩ _ _ ℙ _ _ _ │
│  _ ∀ § ° _ _ _ _ _ _  “ ” ↩  │ │  _ _ _ _ _ _ _ _ _ _ _ _  _  │
│  _  _ ‡ _ _ _ _ ⧫ _ _ ÷  _   │ │  _  ℤ _ ℂ _ _ ℕ _ _ _ _  _   │
│ _ _ _ _     _    _ _ _ _ _ _ │ │ _ _ _ _     _    _ _ _ _ _ _ │
└──────────────────────────────┘ └──────────────────────────────┘
┌───────────── 1 ──────────────┐
│ _ _ _ _ _ _ _ _ _ _ _ _ _ _  │
│  _ ♒ _ ♌ ♑ ♉ _ _ _ ♏ ♓ _ _ _ │
│  _ ♈ ♐ _ _ ♊ _ _ _ ♎ _ _  _  │
│  _  _ _ ♋ ♍ _ _ _ _ _ _  _   │
└──────────────────────────────┘
┌───────────── 2 ──────────────┐
│ ̀ _ _ _ _ _ _ _ _ _ _ _ _ _  │
│  _ _ _ ́ _ _ _ _ ̂ _ _ _ _ _ │
│  _ _ ç _ _ _ _ _ _ _ _ _  _  │
│  _  _ _ _ _ _ ̃ _ _ _ _  _   │
└──────────────────────────────┘

( ^^ ) type -> expect key or list of key
expect key, app
expect key be chord
chrome -> expect tab
interpret object as “when is active”
interpret key as “when pressed”

(map key -> type str) of [[key,str]*]::>[
⌥^e  ∋
⌥^⇧e ∌
`=   ≈
⇧`=  ≉
1/   ‽
=/   ≠
=,   ≤
=.   ≥
l.   ⇒
-,   ←
-.   →
,.   ↔
.;   …
`1   ¬
-1   ₋₁
-=   ±
sd   ι
⌥r3  ∛
⌥r4  ∜
]

# math    ⊂⊃⊆⊇⊄⊅⊈⊉ ⊨⊢
# fun     卍 ⋱ ⌕ ◊⟠ ‹›⟪⟫⸨⸩ ☥ ※ ⁜ ⁞ ⁑ ⁕ ∴ ⁖ ∵ ⁘ ⁙ ⁚ ⁝ ▶ ◆ ◇ ○ ◌ ◍ ◎ ● ◯ ★ ➤
# lang++  ∋∌ ⌊⌈⌋⌉ ∕−
# lang    ☝ ≁≡≢∘⊕⨀⨁⨂⨸ ←↑→↓↔↕↖↗↘↙ ⇐⇑⇓⇔⇕⇖⇗⇘⇙ ∷ ‖ †‡ ‼⁇⁈⁉ ｢｣ ′″‴ ≪≫
# ≈ _.isEqual  ?
# ∅ ↺ ↻ ↯ ¢ £ ¥ ¿ ¡ ¶ ▲ ▼ ⌂
# 🏃⌚⌛⌨⏰⏱⏲⛏⛓⛔⛽✨🌀🌐🌡🌲🌶🍀🍎🎁🎙🎥🎧🎨🎫🎲🎵🏢🏭👀👁👂👄👍👎👤💀💠💤💧💩💬💭💰🖥🖨🗑💻📁📄📅📊📋📚📓📝📦📧📱📷🔅🔆🔇🔈🔉🔊🔋🔌🔑🔒🔔🔥🔨🔮🗜🚦🚪🚫❓❗⭕️📏📐

FnF1 -> 🔅()
FnF2 -> 🔆()
FnF3 &
	chrome & not fullscreen &
		vimeo.com -> it.eval` $('.fullscreen')[0]?.click() `
		youtube.com -> it.eval` $('.ytp-fullscreen-button')[0]?.click() `
	flowstate -> osaᵥ`system events: tell front window of (first process whose frontmost is true); set value of attribute "AXFullScreen" to not (value of attribute "AXFullScreen"); end tell`
	-> type ⌘^f
^⇪ -> type ^⇧⇥
⌘⇧3 , ⌘⇧4 , ⌘⇧^3 , ⌘⇧^4 -> shᵥ`screencapture ${≈'3' & '-io'} ${≈'^'? '-cr' : φ`~/Downloads/${Time()}.png`}`
⌥^s -> sfx`ack`; nosleep = { get: shᵥ`NoSleepCtrl -g ;:` ≈ '1', set:( shᵥ`NoSleepCtrl -abs ${t←ι?1:0},${t} ;:`; !ι && type FnF6 ) }; nosleep << `not` (retry until success, limit 1s)
⌥^l -> sfx`ack`; go_to('search','genius lyrics: '+osaᵥ`spotify: {artist,name} of current track`.join(' - '))
path_finder & ⌘⇧t -> (requires accessibility controls) osaᵥ`system events: tell process "Path Finder" to click menu item 1 of menu 1 of menu item "recently closed tabs" of menu 1 of menu item "tabs" of menu 1 of menu bar item "file" of menu bar 1`
path_finder & ⌘; -> go_to('path',osaᵥ`path finder: POSIX path of the target of the front finder window`,{in_app:'terminal'})
photo_booth & ⌘q -> type ⌘q ; φ`~/Pictures/Photo Booth Library/Pictures/*` map{ it.name≈/on ([\d\-]+) at (\d\d)\.(\d\d)(?: #)?(\d+)?(.+)$/ → [,ymd,h,m,a,b]; time`${ymd}T${h}:${m}` as UTC + (a & ' '+a) + b → name2; mv(it,φ`~/Downloads/${name2}`) }
/↩ -> sfx`ack`; go_to('search', copy())
chrome & ⌘⇧l -> type ⌘l; sfx`ack`; nice_url(it) be put in pasteboard
terminal &
	⌘r -> type[ ⌘t ⌘⇧[ ⌘w ]
	⌘⇧r -> type '. ~/.bashrc↩'
	⌘← -> type ^a
	⌘→ -> type ^e
	⌘⌫ -> type ^u
	⌥⌫ -> type ^w
⇪ -> sfx`nack`
activity_monitor & ⌘w -> type ⌘q
chrome & ⌘h -> type ⌘y

do sfx`nack` for any of
	⌘h | FnF4 | FnF5 | FnF6
	| sublime_text & ⌘⇧p
	| path_finder & ( ⌘1 | ⌘2 | ⌘3 )

⌥^b -> record mouse.pos
⌥^c ->
	set ⎋ -> stop this
	at url ≈ 'get-a-little-gold' -> every 1/3 s: mouse press for 0.05s
	at url ≈ 'epic-friends' -> every 3s: key ' ' press for 0.05s
	-> every 1/40 s: mouse click
# ⌥^c ->
# 	set ⎋ -> stop this
# 	poss ← range(0,1,0.02) map{ mouse.pos + ([300,ι*τ] (polar) as rect) } as seq * ∞
# 	mouse press for ∞
# 	every 0.01s: mouse move to poss.shift()
# ⌥^c ->
# 	set ⎋ -> stop this
# 	mouse press for ∞

chrome & ⌘⌥d -> download $('.view-image') as $('[ng-bind="::post.post_title"]').text()

chrome & f -> k ← '1'; a ← capture_screen(); type k; wait 0.07s; b ← capture_screen(); a,b as byte vectors; diff ← a - b map abs average / 0xff; type (diff > 0.009? k : '⎋')
for [key,str]::>[ f 1, g 2, b 9, h 0 ]
	chrome & key -> type str; wait 0.05s; type str

chrome & d ->
	slow_drag ← (time,path)=>{
		orig ← mouse.pos
		poss ← interpolate (linear) [[0,0],…path] map +orig over range(now(),L:time)
		mouse press for { while now() in poss: mouse move to poss.get(now()); wait 1/30 s }
		mouse move to orig }
	slow_drag(0.2,[[100,-100],[200,0]]); slow_drag(0.2,[[100,100],[200,0]]); slow_drag(0.2,[[100,0]]); slow_drag(0.2,[[0,100]]); slow_drag(0.2,[ [-50,50], [50,50], [0,100], ])

# page ← _.zip(…osaᵥ`chrome: {id,URL} of tabs of windows`.map(ι=> ι._.flatten())).map(ι⇒ {id:ι[0],url:ι[1]}).find(ι=>ι.url==='http://www.kchungradio.org/stream.html')
# osaᵥ`chrome: set t to tabs of windows whose id = ${page.id}; set r to {}; repeat with t2 in t; set r to r & t2; end repeat; set t to first item in r; t`

^⌥r -> type [ ⌘⌥i …'⇥1800↩' ]
^⌥t -> type [ ⌘⌥c …'2880↩' ]
^⌥y -> type [ ⌘⌥i …'⇥1920↩' ⌘⌥c …'1080↩' ]
^⌥w -> type [ ⌘s ↩ ⌘w ]

^⌥x -> L ← 50; for i ∈ range(L){ (type [ ⌘s ↩ ⌘w ^2 ⌘/ ↓ ⌘⇧⌥^↩ ]) interleave (wait 0.4s); wait 10s; alert`${i+1}/${L}` }
^⌥x -> L ← 15; for i ∈ range(L){ (type [ ⌘r ^⇥ ]) interleave (wait 0.2s); alert`${i+1}/${L}` }
^⌥x -> mouse.r click; wait 0.05s; mouse move by [20,5]; mouse click; wait 0.05s; mouse move back; type ⌘w; wait 1s; type ^⇥
^⌥x -> L ← 37; for i ∈ range(L){ type ⌘s; wait 0.2s; type ↩; wait 0.2s; type ⌘w; wait 1s; alert`${i+1}/${L}` }

@sublime_text {
# ------------------------------ should be builtins ------------------------------
⌘←   -> cmd.move_to({ "to":"hardbol" })
⌘→   -> cmd.move_to({ "to":"hardeol" })
⌘t   -> cmd.new_file()
⌘n   -> cmd.new_window()
^⇥   -> cmd.next_view()
^⇧⇥  -> cmd.prev_view()
⌘9   -> cmd.goto_last_tab()
⌘0   -> cmd.unbound()
⌘l   -> cmd.show_overlay({ "overlay":"goto", "show_files":true })
⇪    -> cmd.show_overlay({ "overlay":"command_palette" })
⌘p   -> cmd.noop()

# ---------------------------------- find stuff ----------------------------------
⌘f   -> cmd.show_panel({ "panel":"replace", "reverse":false })
⌘↩   -> cmd.find_all(   { "close_panel":true }, { context: [ {"key":"panel", "operand":"find"   }, {"key":"panel_has_focus"} ] } )
⌘↩   -> cmd.find_all(   { "close_panel":true }, { context: [ {"key":"panel", "operand":"replace"}, {"key":"panel_has_focus"} ] } )
⌘⇧↩  -> cmd.replace_all({ "close_panel":true }, { context: [ {"key":"panel", "operand":"replace"}, {"key":"panel_has_focus"} ] } )
⌘↩   -> cmd.find_all_under({}, { context: [ {"key":"panel", "operator":"not_equal", "operand":"replace"} ] } )
⌘m   -> cmd.find_under_expand()

# ---------------------- custon names for existing commands ----------------------
⌘⌥↑  -> cmd.swap_line_up()
⌘⌥↓  -> cmd.swap_line_down()
⌘d   -> cmd.duplicate_line()
⌘⇧d  -> cmd.find_under_expand()
^t   -> cmd.clone_file()
⌫=   -> cmd.run_macro_file({ "file":"res://Packages/Default/Delete Line.sublime-macro" })
⌘⇧[  -> cmd.fold()
⌘⇧]  -> cmd.unfold()
⌘⌥←  -> cmd.bh_key({ "lines":true, "plugin":{ "type":["__all__"], "command":"bh_modules.bracketselect", "args":{"select":"left"} } })
⌘⌥→  -> cmd.bh_key({ "lines":true, "plugin":{ "type":["__all__"], "command":"bh_modules.bracketselect", "args":{"select":"right"} } })

# -------------------------------- custom commands -------------------------------
/↩   -> cmd.open_context({ "type":"link" })
⌘⇧-  -> cmd.make_divider({ "length":30 })
⌘⇧=  -> cmd.make_divider({ "length":80 })
;'   -> cmd.inline_eval_zeta()
⌘b   -> cmd.run_project()
⌘;   -> cmd.open_context({ "type":"terminal" })
⌘v & pasteboard has (image & not string) -> image be write to φ`~/.image_cache/${random_id(6)}.png` (memoize this), which as url be to paste
⌘⌥b  -> go_to('app','terminal'); wait 0.01s; type 'eval(ζ_compile(sb()))↩'

} # -------------------------------------------------------------------------------- 
