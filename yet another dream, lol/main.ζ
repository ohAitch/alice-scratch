for φ`*`: by nearest neighbor; ι scale 1/2× →A scale 2× = ι || ‽; write A to ι

for UNIT: code
for UNIT: codefor; codefor
	codewhat
codeout
(for UNIT: codefor); codeout
for UNIT:
	codefor
	codefor
codeout


sharp ← npm`sharp@0.17.2`

image_scale ← opt=> (ι,scale)=>{
	opt.by==='nearest neighbor' || ‽

	}
φ ← ‽
write ← (ι,to)=>{

	}

for (var ι of φ`*`){ sc ← image_scale({by:'nearest neighbor'}); A ← sc(ι,1/2); sc(A,2).eq(ι) || ‽; write(A,ι) }



sharp ← npm`sharp@0.17.2`
t ← sharp('2017-03-08T21:48:39Z.png'); t.metadata().then(({width,height})=>
	t.clone().resize(width/2,null,{kernel:'cubic',interpolator:'nearest'}).toBuffer().then(ι=> sharp(ι).resize(width,null,{kernel:'nearest',interpolator:'nearest'}).raw().toBuffer().then(a=> t.clone().raw().toBuffer().then(b=> cn.log('they are',a.equals(b),global.a=a,global.b=b) )) ))

sharp ← npm`sharp@0.17.2`
t ← sharp('2017-03-08T21:48:39Z.png'); t.metadata().then(({width,height})=> t.resize(width/2,null,{kernel:'cubic',interpolator:'nearest'}).resize(width,null,{kernel:'nearest',interpolator:'nearest'}).toFile('#out.png') )

sharp ← npm`sharp@0.17.2`
t ← sharp('2017-03-08T21:48:39Z.png'); t.metadata().then(({width,height})=> t.resize(width/2,null,{kernel:'nearest'}).toFile('#out2.png') )
