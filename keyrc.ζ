#!/usr/bin/env ζ
// install https://pqrs.org/osx/karabiner/
// go to System Preferences → Keyboard → Input Sources → + → Others → Unicode Hex Input and ensure that the layout is enabled
// (alternately, run https://github.com/alice0meta/scratch/blob/master/Unicode%20Hex%20Input%20%2B/install.sh and use the .keyrc layout - it fixes a couple issues)
// run this program if ~/.keyrc has changed
// if remapping the power key, install https://github.com/pkamb/PowerKey and set it to the script ~/Documents/keyrc_power_key.sh (after having run this program at least once)

xmlbuilder ← npm('xmlbuilder@4.1.0')

as_char_as_hex ← ι => ('000'+ι.charCodeAt().toString(16)).slice(-4)

KB ← '/Applications/Karabiner.app/Contents/Library/bin/karabiner'

// -------------------------------------------------------------------------- //
parse_keyrc ← λ(src){
	homoiconic←; h_shape←; keycode←;
	transpose_str ← ι => _.zip(…ι.split('\n')).map(ι => ι.join('')).join('\n')
	parse_boards ← λ(ι){
		ι ← ι.mapcat(ι =>
			transpose_str(ι).split(/\n(?: +\n)+/).map(transpose_str).map(λ(ι){ι = ι.split('\n'); ↩ {
				root: (ι[0].match(/^┌─+ (\S+) ─+┐$/)||[,''])[1],
				keys: ι.slice(1,-1).map(ι => /^│(.+)│$/.λ(ι)[1]).map(/\S\S?/g.λ),
				} }) )
		homoiconic || (homoiconic = ι._.indexBy('root')['[homoiconic]'], h_shape = homoiconic.keys.map(ι => ι.map(()=>'_')))
		ι.filter(ι => ι.keys.length === 4).forEach(λ(ι){ι.keys = [h_shape[0], …ι.keys, h_shape[-1]]})
		ι.forEach(λ(ι){ι.keys = ι.keys._.flatten(true)})
		ι.forEach(λ(ι){ ι.root!=='⇧' && (ι.keys = ι.keys.map(ι => ι==='X'? '$ nack' : ι)) }) // let X = $ nack
		ι = ι._.without(homoiconic)
		ι.forEach(λ(ι){ι.keys = _.zip(homoiconic.keys,ι.keys).filter(ι => ι[1] !== '_')})
		keycode || (keycode = ι._.indexBy('root')['[keycode]'], ι = ι._.without(keycode))
		ι = ι.mapcat(λ(ι){ ι.keys.forEach(k => k[0] = ι.root+k[0]); ↩ ι.keys })
		↩ ι}
	tₐ ← []
	tₑ ← parse_boards(
		(src+'\n').replace(/\n{2,}/g,'\n')
		.replace(/(?:^|\n)#.*/g,'')
		.replace(/(?:^|\n)(?![│┌└]) *((?:\[\w+\])? *\S+) +(.+)/g,λ(ˣ,a,b){tₐ.push([a,b]); ↩ ''})
		.match(/(┌.+┐)\n((?:│.+│\n)+)(└.+┘)\n/g).map(ι => ι.replace(/\n$/,''))
		)
	system ← parse_boards([multiline(λ(){/*
		┌──────────────────────────────┐ ┌────────────── ⇧ ─────────────┐
		│ ` 1 2 3 4 5 6 7 8 9 0 - = _  │ │ ~ ! @ # $ % ^ & * ( ) __+ _  │
		│  _ q w e r t y u i o p [ ] \ │ │  _ Q W E R T Y U I O P { } | │
		│  _ a s d f g h j k l ; '  _  │ │  _ A S D F G H J K L : "  _  │
		│  _  z x c v b n m , . /  _   │ │  _  Z X C V B N M < > ?  _   │
		└──────────────────────────────┘ └──────────────────────────────┘
		*/})])
	mappings ← […tₐ, …tₑ]._.difference_eq(system)
	cn.log(mappings)
	↩ {keycodes:keycode.keys._.object(), mappings, homoiconic:homoiconic.keys, non_special:system._.map(0).filter(ι => ι[0]!=='⇧')} }

wat ← []

show_private_xml ← λ({keycodes, mappings, homoiconic, non_special}){t←;
	Mod ← λ({"⇧":"VK_SHIFT", "^":"ModifierFlag::CONTROL_L", "⌥":"VK_OPTION", "⌘":"VK_COMMAND", "⇧L":"ModifierFlag::SHIFT_L", "⌥L":"ModifierFlag::OPTION_L", "⌘L":"ModifierFlag::COMMAND_L", "⇧R":"ModifierFlag::SHIFT_R", "⌥R":"ModifierFlag::OPTION_R", "⌘R":"ModifierFlag::COMMAND_R", "Fn":"ModifierFlag::FN", " ":"ModifierFlag::NONE"})
	shells ← {}; shell ← λ(ι){ι = sh`/usr/local/bin/bash -ci ${ι}`; ↩ shells[ι] || (shells[ι] = 'KeyCode::VK_OPEN_URL_'+shells._.keys().length)}
	compile_mapping ← λ(ι){t←;
		compile_keystring ← λ(ι,ridiculous_trigger_flag){t←;
			wat ← ridiculous_trigger_flag?
				'03C 02C a0 83 16C 15C 14C 10C 13C 07C 01C 00C' :
				'6b 71 a0 83 16C 15C 14C 10C 13C 07C 01C 00C'
			if (t=/^FnF(.)$/.λ(ι)) {md ← []; t = wat.split(' ')[parseInt(t[1],16)-1]; ky ← [(t[2]?'Consumer':'')+'KeyCode::RawValue::0x'+t.slice(0,2)]}
			else if (ι==='DASHBOARD') {md ← []; ky ← ['KeyCode::'+ι]}
			else {t ← /F.|.[LR]|./g.λ(ι); i ← t.map(Mod).concat([undefined]).indexOf(undefined); md ← t.slice(0,i); ky ← t.slice(i)}
			if (md.length === 1 && ky.length === 0) {ky = [md[0]]; md = []}
			else md.push(' ')
			if (!{1:1,2:1}[ky.length]) ‽('[lackey] invalid keystring: '+util.inspect(ι))
			Key ← ι => ι.length > 2? ι : 'KeyCode::'+(/^\d$/.λ(ι)? 'KEY_'+ι : /^[a-z]$/.λ(ι)? ι.toUpperCase() : 'RawValue::0x'+keycodes[ι])
			↩ {cmd: {1:'__KeyToKey__', 2:'__SimultaneousKeyPresses__'}[ky.length], ι: ky.map(Key).join(',')+','+md.map(Mod).join('|')+','} }
		appdef_fix ← λ(ι){ι = ι.toLowerCase(); ↩ _.contains(['terminal','vlc','x11','system_preferences','skype','preview','quicktime','itunes','finder'],ι)? ι.toUpperCase() : {chrome:'GOOGLE_CHROME', sublime:'SUBLIMETEXT', activity_monitor:'Activity_Monitor', atom:'Atom', dock:'Dock'}[ι] || ι}
		compile_trigger ← λ(ι){t←; if (t=/^\[(\w+)\] +(.+)$/.λ(ι)) {only ← appdef_fix(t[1]); ι = t[2]}; t ← compile_keystring(ι,true); ↩ {only, ι:t.cmd+' '+t.ι} }
		compile_output ← λ(ι){t←;
			↩ (t=/^\$ (.+)$/.λ(ι))? shell(t[1]) :
			(t=/^\] (.*)/.λ(ι))? compile_keystring(t[1]).ι :
				ι._.map(ι => as_char_as_hex(ι)._.map(ι => compile_keystring('⌥L'+ι).ι))._.flatten().join('') }
		↩ {ι:(t=compile_trigger(ι[0])).ι + compile_output(ι[1]), only:t.only} }
	t ← mappings._.partition(ι => /^☝/.λ(ι[0])); touchmaps ← t[0]; mappings = t[1]
	↩ {root: {
		appdef: {
			'spotify':'com.spotify.client', 'path_finder':'com.cocoatech.PathFinder', 'photo_booth':'com.apple.PhotoBooth',
			}._.map(λ(ι,k){↩ {appname:k, equal:ι}}),
		item: [
			…touchmaps.map(λ(ι){t←;
				ι[0]+ι[1] === '☝☝] ⌘' || ‽
				//[ ☝☝⇪   ] ^⇧L⇥
				//[ ☝☝⇥   ] ^⇥
				//[ ☝☝`   ] ^`
				↩ {name:(t='notsave.'+ι[0].length+'touch'), identifier:t, autogen:homoiconic.filter(ι => !Mod(ι)).map(ι => compile_mapping([ι,'] '+({'⇥':'^⇥','⇪':'^⇧⇥','`':'^`'}[ι]||('⌘'+ι))]).ι)}
				}),
			{name:(t='notsave.power_key'), identifier:t, autogen:_.difference(homoiconic,non_special).map(ι => /^F[^n]$/.λ(ι)? ['Fn'+ι,ι] : /^[⌥⇧⌘][RL]$/.λ(ι)? [ι,ι[0]] : [ι,ι]).map(ι => compile_mapping(ι).ι+','+shell('ack; '+KB+' disable notsave.power_key'))},
			…(t=mappings.map(compile_mapping)._.groupBy('only'), […t._.omit('undefined')._.values(), t.undefined]).map(λ(ι,i){wat.push('lackey'+i); ↩ {name:'lackey'+i, identifier:'lackey'+i, only:ι[0].only, autogen:ι._.map('ι').reverse()} }),
			],
		vkopenurldef: shells._.map((name,ι) => ({name, url:{'@type':'shell', '#text':ι}})),
		}} }

// ---------------------------------- main ---------------------------------- //
φ`~/Library/Application Support/Karabiner/private.xml`.ι = show_private_xml(parse_keyrc(φ`~/.keyrc`.text))
shᵥ`${KB} reloadxml`; wat.map(ι => shᵥ`${KB} enable ${ι}`)
φ`~/Documents/keyrc_power_key.sh`.text = '#!/usr/bin/env bash -i\nack; '+KB+' enable notsave.power_key'; fs.chmodSync(φ`~/Documents/keyrc_power_key.sh`+'',0o777)

// mild todo:
// right command is maybe problematic
// if desired, more than just KeyToKey and SimultaneousKeyPresses: https://github.com/tekezo/Karabiner/tree/master/src/core/kext/RemapFunc
// 2d regexes would be wonderful for parsing .keyrc

// next: expand the function
// ]
// so that it can do all the FnF.s, so that you can remap the keyboard brightness keys to be sane
// or oh hey remap the main brightness keys to sync up with the keyboard brightness keys, and then you can just totally safely totally reuse the keyboard brightness keys
//
// also: now that it's js maybe integrate it with keyrc.ζ?
