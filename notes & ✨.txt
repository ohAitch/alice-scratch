people tell me i should make ✨ available for people
----------------------------- we shall describe it -----------------------------

degrees of "a view"
	✨ :: ✨ -> logically equivalent js
	✨⁻¹ :: js -> logically equivalent ✨
		optionally it's a sensible subset of js that many people already use (e.g. "strict mode everywhere" or "es5" or "no with")
	invertible ✨
	logic is kept on the same line
	outputs are readable in the target
	outputs are idiomatic in the target
	→ now ✨ is truely a view of js, and vice-versa

but we might want to do magical transformations
	to do magical transformations reversibly, we'd have to keep track of all steps and record this in the result

what are the big things for ✨?
	is a view of js
	reduced visual noise - e.g.: `λ(v){↩ ...}` versus `λ v:` or something else (end/fi/od/esac?). `foo(bar)` versus `foo bar`. semicolons. bulky apis (e.g. prototype, arguments, length, slicing, ===, apply, bind, typeof). destructuring (e.g. slicing, ranges). partial application. pronoun syntax.
	cps / yield / generators
	macros - whichever part it is of macros that is actually really useful (operators? hm. maybe _yes_)
	no statements

what are the big questions left unanswered?
	so what *is* up with static typing?
	do we have experience writing non-toy programs?
	& more

but perhaps es6 has features that would take care of most of these big things
---------- so here are the notes remaining which we have not yet eaten ---------

haskell lens
haskell magic
algebraic datatypes (ocaml?)
pattern matching (ocaml?) http://en.wikipedia.org/wiki/Perl_6_rules
spend some hours playing with scipy.org/getting-started.html. maybe make something with it (http://vetta.org/2008/05/scipy-the-embarrassing-way-to-code/)
async: now investigating F# and Haskell! see bookmarks. (also, c# await is nice)
we've been too ugh about js harmony. look at all of its things?
separators. which symbols and where should they be. : separatorless style works very well with atomically-delimited style. but the - general problem is that humans need delimiters? or - that the ways we express ourselves in text trip over each other and need delimiting?
custom numerical types are awesome. e.g. efficient computation with units, working conveniently with image data in hardware-friendly formats (see: julia)
http://elm-lang.org/ http://elm-lang.org/blog/Introducing-Elm-Reactor.elm
powerful collection manipulation https://en.wikipedia.org/wiki/Rank_(J_programming_language).
we look at control flow, and we see "!= null" and "!== false" as the two fundamental things (but with a blurred "!= null && !== false")

we could write a program by telling it to a human and having them execute it and/or tell me why it doesn't compile. or switch me and the human.

js parser http://marijnhaverbeke.nl/acorn/
useful pl thoughts http://lisperator.net/pltut/cps-evaluator/yield
