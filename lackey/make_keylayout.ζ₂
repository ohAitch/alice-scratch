#!/usr/bin/env ζ₂

builder ← require('xmlbuilder')
arg ← {
	keylayout: process.argv[2],
	}

hex ← λ(v,l){r ← v.toString(16); while (r.length < l) r = '0'+r; ↩ r}

id ← '-18674' // (-10000 + -Math.floor(Math.random()*10000))+''

should_change ← λ(){
	old_id←; try {old_id = fs(arg.keylayout).$.split('\n')[2].match(/id="(-\d+)"/)[1]} catch (e) {}
	if (old_id === id) ↩ false
	print('!! generating new layout !!')
	print('you may need to manually set the new layout in System Preferences → Keyboard → Input Sources and then reboot your computer')
	print('old id:',old_id)
	print('new id:',id)
	↩ true }

make_xml ← λ(){↩ builder.create(
	{keyboard:{
		'@group':126, '@id':parseInt(id), '@name':'Lackey',
		layouts:{layout:{'@first':0, '@last':17, '@modifiers':'commonModifiers', '@mapSet':'ANSI'}},
		modifierMap:{'@id':'commonModifiers','@defaultIndex':4, '#list':[
			['command?','anyShift? anyOption? command caps?'],
			['anyShift caps?'],
			['caps'],
			['anyShift? anyOption caps?'],
			['anyShift option? control command? caps?','shift? anyOption control command? caps?','anyOption? control command? caps?']
			].map(λ(v,i){↩ {keyMapSelect:{'@mapIndex':i, '#list':v.map(λ(v){↩ {modifier:{'@keys':v}}})}}}) },
		keyMapSet:{'@id':'ANSI','#list':[
			{0:'a',1:'s',2:'d',3:'f',4:'h',5:'g',6:'z',7:'x',8:'c',9:'v',10:0xa7,11:'b',12:'q',13:'w',14:'e',15:'r',16:'y',17:'t',18:'1',19:'2',20:'3',21:'4',22:'6',23:'5',24:'=',25:'9',26:'7',27:'-',28:'8',29:'0',30:']',31:'o',32:'u',33:'[',34:'i',35:'p',36:0xd,37:'l',38:'j',39:'\'',40:'k',41:';',42:'\\',43:',',44:'/',45:'n',46:'m',47:'.',48:0x09,49:' ',50:'`',51:0x08,52:0x03,53:0x1b,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:'.',66:0x1d,67:'*',68:0,69:'+',70:0x1c,71:0x1b,72:0x1f,73:0,74:0,75:'/',76:0x03,77:0x1e,78:'-',79:0,80:0,81:'=',82:'0',83:'1',84:'2',85:'3',86:'4',87:'5',88:'6',89:'7',90:0,91:'8',92:'9',93:0,94:0,95:0,96:0x10,97:0x10,98:0x10,99:0x10,100:0x10,101:0x10,102:0x10,103:0x10,104:0x10,105:0x10,106:0x10,107:0x10,108:0x10,109:0x10,110:0x10,111:0x10,112:0x10,113:0x10,114:0x05,115:0x01,116:0xb,117:0x7f,118:0x10,119:0x04,120:0x10,121:0xc,122:0x10,123:0x1c,124:0x1d,125:0x1f,126:0x1e,127:0},
			{0:'A',1:'S',2:'D',3:'F',4:'H',5:'G',6:'Z',7:'X',8:'C',9:'V',10:0xb1,11:'B',12:'Q',13:'W',14:'E',15:'R',16:'Y',17:'T',18:'!',19:'@',20:'#',21:'$',22:'^',23:'%',24:'+',25:'(',26:'&',27:'_',28:'*',29:')',30:'}',31:'O',32:'U',33:'{',34:'I',35:'P',36:0xd,37:'L',38:'J',39:'"',40:'K',41:':',42:'|',43:'<',44:'?',45:'N',46:'M',47:'>',48:0x09,49:' ',50:'~',51:0x08,52:0x03,53:0x1b,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:'.',66:'*',67:'*',68:0,69:'+',70:'+',71:0x1b,72:'=',73:0,74:0,75:'/',76:0x03,77:'/',78:'-',79:0,80:0,81:'=',82:'0',83:'1',84:'2',85:'3',86:'4',87:'5',88:'6',89:'7',90:0,91:'8',92:'9',93:0,94:0,95:0,96:0x10,97:0x10,98:0x10,99:0x10,100:0x10,101:0x10,102:0x10,103:0x10,104:0x10,105:0x10,106:0x10,107:0x10,108:0x10,109:0x10,110:0x10,111:0x10,112:0x10,113:0x10,114:0x05,115:0x01,116:0xb,117:0x7f,118:0x10,119:0x04,120:0x10,121:0xc,122:0x10,123:0x1c,124:0x1d,125:0x1f,126:0x1e,127:0},
			{0:'A',1:'S',2:'D',3:'F',4:'H',5:'G',6:'Z',7:'X',8:'C',9:'V',10:0xa7,11:'B',12:'Q',13:'W',14:'E',15:'R',16:'Y',17:'T',18:'1',19:'2',20:'3',21:'4',22:'6',23:'5',24:'=',25:'9',26:'7',27:'-',28:'8',29:'0',30:']',31:'O',32:'U',33:'[',34:'I',35:'P',36:0xd,37:'L',38:'J',39:'\'',40:'K',41:';',42:'\\',43:',',44:'/',45:'N',46:'M',47:'.',48:0x09,49:' ',50:'`',51:0x08,52:0x03,53:0x1b,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:'.',66:0x1d,67:'*',68:0,69:'+',70:0x1c,71:0x1b,72:0x1f,73:0,74:0,75:'/',76:0x03,77:0x1e,78:'-',79:0,80:0,81:'=',82:'0',83:'1',84:'2',85:'3',86:'4',87:'5',88:'6',89:'7',90:0,91:'8',92:'9',93:0,94:0,95:0,96:0x10,97:0x10,98:0x10,99:0x10,100:0x10,101:0x10,102:0x10,103:0x10,104:0x10,105:0x10,106:0x10,107:0x10,108:0x10,109:0x10,110:0x10,111:0x10,112:0x10,113:0x10,114:0x05,115:0x01,116:0xb,117:0x7f,118:0x10,119:0x04,120:0x10,121:0xc,122:0x10,123:0x1c,124:0x1d,125:0x1f,126:0x1e,127:0},
			{0:[10],2:[13],3:[15],8:[12],11:[11],14:[14],18:[1],19:[2],20:[3],21:[4],22:[6],23:[5],25:[9],26:[7],28:[8],29:[0],51:0x08,82:[0],83:[1],84:[2],85:[3],86:[4],87:[5],88:[6],89:[7],91:[8],92:[9],114:0x05,115:0x01,116:0xb,117:0x7f,118:0x10,119:0x04,120:0x10,121:0xc,122:0x10,123:0x1c,124:0x1d,125:0x1f,126:0x1e},
			{0:0x01,1:0x13,2:0x04,3:0x06,4:0x08,5:0x07,6:0x1a,7:0x18,8:0x03,9:0x16,10:'0',11:0x02,12:0x11,13:0x17,14:0x05,15:0x12,16:0x19,17:0x14,18:'1',19:'2',20:'3',21:'4',22:'6',23:'5',24:'=',25:'9',26:'7',27:0x1f,28:'8',29:'0',30:0x1d,31:0xf,32:0x15,33:0x1b,34:0x09,35:0x10,36:0xd,37:0xc,38:0xa,39:'\'',40:0xb,41:';',42:0x1c,43:',',44:'/',45:0xe,46:0xd,47:'.',48:0x09,49:' ',50:'`',51:0x08,52:0x03,53:0x1b,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:'.',66:0x1d,67:'*',68:0,69:'+',70:0x1c,71:0x1b,72:0x1f,73:0,74:0,75:'/',76:0x03,77:0x1e,78:'-',79:0,80:0,81:'=',82:'0',83:'1',84:'2',85:'3',86:'4',87:'5',88:'6',89:'7',90:0,91:'8',92:'9',93:0,94:0,95:0,96:0x10,97:0x10,98:0x10,99:0x10,100:0x10,101:0x10,102:0x10,103:0x10,104:0x10,105:0x10,106:0x10,107:0x10,108:0x10,109:0x10,110:0x10,111:0x10,112:0x10,113:0x10,114:0x05,115:0x01,116:0xb,117:0x7f,118:0x10,119:0x04,120:0x10,121:0xc,122:0x10,123:0x1c,124:0x1d,125:0x1f,126:0x1e,127:0},
			].map(λ(o,i){↩ {keyMap:{'@index':i, '#list':_.pairs(o).map(λ(kv){t ← {'@code':kv[0]}; if (!(kv[1] instanceof Array)) t['@output'] = '&#x'+hex(typeof(kv[1])==='string'? kv[1].charCodeAt(0) : kv[1],4)+';'; else t['@action'] = kv[1][0]; ↩ {key:t}})}}})
		},
		actions:_.range(0,16).map(λ(id){↩ {action:{'@id':id,'#list':[].concat(
			[{when:{'@state':'none', '@next':256*17+1+id}}],
			_.range(0,16).map(λ(state){↩ {when:{'@state':256*state+1, '@through':256*(state+1), '@multiplier':16, '@output':'&#x'+hex((state*0x1000)+id,4)+';'}} }),
			[	{when:{'@state':256*16+1, '@through':256*17   , '@multiplier':16, '@next':1+id}},
				{when:{'@state':256*17+1, '@through':256*17+16, '@multiplier':16, '@next':256*16+1+id}} ]
			) }}})
		}},
		{version:'1.1', encoding:'UTF-8'} )
	.dtd('file://localhost/System/Library/DTDs/KeyboardLayout.dtd').up()
	.end({pretty:true})
	.replace(/&amp;/g,'&')
	.replace(/&apos;/g,'\'')
	.replace(/&gt;/g,'>')
	}

// --------- main --------- //
if (should_change()) fs(arg.keylayout).$ = make_xml()
