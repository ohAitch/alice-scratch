goal: to create a new way of interacting with existing javascript and humans much more painlessly and effectively (in this domain of javascript) - and regardless of whether we realize that, to gain the experience which is gained by attempting it

but
purpose

i'm refactoring acorn.js
and - i - i want to just _pick up_ the damn graph and _splay it out all over the walls and floor and ceiling and_ MOVE the components DIRECTLY instead of this utter "text editor" bullshit

(oh hey, http://blogs.perl.org/users/jeffrey_kegler/2013/05/why-marpa-works-table-parsing.html is cool)
(oh hey http://www.cs.cornell.edu/projects/sherrloc/)
(oh hey http://elm-lang.org/blog/compiler-errors-for-humans)
(oh hey, data visualization)

-------------------- for the stated goal, the big things are -------------------

is a view of js
reduced visual and/or semantic noise - e.g.:
	[es6 arrows (only some?)] `λ(v){↩ ...}` versus `λ v:` or something else (end/fi/od/esac?)
	`foo(bar)` versus `foo bar`
	semicolons
	[es6 some] bulky apis (e.g. prototype, arguments, length, slicing, ===, apply, bind, typeof)
	[es6 some] destructuring (e.g. slicing, ranges)
		https://stackoverflow.com/questions/24330902/how-does-term-rewriting-based-evaluation-work/24776426#24776426
	separators: atomically-delimited -> separatorless. but: humans text redundant and fuzzy and trip over each other and so needs delimiting? or PEG magic?
	partial application
	pronoun syntax
	statements
	macros / whichever part it is of macros that is actually really useful (operators? hm. maybe _yes_)
	[es6 most] cps / yield / generators
	& more?

-------------------------------- what is a view? -------------------------------

degrees of "a view"
	✨ :: ✨ -> logically equivalent js
	✨⁻¹ :: js -> logically equivalent ✨
		optionally it's a sensible subset of js that many people already use (e.g. "strict mode everywhere" or "es5" or "no with")
	invertible ✨
	logic is kept on the same line
	outputs are readable in the target
	outputs are idiomatic in the target
	-> now ✨ is truely a view of js, and vice-versa

but we might want to do magical transformations
	to do magical transformations reversibly, we'd have to keep track of all steps and record this in the result

proposal: ⎋tag system wherein /⎋[^\s⎋]+/ forms a postfix annotation to record information that would have been lost in a transformation

js_rewrite: _x == (null|true|false) <-> _x ∈ \1 ⎋=
js_rewrite: _x == undefined <-> _x == null ⎋u
js_rewrite: _x === null || _x === undefined || _x === false <-> !_x
js_rewrite: _x === null || _x === undefined <-> _x ∈ null
js_rewrite: !_x <-> !_x ⎋f
js_rewrite: void 0 <-> undefined ⎋v
js_rewrite: void _x <-> (_x,undefined)⎋v

-> _x != null && _x !== false <-> !!_x ⎋=
-> _x !== null && _x !== undefined <-> _x ∉ null
-> _x != void 0 <-> _x ∉ null ⎋=uv
-> _x != void 5 <-> _x ∉ (5,null) ⎋=uv

------------------------ important implementation notes ------------------------

we look at control flow, and we see "!= null" and "!== false" as the two fundamental things (but with a blurred "!= null && !== false")
now that es6 is existing, we need to account for http://git.io/es6features
we could write a program by telling it to a human and having them execute it and/or tell me why it doesn't compile. or switch me and the human.

------------------------------------ <edge> ------------------------------------

since it's a view - can we *actually* define the language incrementally this time?
a set of rewrite rules might just do it

we could test this idea without thinking about it any further by writing a ✨ that just does one or a few simple rules and then applying it to some javascript corpuses

initial testing result: existing parsers are shitty. ✨ probably depends entirely on having a very good parser - should we start working on that?

aaaa making this truly invertible is going to be annoying. i'm going to have to handle all weird whitespace characters perfectly and stuff. :(

alright - @2015-03-01 we're excited about this but we don't have time for it now.
acorn looks like a good parser to base things off. (do look at the branches and see if there's some useful magical code not in master)
	alternatively, https://github.com/jneen/parsimmon
	es6 grammar https://people.mozilla.org/~jorendorff/es6-draft.html#sec-lexical-grammar
