# i need this to continue crypto.ζ

# a <- b =
# 	b is a description of a
# 	b may replace a
# 	a is defined as b
# 	put b in a

ℕ = Cardinal = {0} closed by [+1]
ℕ⁺ = N - {0}
ℤ = Integer = equivalence over (1 -1)×ℕ by [=]
ℚ = Rational = equivalence over[ (p q)∈(ℤ ℕ⁺) ]by[ a.p×b.q commutes ]

ℕ₁₀ <- ℕ base 10 <- js int32
ℚ₁₀ <- ℚ base 10 <- js number

# sample
# ℕ₁₀ <- \d+
# # 042 -> 42
# # [green]042 -> [yellow]42
# # "042" -> ℕ₁₀ 42
# # String 042 -> ℕ₁₀ 42
# ℕ₁₀ -> \d+
# # ‡ 042
# # ->
# # ◍ [ 042 -> 42 ]? it is not invertible
# # ◍ see [ ℕ₁₀ [<- & ->] \d+ ]
# ℕ₁₀ <-> \d+
# # ◍ see [ ℕ₁₀ <-> \d+ ]

(
ℕ₁₀ <-> \d+
ℚ₁₀ <-> .\d+
) -> Clause_0

(
factorial(ι) <-> ι∈Clause_0 !
× = js *
÷ = js /
) -> Clause_1

.6×.6×.4×3!÷[2!×1!]
# .432

# what is:
# 	ℕ
# 	base
# 	<-
# 	js.int32
# 	& other basics
# what is:
# 	closed by
# 	equivalence over _ by _
# 	commutes
# 	which
# 	∈
# 	(p q)
# 	{0}
# 	[+1]
# 	a.p
# 	×
# 	regex
# 	& other basics

# https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form
# nice_url is a nice parser puzzle

# ------------------------------------- ideas ------------------------------------

# [ _ ]
# ! _
# - _
# ⋯ _
# _ ‖
# _ ^ _
# _ × _
# _ ÷ _
# _ + _
# _ - _
# _ < _
# _ > _
# _ ≥ _
# _ ≤ _
# _ = _
# _ ≠ _
# _ & _
# _ | _
# _ ← _
# _ ? _ : _

# # 800 801 .`\\.. .\\[ .(
# # 390 391 !. -.
# # 380 381 .×. .÷.
# # 370 371 .+. .-.
# # 350 350 .=. .≠. .<. .>. .≤. .≥.
# # 340 341 .&. .|.
# # 421 420 .?.:.
# # 323 320 .←.
# # 300 301 \\`. ~. ~….
# # 290 291 !_. -_.
# # 280 281 ._×_. ._÷_.
# # 270 271 ._+_. ._-_.
# # 250 250 ._=_. ._≠_. ._<_. ._>_. ._≤_. ._≥_.
# # 240 241 ._&_. ._|_.
# # 231 230 .`?_._:_.
# # 223 220 ._←_.
# # 210 211 λ.`. if`.[`:]`.[[`,]`else`.] while`.[`:]`. return[`.] try`.[[`,]`catch`.][[`,]`finally`.] new.`.
# # 200 201 \\`_. ~_. ~…_.
# # 100 100 , :


# what if i want to say
# 0.6*0.6*0.4 * fact(3)/(fact(2)*fact(1))
# then i want to, um, i think i have to solve the
# [Times [Rational 6 10] [Rational 6 10] [Rational 4 10] [Factorial 3] [Times⁻¹ [Times [Factorial 2] [Factorial 1]]]]
# [Times [Rational 6 10] [Rational 6 10] [Rational 4 10] 6 [Times⁻¹ [Times 2 1]]]
# [Times [Rational 6 10] [Rational 6 10] [Rational 4 10] 6 [Times⁻¹ 2]]
# [Times [Times 6 [Times⁻¹ 10]] [Times 6 [Times⁻¹ 10]] [Times 4 [Times⁻¹ 10]] 6 [Times⁻¹ 2]]
# [Times 6 6 4 6 [Times⁻¹ [Times 10 10 10 2]]]
# [Times [π 5 3] [π -4 0 -3]]
# [π 1 3 -3]
# = 0.432
# or
# [Times [π 0 1 -1] [π 0 1 -1] [π 1 0 -1] [Factorial 3] [Times⁻¹ [Times [Factorial 2] [Factorial 1]]]]
# [Times [π 0 1 -1] [π 0 1 -1] [π 1 0 -1] [π 1 1] [Times⁻¹ [Times [π 1] [π]]]]
# [Times [π 0 1 -1] [π 0 1 -1] [π 1 0 -1] [π 1 1] [Times⁻¹ [π 1]]]
# [Times [π 0 1 -1] [π 0 1 -1] [π 1 0 -1] [π 1 1] [π -1]]
# [π 1 3 -3]
# = 0.432

# but also
# [Times [Number "0.6"] [Number "0.6"] [Number "0.4"] [Factorial [Number "3"]] [Times⁻¹ [Times [Factorial [Number "2"]] [Factorial [Number "1"]]]]]
# uh, or something
# which
# uh
# .6×.6×.4 × 3!÷[2!×1!]
# this is a computation. tell user result.
# context includes computation = #opaque incl
# 	\d+ = Natural_Number
# 	\.\d+ = Decimal
# 	above = [[[[.6 × .6] × .4] × [! 3]] ÷ [[! 2] × [! 1]]]
# context includes ! Maybe = [= Nothing]
# context includes ! Boolean = not
# context includes Integer ! = factorial
# context includes Number ⊃ Integer
# context includes a ÷ b = [a × [×⁻¹ b]]
# context includes Integer ⊃ Rational
# context includes Decimal ⊃ Rational
# context includes Rational × Rational = #opaque
# context includes ×⁻¹ Rational = #opaque

# oh oops, order of operations is dependent on some of the context that comes after it
# contextually fucking with order of operations is extra weird though, its parsing fuckery
# gotta think about it i guess

# ⋯10 × ⋯10 * a,b=> a ^ ln b
# this is a computation. tell user result.
# context includes computation = #opaque incl
# 	above grammar
# 	above = [[[⋯ 10] × [⋯ 10]] * [[a,b] => [a ^ [ln b]]]]
# 	again, only because of already established things about order of operations
