#!/usr/bin/env node
var fs = require("fs")
var _ = require("underscore")

var seq = function(v){return v.split('')}
var chr = function(v){return String.fromCharCode(v)}
var err = function(v){throw(Error(v))}
var own = function(o,m){return Object.prototype.hasOwnProperty.call(o,m)? o[m] : undefined}
var is = function(v){return v!==undefined}
//Array.prototype.m_concat = function(){return Array.prototype.concat.apply([],this)}

var js_valid_symbol = {is_part:function(v){return !!v.match(/[\wξηφ>\/≠=+~]/)}}

var tokenize = function(s){
	var r = []
	//var pos = [1,1,1]
	var any = undefined; var first_type = undefined
	//var spos = function(v){if (!v.SPACE) v.pos = pos; return v}
	/*var increment_pos = function(s){
		seq(s).map(function(v){
			if (v==='\n') pos = [pos[0]+1,1,1]
			else if (v==='\t') pos = [pos[0],pos[1]+1,1]
			else pos = [pos[0],pos[1],pos[2]+1]
			}) }*/
	var start_any = function(){any = s[0]; first_type = js_valid_symbol.is_part(s[0]); s = s.slice(1)}
	//var end_any = function(){r.push(spos(S(any))); increment_pos(any); any = undefined}
	var end_any = function(){r.push(S(any)); any = undefined}
	while (s!=='') {
		var t = reader_macros.map(function(v){var t=undefined; return (t=s.match(v[0]))? [t,v[1](t)] : undefined}).filter(function(v){return v})[0]
		//if (t) {var m = t[0]; var v = t[1]; if (is(any)) end_any(); r.push(spos(v)); s = s.slice(m[0].length); increment_pos(m[0])}
		if (t) {var m = t[0]; var v = t[1]; if (is(any)) end_any(); if (v!==SPACE) r.push(v); s = s.slice(m[0].length)}
		else {if (is(any)) {if (js_valid_symbol.is_part(s[0]) === first_type) {any += s[0]; s = s.slice(1)} else {end_any(); start_any()}} else start_any()}
	}
	//pr('tokens:',r.join(' ')) //!
	//err('.')
	return r}

//var subscript_ops = genex_2a(~/^-?[\da-z]$/).map(function(v){return seq(v).map(unicode.subscript)}).filter(function(v){return v.every(function(v){return v})}).map(function(v){return v.join('')})

var S = function(v){return {s:v}}//new Symbol(v)}

// give tokens nice properties
var SPACE = {SPACE:1}//; set_to_s(SPACE, function(){return '␣'})
//var Symbol = function(name){this.s = name}//; set_to_s(Symbol.prototype, function(){return '`'+this.name+'@'+this.pos})
//var Quote = function(value){this.v = value}//; set_to_s(Quote.prototype, function(){return '`'+repr_js(this.quote)+'@'+this.pos})

var reader_macros = [
[(/^(\/\/.*|\/\*[^]*?(\*\/|$)|[ \t\n\x0c\x0d])+/), function(){return SPACE}],
[(/^(['"])((.*?[^\\])?(\\\\)*)\1/), function(v){return {v:(v[2].match(/\\u....|\\x..|\\.|./g)||[]).map(function(v){return v.length>2? chr(parseInt(v.slice(2),16)) : v.length===2? {'\'':'\'','\"':'\"','\\':'\\','b':'\b','f':'\f','n':'\n','r':'\r','t':'\t','v':'\v'}[v[1]] || err('bad escape: '+v) : v}).join('')}}],
//[(/^~\/((?:[^\/\\\[]|(?:\\.)|\[(?:[^\\\]]|(?:\\.))*\])*)\/([a-z]*)/), function(v){return {v:eval('/'+v[1]+'/'+v[2])}}],
[(/^~\/((?:[^\/\\\[]|(?:\\.)|\[(?:[^\\\]]|(?:\\.))*\])*)\/([a-z]*)/), function(v){return {s:'/'+v[1]+'/'+v[2]}}],
//[new RegExp('^('+[['~@','¬in'],seq('()[]{}‹›`~?:,;')/*,subscript_ops*/].m_concat().join('|').replace(/([()\[\]{}?])/g,'\\$1')+')'), function(v){return S(v[1])}],
[(/^([()?:,;])/), function(v){return S(v[1])}],
[(/^(0[xX][\da-fA-F]+|\d+[rR][\da-zA-Z]+|(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)/), function(v){return {v:parseFloat(v[0])}}],
]

var groups_expand = function(tokens){
	var groups = {'(':')'}
	var group_expand = function(g,l){
		//var check = function(){if (l.length===0) err('group is not closed @'+g.pos)} //! this is bad at telling the user which group was unclosed
		//check()
		var r = []; while(true){
			if (l[0].s) {
				if (l[0].s === groups[g.s]) return [r,l.slice(1)]
				if (own(groups,l[0].s)) {var t = group_expand(l[0],l.slice(1)); r.push(t[0]); l = t[1]; /*check();*/ continue}
				}
			r.push(l[0]); l = l.slice(1)/*; check()*/}}
	var r = group_expand(S('('),tokens.concat([S(')')])); if (!(r[1].length === 0)) err(r); return r[0]}

var φ_f = function(in_,out){fs["writeFileSync"](out+"/"+in_+"c.η",JSON["stringify"](groups_expand(tokenize(fs["readFileSync"](in_)+""))[0],null,"\t"))}
φ_f(process["argv"][2],process["argv"][3])