#!/usr/bin/env ζ

‽('sad')

pixels = {
	read: λ(ι,type='rgb',cb){npm('get-pixels@3.2.3')(φ(ι)+'',λ(e,{data:D,shape:[X,Y,depth],stride}){X|=0;Y|=0
		// maybe just use Symbol.iterator ?
		;(depth === 4 && stride._.isEqual([4,X*4,1])) || ‽
		if      (type==='rgba') ι ← D
		else if (type==='rgb' ) {ι ← Buffer(X*Y*3); pˡ←0; pᵈ←0; for(i←0;i<X*Y;i++) {ι[pˡ++]=D[pᵈ++]; ι[pˡ++]=D[pᵈ++]; ι[pˡ++]=D[pᵈ++]; pᵈ++}}
		else if (type==='grey') {ι ← Buffer(X*Y); for(i←0;i<X*Y;i++) ι[i] = D[i*4]}
		else ‽
		cb(e,{X,Y,ι}) }) },
	show: λ({ι,X,Y},type='rgb',to){
		t ← new (npm('pngjs@2.2.0').PNG)({width:X, height:Y}); D ← t.data; p←0
		if      (type==='rgba') (Buffer.isBuffer(ι)? ι : Buffer(ι)).copy(t.data)
		else if (type==='rgb' ) for(i←0;i<ι.length;) {D[p++] = ι[i++]; D[p++] = ι[i++]; D[p++] = ι[i++]; D[p++] = 0xff}
		else if (type==='grey') for(i←0;i<ι.length;) {D[p++] =         D[p++] =         D[p++] = ι[i++]; D[p++] = 0xff}
		else ‽
		t.pack().pipe(fs.createWriteStream(φ(to)+'')) },
	}

median ← λ(ι,ish){ι = ι._.sortBy(); ↩ ι[ι.length*(ish||0.5) |0]}
median_abs_dev ← λ(ι,ish){t ← median(ι); ↩ median(ι.map(ι => abs(ι-t)), ish)}

var [,,in_,out] = process.argv

pixels.read(in_,'grey',λ(e,{X,Y,ι}){
	// avg_nearby ← λ(x,y,L){yᵃ←max(0,y-L); yᵇ←min(Y,y+L); xᵃ←max(0,x-L); xᵇ←min(X,x+L); r←0; i←0; for(y←yᵃ;y<yᵇ;y++) for(x←xᵃ;x<xᵇ;x++) {i++; r += ι[y*X+x]}; ↩ r / i}
	dist_nearby ← λ(x,y,L){yᵃ←max(0,y-L); yᵇ←min(Y,y+L); xᵃ←max(0,x-L); xᵇ←min(X,x+L); r ← Array(0x100).fill(0); for(y←yᵃ;y<yᵇ;y++) for(x←xᵃ;x<xᵇ;x++) r[ι[y*X+x]]++; t ← r.reduce(λ(a,b){↩a+b}); ↩ r.map(ι => ι/t)}

	// D ← dist_nearby(0,0,1e9)
	bw_nearby ← λ(x,y,L){
		ι ← dist_nearby(x,y,L)
		// ι = _.zip(D,ι).map(λ([a,b]){↩ a*0.01 + b*0.99})
		t ← ι._.pairs()._.sortBy(1).map(ι => +ι[0]).slice(1,-1)
		a ← t.pop(); as ← [a,a]
		b ← t.reverse().find(λ(ι){
			if (as[0] <= ι && ι <= as[1]);
			else if (ι < as[0] && as[0] <= ι+10) as[0] = ι
			else if (ι-10 <= as[1] && as[1] < ι) as[1] = ι
			else ↩ true })
		if (b === undefined) ↩;
		if (b < a) {t ← a; a = b; b = t}
		saddle_min ← _.min(ι.slice(a+1,b))
		// black ← a+1 - ι.slice(0,a+1).reverse().findIndex(t => t <= (ι[a] - saddle_min) * 0.2 + saddle_min)
		black ← a//+1 + ι.slice(a+1)            .findIndex(t => t <= (ι[a] - saddle_min) * 0.2 + saddle_min)
		white ← b+1 - ι.slice(0,b+1).reverse().findIndex(t => t <= (ι[b] - saddle_min) * 0.09 + saddle_min)
		↩ [black,white] }

	// // G ← 32; D ← [0.62, 0.93] // should really look at the variance or smth
	// // G ← 8; D ← [0.62, 0.93] // should really look at the variance or smth
	// D ← [0.5, 0.95] // should really look at the variance or smth
	// avg ← avg_nearby(0,0,1e9)
	// // avgs ← _.range(0,Y,G).map(y => _.range(0,X,G).map(x => {t ← round(G/2); ↩ avg_nearby(x+t,y+t,t*2)}))
	// // fn ← λ(ι,x,y){↩ (ι/max(avg*0.5,min(avg*1.5, avgs[y/G|0][x/G|0] )) - D[0]) / (D[1] - D[0])}
	// fn ← λ(ι,x,y){↩ (ι/max(avg*0.6,min(avg*100, avg_nearby(x,y,4) )) - D[0]) / (D[1] - D[0])}

	G ← 128; bws ← _.range(0,Y,G).map(y => _.range(0,X,G).map(x => {t ← round(G/2); ↩ bw_nearby(x+t,y+t,t*2)}))
	med ← []
	;[0,1].map(λ(k){
		t ← bws.mapcat(ι => ι._.map(k))._.filter(); med[k] = [median(t), t.length===1? 1e9 : median_abs_dev(t,0.8)]
		bws = bws.map((ι,y) => ι.map(λ(ι,x){if (ι && ((x < 4 && y > 20) || (y===25))) ↩ ι; if (ι && abs(ι[k]-med[k][0]) < med[k][1]*1) ↩ ι})); })
	bws[0][0] || (bws[0][0] = [med[0][0],med[1][0]]); for(y←0;y<bws.length;y++) for(x←0;x<bws[0].length;x++) bws[y][x] || (bws[y][x] = y===0? bws[y][x-1] : bws[y-1][x])
	fn ← λ(ι,x,y){
		D ← bws[y/G|0][x/G|0]
		F ← 2.2
		U ← ι => pow(ι,F)
		// ↩ (ι - D[0]) / (D[1] - D[0])}
		↩ pow((U(ι) - U(D[0])) / (U(D[1]) - U(D[0])), 1/F)}

	r ← Buffer(ι.length); for(i←0;i<ι.length;i++) {y ← i/X|0; x ← i%X; r[i] = round(max(0,min(1, fn(ι[i],x,y) )) * 0xff)}
	pixels.show({X,Y,ι:r},'grey',out)
	})
