#!/usr/bin/env ζ
// im_autowhite file
// adjusts white balance
// -p percent ... PERCENT is the percentage of pixels closest in color to white that is used to compute the average graylevel of each RGB channel in the image. Values are floats between 0 and 100. Default=1

// ------------------------------- general lib ------------------------------ //
// shᵥexit ← easy_template((ι,R)=> shᵥ(…R(['{ ',…ι,'; } &>/dev/null; echo $?']))+''==='0' )
shᵥexit ← (ss,…ιs)=>{ r ← catch_union(()=>shᵥ(ss,…ιs)); ↩ T.Error(r)? e.status===0 : true }

// -------------------------------- requires -------------------------------- //
t ← (shᵥ`convert -list configure ;:`+'').re`LIB_VERSION_NUMBER (.+)`[1].split(',').map(ι=> ('00'+ι).slice(-2)).join('')
t >= '06080504' ||( cn.log(APP,'error: imagemagick version',t,' < 06080504'), ‽ )

percent ← 1 // percent pixels closest to white

quantumrange ← shᵥ`convert xc: -format '%[fx:quantumrange]' info:`+''|0
get_channel_mean ← ι=> +(shᵥ`convert ${ι} -format '%[mean]' info: ;:`+'') / quantumrange
get_average ← (a,b)=>{ a = get_channel_mean(a); b = get_channel_mean(b); ↩ a===0 || b===0? 1 : a/b }

tmp ← φ`/tmp/im_autowhite_${random_id(9)}`; tmp.φ`foo`.ι = ''; process.on('exit',()=> shᵥ`rm -rf ${tmp} ;:`); τ ← tmp.φ.bind(tmp)

main ← ι=>{
	shᵥexit`convert -quiet ${ι} +repage ${τ`A`}` ||( cn.log(APP,'error: file',ι,'is not an image'), ‽ )
	cspace ← (shᵥ`identify -ping -verbose ${τ`A`}`+'').re`Colorspace: (.+)`[1]
	;(cspace==='sRGB' || cspace==='Grey') ||( cn.log(APP,'error: file',ι,'is not sRGB or Grey'), ‽ )

	'RGB'._.map(ι=> shᵥ`convert ${τ`A`} -channel ${ι} -separate ${τ(ι)} ;:`)

	// get mask of top percent closest to white
	// approximation using negated saturation and brightness channels multiplied
	shᵥ`convert ${τ`A`} -colorspace HSB -channel G -negate -channel GB -separate +channel -compose multiply -composite +channel -contrast-stretch 0,${percent}% -fill black +opaque white ${τ`M`} ;:`

	// use mask image to isolate user supplied percent of pixels closest to white
	// then get ave graylevel for each channel of mask selected pixels
	avgs ← 'RGB'._.map(ι=>( shᵥ`convert ${τ(ι)} ${τ`M`} -compose multiply -composite ${τ`T`} ;:`, get_average(τ`T`,τ`M`) ))
	shᵥ`convert ${τ`A`} -color-matrix ${[1/avgs[0],0,0,0,1/avgs[1],0,0,0,1/avgs[2]].join(' ')} ${ι} ;:`
	}

APP ← '\x1b[34m[im_autowhite]\x1b[0m'
if_main_do((…a)=>{
	if (a.‖===1) main(a[0])
	else a.forEach((ι,i,l)=>{
		shᵥexit`[ -f ${ι} ]` &&( cn.log(APP,'['+(i+1)+'/'+l.‖+']',ι), main(ι) )
		})
	})
