#!/usr/bin/env ζ₁

‹ξ/do_s

‹ξ/js_var fs ‹require 'fs'››
‹ξ/js_var path ‹require 'path'››
‹ξ/js_var _ ‹require 'underscore'››

‹ξ/js_var macros ‹ξ/object
	‹'η/typeof_object'   ‹η/fn ‹v› ‹ξ/return ‹`` ‹ξ/= ‹ξ/js_typeof ‹~ v›› 'object'  ›››››
	‹'η/typeof_boolean'  ‹η/fn ‹v› ‹ξ/return ‹`` ‹ξ/= ‹ξ/js_typeof ‹~ v›› 'boolean' ›››››
	‹'η/typeof_number'   ‹η/fn ‹v› ‹ξ/return ‹`` ‹ξ/= ‹ξ/js_typeof ‹~ v›› 'number'  ›››››
	‹'η/typeof_string'   ‹η/fn ‹v› ‹ξ/return ‹`` ‹ξ/= ‹ξ/js_typeof ‹~ v›› 'string'  ›››››
	‹'η/typeof_function' ‹η/fn ‹v› ‹ξ/return ‹`` ‹ξ/= ‹ξ/js_typeof ‹~ v›› 'function'›››››
	‹'η/member' ‹η/fn ‹o m› ‹ξ/return ‹ξ/js_if_e ‹ξ/js_and ‹η/typeof_string m› ‹‹ι m 'match'› ~/^\w+$/›› ‹`` ‹ξ/member_bare ‹~ o› ‹~ ‹ξ/create_symbol m›››› ‹`` ‹ξ/member_val ‹~ o› ‹~ m››››››› //! want something like "can_be_symbol"
	‹'η/+' ‹η/fn ‹a b› ‹ξ/return ‹`` ‹ξ/js_+ ‹~ a› ‹~ b››››››
	‹'η/~' ‹η/fn ‹a b› ‹ξ/return ‹`` ‹ξ/js_+ ‹~ a› ‹~ b››››››
	‹'η/fn' ‹η/fn ‹params›
		‹ξ/js_var args ‹‹ι ‹η/args› 'slice'› 1››
		‹ξ/return ‹`` ‹ξ/fn ‹~ params› ‹~ ‹ξ/js_if_e ‹ξ/= ‹ι args 'length'› 1› ‹ι args 0› ‹‹ι ‹ξ/create_sexp ‹ξ/array ‹`` ξ/do_s››› 'concat'› args››››››››
	‹'η/args' ‹η/fn ‹› ‹ξ/return ‹`` ‹‹ι ‹ι ‹ι Array 'prototype'› 'slice'› 'call'› arguments 0›››››
	‹'``' ‹η/fn ‹v› ‹ξ/return
			‹ξ/js_if_e ‹ξ/isa_sexp v›
				‹ξ/js_if_e ‹ξ/js_and ‹ξ/≠ ‹ι v 0› undefined› ‹ξ/= ‹ι ‹ι v 0› 'name'› '~'›› ‹ι v 1› ‹ξ/create_sexp ‹ξ/array ‹`` ξ/create_sexp› ‹‹ι ‹ξ/create_sexp ‹ξ/array ‹`` ξ/array››› 'concat'› ‹‹ι v 'map'› ξ_λ›››››
			‹ξ/js_if_e ‹ξ/isa_symbol v›
				‹`` ‹ξ/create_symbol ‹~ ‹ι v 'name'››››
				v
		›››››
››
‹ξ/assign ‹ι macros 'ι'› ‹ι macros 'η/member'››

‹ξ/js_var macro_expand ‹η/fn ‹v›
	‹ξ/js_if_s ‹ξ/isa_sexp v› ‹ξ/do_s
		‹ξ/js_while_s ‹ι macros ‹ξ/js_if_e ‹ι v 0› ‹ι ‹ι v 0› 'name'› undefined›› ‹ξ/assign v ‹‹ι ‹ι macros ‹ι ‹ι v 0› 'name'›› 'apply'› null ‹‹ι v 'slice'› 1››››
		‹ξ/return ‹ξ/js_if_e ‹ξ/isa_sexp v› ‹‹ι v 'map'› macro_expand› v››
	› ‹ξ/return v››
››

‹ξ/js_var sym_convert ‹η/fn ‹v› ‹ξ/js_var t ‹ξ/create_symbol ‹ι v 's'››› ‹ξ/assign ‹ι t 'pos'› ‹ι v 'pos'›› ‹ξ/return t›››
‹ξ/js_var sym_convert_back ‹η/fn ‹v› ‹ξ/js_var t ‹ξ/object ‹s ‹ι v 'name'›››› ‹ξ/assign ‹ι t 'pos'› ‹ι v 'pos'›› ‹ξ/return t›››
‹ξ/js_var val_to_more ‹η/fn ‹v› ‹ξ/return
	‹ξ/js_if_e ‹ι v 's'› ‹sym_convert v›
	‹ξ/js_if_e ‹ξ/js_instanceof v Array› ‹ξ/create_sexp ‹‹ι v 'map'› val_to_more››
		‹ι v 'v'›
		›››››
‹ξ/js_var more_to_val ‹η/fn ‹v› ‹ξ/return
	‹ξ/js_if_e ‹ξ/isa_symbol v› ‹sym_convert_back v›
	‹ξ/js_if_e ‹ξ/isa_sexp v› ‹‹ι ‹ι ‹ι Array 'prototype'› 'map'› 'call'› v more_to_val›
		‹ξ/object ‹v v››
		›››››

‹ξ/js_var η_s ‹η/fn ‹in_› ‹ξ/return ‹‹ι ‹more_to_val ‹macro_expand ‹val_to_more in_››› 'slice'› 1››››
‹ξ/assign ‹ι module 'exports'› η_s›

›