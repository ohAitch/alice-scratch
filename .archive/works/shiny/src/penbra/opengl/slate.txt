(ns penbra.opengl.slate
  (:refer-clojure :exclude [print file-seq])
  (:use rainboom)
  (:use [clojure.pprint :only [pprint]])
  (:use [penbra.opengl core]
        [penbra.app core])
  (:import [org.lwjgl.opengl Pbuffer PixelFormat]))

;;;

(defstruct slate-struct
  :drawable
  :pixel-buffer)

(def- ^:dynamic *slate* nil)

(defn supported?
  "Checks whether pixel buffers are supported."
  []
  (< 0 (bit-and Pbuffer/PBUFFER_SUPPORTED (Pbuffer/getCapabilities))))

(defn create
  "Creates a slate."
  ([]
     (create nil))
  ([parent]
     (let [drawable (when-let [drawable-fn (-?> *app* :window :drawable)] (drawable-fn))
           pixel-buffer (Pbuffer. 1 1 (-> (PixelFormat.)) drawable)]
       (struct-map slate-struct
         :drawable (constantly pixel-buffer)
         :pixel-buffer pixel-buffer))))

(defn destroy
  "Destroys a slate."
  ([] (destroy *slate*))
  ([slate] nil))

(defmacro with-slate-
  [slate & body]
  `(do
     (.makeCurrent (:pixel-buffer ~slate))
     (binding [*slate* ~slate]
       (try
        ~@body
        (finally
         (destroy ~slate))))))

(defmacro with-slate
  [& body]
  `(let [slate# (create)]
     (with-slate- slate#
       ~@body)))

;;;




