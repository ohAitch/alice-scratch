void main(String[] s_args) {retcode := _main(s_args); if retcode != 0: System.exit(retcode)}
int _main(String[] s_args) {
	cf = new ClassFile(new File("Test.class"));
	cf.init();
	cf.write();
	return 0;
}

ClassFile cf;
void u1 (int    v) {try cf.out.writeByte (v); catch IOException: throw rt(e)}
void u2 (int    v) {try cf.out.writeShort(v); catch IOException: throw rt(e)}
void u4 (int    v) {try cf.out.writeInt  (v); catch IOException: throw rt(e)}
void u8 (long   v) {try cf.out.writeLong (v); catch IOException: throw rt(e)}
void utf(String v) {try cf.out.writeUTF  (v); catch IOException: throw rt(e)}

class ClassFile {
	DataOutputStream out;
	ClassPool cp = new ClassPool();
	int thisc;
	int superc;
	List<I_Meth> lmeth = [];
	
	ctor(File f) {try out = new DataOutputStream(new FileOutputStream(f)); catch IOException: throw rt(e)}
	
	void init() {
		thisc = cp.clazz("Test");
		superc = cp.clazz("java/lang/Object");
			main := new MethBuild();
			main.name("main");
			main.params("[Ljava/lang/String;");
			main.rtype("V");
			bc := main.code;
				bc.callstatic(loc1, "Test._main", "([Ljava/lang/String;)I", loc0);
				bc.ifeq(loc1);
					bc.callstatic("java.lang.System.exit", "(I)V", iconst_0);
				bc.end();
				bc._return();
		lmeth.add(main);
			_main := new MethBuild();
			_main.name("_main");
			_main.params("[Ljava/lang/String;");
			_main.rtype("I");
			bc := _main.code;
				bc.callstatic(loc1, "java.lang.Math.abs", "(I)I", iconst_5);
				bc._new(stack, "java.lang.RuntimeException", "(I)I", iconst_5);
				bc.athrow();
				eh... i give up for now
		lmeth.add(_main);
			
			main := new I_Meth();
			main.ix_name = cp.utf("main");
			main.ix_desc = cp.utf("([Ljava/lang/String;)V");
				main_code := new I_Attr.Code();
				main_code.max_stack = 1;
				main_code.max_locals = 2;
					bc := new BCBuild();
					//\1 = Test._main(\0)
						bc.aload_0();
						bc.invokestatic("Test", "_main", "([Ljava/lang/String;)I");
						bc.istore_1();
					//\1? goto 7
						bc.iload_1();
						bc.ifeq(7);
					//java.lang.System.exit(\1)
						bc.iload_1();
						bc.invokestatic("java/lang/System", "exit", "(I)V");
					//return
						bc._return();
				main_code.bytecode = bc.toArray();
			main.lattr.add(main_code);
		lmeth.add(main);
/*public static void main(String[] s_args) {int retcode = _main(s_args); if (retcode != 0) System.exit(retcode);}
static int _main(String[] s_args) {
	try {int j = Math.abs(5); throw new RuntimeException();}
	catch (RuntimeException e) {e.printStackTrace();}
	return 0;
}*/
			_main := new I_Meth();
			_main.ix_name = cp.utf("_main");
			_main.ix_desc = cp.utf("([Ljava/lang/String;)I");
				_main_code := new I_Attr.Code();
				_main_code.max_stack = 2;
				_main_code.max_locals = 2;
					bc = new BCBuild();
					//\1 = java.lang.Math.abs(5)
						bc.iconst_5();
						bc.invokestatic("java/lang/Math", "abs", "(I)I");
						bc.istore_1();
					//throw new java.lang.RuntimeException()
						bc._new("java/lang/RuntimeException");
						bc.dup();
						bc.invokespecial("java/lang/RuntimeException", "<init>", "()V");
						bc.athrow();
					//\1.(java.lang.RuntimeException#printStackTrace)()
						bc.astore_1();
						bc.aload_1();
						bc.invokevirtual("java/lang/RuntimeException", "printStackTrace", "()V");
					//return 0
						bc.iconst_0();
						bc.ireturn();
				_main_code.bytecode = bc.toArray();
				_main_code.exception_table.add(new ErrorEntry(0, 13, 13, cp.clazz("java/lang/RuntimeException")));
			_main.lattr.add(_main_code);
		lmeth.add(_main);
	}

	void write() {
		u4(0xcafebabe);//u4 magic
		u2(0);//u2 minor_version
		u2(50);//u2 major_version
		cp.write();
		u2(0b0010_0001); //u2 access_flags
		u2(thisc); //CONST_Class this_class
		u2(superc); //CONST_Class super_class
		u2(0); //u2 interfaces_count
		//CONST_Class[] interfaces
		u2(0); //u2 fields_count
		//fields
		u2(lmeth.size()); //u2 methods_count
		for v : lmeth: v.write(); //methods
		u2(0); //u2 attributes_count
		//attributes
	}
}
class I_Meth {
	int ix_name; //CONST_Utf8
	int ix_desc; //CONST_Utf8
	List<I_Attr> lattr = [];
	
	void write() {
		u2(0b000_1001); //u2 access_flags
    	u2(ix_name);
    	u2(ix_desc);
		u2(lattr.size());
		for v : lattr: v.write();
	}
}
abstract class I_Attr {
	abstract void write();
	abstract int len();
  static:
	int lensum(List<I_Attr> lattr) {int r; for v : lattr: r += v.len(); return r}
	class Code isa I_Attr {
		int ix_attr_name = cf.cp.utf("Code");
		int max_stack, max_locals;
		byte[] bytecode;
		List<ErrorEntry> exception_table = [];
		List<I_Attr> lattr = [];
		
		int len() {return 2 + 4 + 2 + 2 + 4 + bytecode.length + 2 + exception_table.size()*8 + 2 + lensum(lattr)}
		void write() {
			u2(ix_attr_name);
			u4(len() - 6);
			u2(max_stack);
			u2(max_locals);
			u4(bytecode.length       ); for v : bytecode       : u1(v);
			u2(exception_table.size()); for v : exception_table: v.write();
			u2(lattr          .size()); for v : lattr          : v.write();
		}
	}
}
class ErrorEntry {
	int start_pc;
	int end_pc;
	int handler_pc;
	int catch_type;
	
	give ctor(int start_pc, int end_pc, int handler_pc, int catch_type) {}
	
	void write() {
		u2(start_pc);
		u2(end_pc);
		u2(handler_pc);
		u2(catch_type);
	}
}

class ClassPool {
	List<Const> lcpe = [];
	
	int clazz(String s) {lcpe.add(new CONST_Class(utf(s))); return last()}
	int fieldref      (String clazz, String name, String desc) {lcpe.add(new CONST_Fieldref          (clazz(clazz), nameAndType(name, desc))); return last()}
	int methodref     (String clazz, String name, String desc) {lcpe.add(new CONST_Methodref         (clazz(clazz), nameAndType(name, desc))); return last()}
	int ifaceMethodref(String clazz, String name, String desc) {lcpe.add(new CONST_InterfaceMethodref(clazz(clazz), nameAndType(name, desc))); return last()}
	int string(String s) {lcpe.add(new CONST_String(utf(s))); return last()}
	//CONST_Integer
	//CONST_Float
	//CONST_Long
	//CONST_Double
	int nameAndType(String name, String desc) {lcpe.add(new CONST_NameAndType(utf(name), utf(desc))); return last()}
	int utf(String s) {lcpe.add(new CONST_Utf8(s)); return last()}
	
	int last() {if lcpe.size() > 250: println("=("); return lcpe.size()}
	
	void write() {
		u2(lcpe.size()+1);
		for v : lcpe: v.write();
	}
}
abstract class Const {abstract void write();}
class CONST_Class				isa Const {int ix_name;                   give ctor(int ix_name                  ) {} void write() {u1( 7); u2(ix_name)                  }}
class CONST_Fieldref			isa Const {int ix_class; int ix_nametype; give ctor(int ix_class, int ix_nametype) {} void write() {u1( 9); u2(ix_class); u2(ix_nametype)}}
class CONST_Methodref			isa Const {int ix_class; int ix_nametype; give ctor(int ix_class, int ix_nametype) {} void write() {u1(10); u2(ix_class); u2(ix_nametype)}}
class CONST_InterfaceMethodref	isa Const {int ix_class; int ix_nametype; give ctor(int ix_class, int ix_nametype) {} void write() {u1(11); u2(ix_class); u2(ix_nametype)}}
class CONST_String				isa Const {int ix_string;                 give ctor(int ix_string                ) {} void write() {u1( 8); u2(ix_string)                }}
class CONST_Integer				isa Const {int bytes;                     give ctor(int bytes                    ) {} void write() {u1( 3); u4(bytes)                    }}
class CONST_Float				isa Const {int bytes;                     give ctor(int bytes                    ) {} void write() {u1( 4); u4(bytes)                    }}
class CONST_Long				isa Const {long bytes;                    give ctor(long bytes                   ) {} void write() {u1( 5); u8(bytes)                    }}
class CONST_Double				isa Const {long bytes;                    give ctor(long bytes                   ) {} void write() {u1( 6); u8(bytes)                    }}
class CONST_NameAndType			isa Const {int ix_name; int ix_desc;      give ctor(int ix_name, int ix_desc     ) {} void write() {u1(12); u2(ix_name); u2(ix_desc)     }}
class CONST_Utf8				isa Const {String s;                      give ctor(String s                     ) {} void write() {u1( 1); utf(s)                       }}
//CONST_Class				u1 tag:7		CONST_Utf8 name_index
//CONST_Fieldref			u1 tag:9		CONST_Class class_index; CONST_NameAndType 
//CONST_Methodref			u1 tag:10		CONST_Class class_index; CONST_NameAndType 
//CONST_InterfaceMethodref	u1 tag:11		CONST_Class class_index; CONST_NameAndType 
//CONST_String				u1 tag:8		CONST_Utf8 string_index
//CONST_Integer				u1 tag:3		u4 bytes
//CONST_Float				u1 tag:4		u4 bytes
//CONST_Long				u1 tag:5		u4 high_bytes; u4 low_bytes
//CONST_Double				u1 tag:6		u4 high_bytes; u4 low_bytes
//CONST_NameAndType			u1 tag:12		CONST_Utf8 name_index; CONST_Utf8 descriptor_index
//CONST_Utf8				u1 tag:1		u2 length; u1 bytes[length]