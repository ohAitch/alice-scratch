#!/usr/bin/env ζλ

# consider buffer
# consider vectorlang

# pal::a.b = `https://cryptopals.com/sets/${a}/challenges/${b}`

# @pal::1.1 @<pre> ι0 as base64 = ι1

# @pal::1.2 @<pre> ι0 xor ι1 = ι2

# @pal::1.3
# [@<pre>] = msg xor byte

# msg: guess by ×-avg [ι * [wikipedia::cat text freq normalize]] (?laplacian prior?) (?update syntax?)
# msg: guess by [wikipedia::cat text freq]


# @pal::1.4
# @md`[this file](↩)`
# find [= msg xor byte]

# @pal::1.5
# @<pre> ι0 xor [repeat "ICE"] as hex = ι1

# @pal::1.6
# edit_distance(a,b) = [a,b]∈binary xor /[=1] .‖
#     edit_distance …[@<pre>] = 37
# ciph = @md`[There's a file here](↩)`
# ciph = msg xor [repeat key]
# assume key.‖ ⊂ 2..40




# --------------------------------------------------------------------------------
# so ive got, um, known alphabet frequencies of a corpus
# and ive got some strings i'm thinking of unsorted letters and i'm trying to figure out-

# ------------------------------
# well, i've got a corpus
# im imagining it was generated by randomly selecting letters according to a set of fixed frequencies
# lets compute my distribution over those fixed frequencies based on the corpus
# my prior is flat

# also ive got some strings from somewhere, lets interpret them in the same way i guess?

# and compute my distributions over those fixed frequencies too, if my prior is like - wait, no

# im trying to compute if it's, like, probably the same *stuff* as the corpus
# or im trying to compute the degree to which it looks like the same stuff as the corpus

# ------------ well. -----------
# i have a text, call it if_is_similar_to
# i have some more texts and i want to find out which ones are most similar to if_is_similar_to

# lets do something simple
# interpret the texts as random strings of letters generated according to a set of fixed frequencies

# if gen:if_is_similar_to is a small norm distance from gen:text then it is probably more similar

# if we keep our prior flat, we can find distributions for gens of texts

# if we look for the probability that texts have the *same* generator thats an integral of the product of the generator distributions (right?)
# if our prior over generator distribution space is *also* flat

# luckily all our generator distributions are n-spheres *so* that probability will be 

# wow this is so wrong

# ------------------------------
# aaa?

# looks like its time to sleep

# ------------------------------
# msg: guess by [wikipedia::cat text freq]
# so uh how can i do this
# i want to produce a probability that this is an english sentence, given simple priors
# scoring "abc" worse than "abcabcabcabcabcabc^abc"

# ------------------------------
# well, ive got some short texts

texts ← []; text ← ι=> texts.push(…ι.trim().split(/\n+/).map(ι=> ι.replace(/#.*/g,'').trim()))

text(`
1110100010101100001000100100000000110001100101001011000010100110010001101000010001101010111010010000 # 100..map(=> random()>0.5? 0 : 1).join('')+' # '+code
0001011111010011110001100011101011111011101010111111000001101111100101011111011111001100110010101100 # 100..map(=> random()>0.6? 0 : 1).join('')+' # '+code
1100011101101100011111010
1110101110111111111111011010101111101100001011011110000011011111100111111011110101010101011110011111 # 100..map(=> random()>0.7? 0 : 1).join('')+' # '+code
`)
# also i have a longer text
text(`


`)
# im imagining the texts are generated by randomly selecting from (0 1) according to a set of fixed frequencies (which can be summarized as `p`)
# i want to find out which short texts are most similar to the longer text
# looking at each text with a flat prior,

cn.log(  texts.map(ι=>{ t ← _(ι).countBy(); k ← t[1]; n ← t[0]+t[1]; ↩ (k+1)/(n+2) })  )

# ok but i want to do this the full way

fact ← memoize_proc( ι=> ι===0? 1 : ι*fact(ι-1) )
# p(010) given p0=0.6 p1=0.4
0.144 # ( 0.6*0.6*0.4 )+' # '+code
# p(k0=2,k1=1,n=3) given p0=0.6 p1=0.4
0.216 # ( 0.6*0.6*0.6 * fact(3)/(fact(3)*fact(0)) )+' # '+code
0.43199999999999994 # ( 0.6*0.6*0.4 * fact(3)/(fact(2)*fact(1)) )+' # '+code
0.28800000000000003 # ( 0.6*0.4*0.4 * fact(3)/(fact(1)*fact(2)) )+' # '+code
0.06400000000000002 # ( 0.4*0.4*0.4 * fact(3)/(fact(0)*fact(3)) )+' # '+code

# https://en.wikipedia.org/wiki/Checking_whether_a_coin_is_fair
# https://hplusminus.tumblr.com/post/158605421890/practical-bayesianism-the-sunrise-problem-and
# https://en.wikipedia.org/wiki/Bayesian_inference
# https://stackoverflow.com/a/3015044/322866
# https://en.wikipedia.org/wiki/Dirichlet_distribution
# https://mathematica.stackexchange.com/questions/42652/uniformly-distributed-n-dimensional-probability-vectors-over-a-simplex
# file:/~/books/Bayesian%20Data%20Analysis.pdf

# the things jimmy sent me that i am looking at are fascinating, but i dont really understand them
# http://emina.github.io/rosette/
# http://emina.github.io/rosette/apps.html
# http://github.com/emina/rosette
# http://github.com/Z3Prover/z3
# http://saturn.stanford.edu/pages/overviewindex.html
# http://theory.stanford.edu/~arbrad/papers/Understanding_IC3.pdf
# http://google.com/search?q=model+checking+algorithm+IC3

# https://en.wikipedia.org/wiki/Dirichlet_distribution#Conjugate_to_categorical.2Fmultinomial
# is totally the thing you want to be doing here
