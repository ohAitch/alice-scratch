# pal::a.b = `https://cryptopals.com/sets/${a}/challenges/${b}`
pal ← (a,b)=> pal.root+`/sets/${a}/challenges/${b}`
pal.root = 'https://cryptopals.com'

################################### @pal::1.1 ##################################
# @<pre> ι0 as base64 = ι1
[a,b] ← (GET_L(pal(1,1),∞)+'').match(re`<pre>.*?</pre>`.g).map(.re`<pre>(.*?)</pre>`[1])
Buffer.from(a,'hex').toString('base64') === b || ‽

################################### @pal::1.2 ##################################
# @<pre> ι0 xor ι1 = ι2
[a,b,r] ← (GET_L(pal(1,2),∞)+'').match(re`<pre>.*?</pre>`.g).map(.re`<pre>(.*?)</pre>`[1])
	.map(ι=> Buffer.from(ι,'hex'))
≈( npm`buffer-xor@2.0.2`(a,b) ,r ) || ‽

################################### @pal::1.3 ##################################
# [@<pre>] = msg xor byte
# msg: guess by ×-avg [ι * [wikipedia::cat text freq normalize]] (?laplacian prior?) (?update syntax?)
# msg: guess by [wikipedia::cat text freq]

bits ← ι=> […ι].map…(ι=> 8..map(i=> (ι>>i)&1 ))
Ox ← ι=>{ι+='' ;↩ Buffer.from(ι,'hex') }
Ob ← ι=>{ι+='' ;↩ […ι].map(ι=> ι==='0'?0:1) }
b8 ← ι=> Buffer.from([ι])
xor_repeat ← (a,b)=>{ ;if( b.‖ > a.‖ ) #swap a b ;r ← Buffer.alloc(a.‖) ;for( i←0;i<r.‖;i++ ) r[i] = a[i] b^ b[i % b.‖] ;↩ r }

𐅋𐅮𐅬𐅋 ← ι=>{ # find_mostlikely_frequencies_assuming_ι_has_fixed_frequencies_over_αβ
	/*assume*/ αβ ← ⋯(2^8)
	↩ numeric2.mean([ numeric2.norm1(αβ.map(=>1)) ,…ι.map(ι=> αβ.map(α=> α===ι?1:0) ) ]) }
looks_english ← ι=> -numeric2.L2(
	,𐅫𐅭𐅦𐅦||(𐅫𐅭𐅦𐅦= 𐅋𐅮𐅬𐅋([…Buffer.from(wikipedia_source('English_language'))]) )
	,𐅋𐅮𐅬𐅋([…ι]) ) ;𐅫𐅭𐅦𐅦←;

0&& 0x100.map(b8.X).map(b=> xor_repeat(b,Ox`1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736`)|>(x=>[ ,'⊕'+b.toSting('hex')+':'+see_buffer(x) ,looks_english(x) ]) )._.sortBy(ι=>-ι[1])

################################### @pal::1.4 ##################################
# @md`[this file](↩)`
# find [= msg xor byte]

t ← pal.root+(GET_L(pal(1,4),∞)+'').re`<a href='(.*?)'>this file</a>`[1]
;0&& (GET_L(t,∞)+'').split('\n').map(ι=> Buffer.from(ι,'hex'))
	.map(a=> 0x100.map(b8.X).map(b=>{
	r ← xor_repeat(a,b) ;r ← [see_buffer(a),see_buffer(b),see_buffer(r),looks_english(r)]
	if( !𐅭𐅦𐅫𐅭 || r[3] > 𐅭𐅦𐅫𐅭[3] ){ 𐅭𐅦𐅫𐅭 = r ;log('found best',r) }
	})) ;𐅭𐅦𐅫𐅭←;

################################### @pal::1.5 ##################################
# @<pre> ι0 xor [repeat "ICE"] as hex = ι1
[a,r] ← (GET_L(pal(1,5),∞)+'').match(re`<pre>[^]*?</pre>`.g).map(.re`<pre>([^]*?)</pre>`[1])
a ← xor_repeat(Buffer.from('ICE'),Buffer.from(a))
b ← Buffer.from(r.replace(/\s/g,''),'hex')
≈(a,b) || ‽

################################### @pal::1.6 ##################################
# edit_distance(a,b) = [a,b]∈binary xor /[=1] .‖
#     edit_distance …[@<pre>] = 37
# ciph = @md`[There's a file here](↩)`
# ciph = msg xor [repeat key]
# assume key.‖ ⊂ 2..40

# https://cryptopals.com/sets/1/challenges/6
