# @pal::1.5
# @<pre> Œπ0 xor [repeat "ICE"] as hex = Œπ1

# @pal::1.6
# edit_distance(a,b) = [a,b]‚ààbinary xor /[=1] .‚Äñ
#     edit_distance ‚Ä¶[@<pre>] = 37
# ciph = @md`[There's a file here](‚Ü©)`
# ciph = msg xor [repeat key]
# assume key.‚Äñ ‚äÇ 2..40

# pal::a.b = `https://cryptopals.com/sets/${a}/challenges/${b}`
pal ‚Üê (a,b)=> pal.root+`/sets/${a}/challenges/${b}`
pal.root = 'https://cryptopals.com'

################################### @pal::1.1 ##################################
# @<pre> Œπ0 as base64 = Œπ1
[a,b] ‚Üê (GET_L(pal(1,1),‚àû)+'').match(re`<pre>.*?</pre>`.g).map(.re`<pre>(.*?)</pre>`[1])
Buffer.from(a,'hex').toString('base64') === b || ‚ÄΩ

################################### @pal::1.2 ##################################
# @<pre> Œπ0 xor Œπ1 = Œπ2
[a,b,r] ‚Üê (GET_L(pal(1,2),‚àû)+'').match(re`<pre>.*?</pre>`.g).map(.re`<pre>(.*?)</pre>`[1])
	.map(Œπ=> Buffer.from(Œπ,'hex'))
npm`buffer-xor@2.0.2`(a,b)
‚âà( npm`buffer-xor@2.0.2`(a,b) ,r ) || ‚ÄΩ

################################### @pal::1.3 ##################################
# [@<pre>] = msg xor byte
# msg: guess by √ó-avg [Œπ * [wikipedia::cat text freq normalize]] (?laplacian prior?) (?update syntax?)
# msg: guess by [wikipedia::cat text freq]

################ prelude ###############
bits ‚Üê Œπ=> [‚Ä¶Œπ].map‚Ä¶(Œπ=> 8..map(i=> (Œπ>>i)&1 ))
Ox ‚Üê Œπ=>{Œπ+='' ;‚Ü© Buffer.from(Œπ,'hex') }
Ob ‚Üê Œπ=>{Œπ+='' ;‚Ü© [‚Ä¶Œπ].map(Œπ=> Œπ==='0'?0:1) }
b8 ‚Üê Œπ=> Buffer.from([Œπ])
xor_repeat ‚Üê (a,b)=>{ ;if( b.‚Äñ > a.‚Äñ ) #swap a b ;r ‚Üê Buffer.alloc(a.‚Äñ) ;for( i‚Üê0;i<r.‚Äñ;i++ ) r[i] = a[i] b^ b[i % b.‚Äñ] ;‚Ü© r }

########################################
êÖØêÖ´êÖ¨êÖú ‚Üê 1
find_mostlikely_frequencies_assuming_Œπ_has_fixed_frequencies_over_Œ±Œ≤ ‚Üê Œπ=>{
	/*assume*/ Œ±Œ≤ ‚Üê ‚ãØ(2^êÖØêÖ´êÖ¨êÖú)
	‚Ü© numeric2.mean([ numeric2.norm1(Œ±Œ≤.map(=>1)) ,‚Ä¶Œπ.map(Œπ=> Œ±Œ≤.map(Œ±=> Œ±===Œπ?1:0) ) ]) }

# looks_english ‚Üê Œπ=> 

if(0){
Œπ ‚Üê [
	,['eng0',bits(Buffer.from(wikipedia_source('English_language')))]
	,‚Ä¶ 0x100.map(Œπ=> xor_repeat(b8(Œπ),Ox`1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736`)|>(x=>[ ,'‚äï'+Œπ.toString(16).padStart(2,'0')+':'+see_buffer(x) ,bits(x) ]) )
	]
	.map(([name,Œπ])=>[ ,name
	,Œπ.chunk(êÖØêÖ´êÖ¨êÖú).map(Œπ=> parseInt(Œπ.reverse().join(''),2) )
		|>(find_mostlikely_frequencies_assuming_Œπ_has_fixed_frequencies_over_Œ±Œ≤)
	])

electron_window('Œ∂see',Œπ,Œπ=>{ eval_main(.focus())

# Œπ=Œπ .map(.map(Œπ=>{ êÖ™ ‚Üê Math.log2 ;t ‚Üê 2^-7 ;‚Ü© (êÖ™(t+Œπ)-êÖ™(t))/(êÖ™(t+1)-êÖ™(t)) }))
t ‚Üê Œπ.map(..1)
t ‚Üê new (npm`ml-pca@2.1.0`)(t,{center:‚úì}).predict(t)
t = numeric2.norm01(t.‚Ä¶).chunk(t[0].‚Äñ)
Œπ = _.zip(Œπ.map(..0),t)

t ‚Üê Œπ.find(..0==='eng0')[1] ;Œπ=Œπ ._.sortBy(Œπ=> numeric2.L2(t,Œπ[1]))

require_new`/~/code/scratch/see.Œ∂`._0n_0n_01_labeled(Œπ)

});
}

################################### @pal::1.4 ##################################
# @md`[this file](‚Ü©)`
# find [= msg xor byte]
t ‚Üê pal.root+(GET_L(pal(1,4),‚àû)+'').re`<a href='(.*?)'>this file</a>`[1]
;(GET_L(t,‚àû)+'').split('\n').map(Œπ=> Buffer.from(Œπ,'hex'))
